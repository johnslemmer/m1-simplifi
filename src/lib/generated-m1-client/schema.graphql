type Mutation {
  """Updates the account-level dividend settings"""
  accountConfigurationDividends(input: SetAccountConfigurationDividendSettingsInput!): SetAccountConfigurationDividendSettingsPayload!

  """Updates an account's symbol-level dividend settings"""
  accountConfigurationDividendsForHoldings(input: SetAccountConfigurationDividendSettingsForHoldingsInput!): SetAccountConfigurationDividendSettingsForHoldingsPayload!

  """Cancels an existing ACH relationship."""
  cancelAchRelationship(input: CancelAchRelationshipInput!): CancelAchRelationshipPayload

  """Confirms a pending ACH relationship that was created via deposits."""
  confirmAchRelationshipViaDeposits(input: ConfirmAchRelationshipViaDepositsInput!): ConfirmAchRelationshipViaDepositsPayload

  """Creates a new ACH relationship via deposit confirmation."""
  createAchRelationshipViaDeposits(input: CreateAchRelationshipViaDepositsInput!): CreateAchRelationshipViaDepositsPayload

  """Creates a new ACH relationship via a linked external account."""
  createAchRelationshipViaLink(input: CreateAchRelationshipViaLinkInput!): CreateAchRelationshipViaLinkPayload

  """Submits a Credit Card application for a user."""
  submitCreditCardApplication(input: SubmitCreditCardApplicationInput!): SubmitCreditCardApplicationPayload!

  """
  Accepts an approved credit card application offer for a user. Will fail if `CreditCard.activeOffer == null`.
  """
  acceptCreditCardOffer(input: AcceptCreditCardOfferInput!): AcceptCreditCardOfferPayload!

  """
  Attempt to progress an application after the user's credit is unfrozen.
  """
  continueCreditCardApplicationAfterUserCreditIsUnfrozen(input: ContinueCreditCardApplicationAfterUserCreditIsUnfrozenInput!): ContinueCreditCardApplicationAfterUserCreditIsUnfrozenPayload!

  """
  Activates a physcial credit card. Accepts the last 4 digits of a credit card which will be validated against the outstanding card.
  """
  activateCreditCard(input: ActivateCreditCardInput!): ActivateCreditCardPayload!

  """Set the lock state on a Credit Card."""
  setLockOnCreditCard(input: SetLockOnCreditCardInput!): SetLockOnCreditCardPayload!

  """Adds or removes a user from the Credit Card marketing waitlist."""
  setCreditCardWaitlistStatus(input: SetCreditCardWaitlistStatusInput!): SetCreditCardWaitlistStatusPayload! @deprecated(reason: "Waitlist no longer used")
  updateCreditCardRewardPayoutDestination(input: UpdateCreditCardRewardPayoutDestinationInput!): UpdateCreditCardRewardPayoutDestinationPayload!

  """
  Returns necessary encrypted data to complete credit card push provisioning to Apple Pay & Google Pay
  """
  requestMobilePushProvisioningCertificates(input: RequestMobilePushProvisioningCertificatesInput!): RequestMobilePushProvisioningCertificatesPayload!

  """Links new funding sources via a Plaid Link token."""
  linkFundingSources(input: LinkFundingSourcesInput!): LinkFundingSourcesPayload

  """Links new funding sources via a Plaid Link token."""
  completePlaidIncomeVerification(input: CompletePlaidIncomeVerificationInput!): CompletePlaidIncomeVerificationPayload

  """Create ACH relationship with Plaid Link."""
  createAchRelationshipViaFundingSource(input: CreateAchRelationshipViaFundingSourceInput): CreateAchRelationshipViaFundingSourcePayload

  """Confirm micro deposit amounts with Plaid."""
  confirmManualPlaidMicroDeposits(input: ConfirmManualPlaidMicroDepositsInput): ConfirmManualPlaidMicroDepositsPayload

  """Links new funding sources via a Plaid Link token."""
  generatePlaidIncomeLinkToken(input: GeneratePlaidIncomeLinkTokenInput): GeneratePlaidIncomeLinkTokenPayload

  """
  Links new external accounts via a [Plaid Link](https://github.com/plaid/link) token, then creates an ACH relationship with a single external account based on the specified Plaid account ID.
  """
  linkAndCreateAchRelationship(input: LinkAndCreateAchRelationshipInput!): LinkAndCreateAchRelationshipPayload

  """Reissues new deposits for a pending ACH relationship via deposits."""
  reissueDepositsForAchRelationship(input: ReissueDepositsForAchRelationshipInput!): ReissueDepositsForAchRelationshipPayload

  """Open a High Yield Savings Account"""
  openHighYieldSavingsAccount(input: OpenHighYieldSavingsAccountInput!): OpenHighYieldSavingsAccountMutationPayload

  """
  Creates a relationship between an external account and product via Transfers service.
  """
  createFundingSourceRelationship(input: CreateFundingSourceRelationshipInput!): CreateFundingSourceRelationshipPayload!

  """Sets the direct deposit destination (Account)."""
  setDirectDepositDestination(input: SetDirectDepositDestinationInput!): SetDirectDepositDestinationPayload!

  """Create a transfer instance to move money imminently."""
  createTransferInstance(input: CreateTransferInstanceInput!): CreateTransferInstancePayload!

  """
  Create a transfer instance to move money imminently to/from an IRA account.
  """
  createIraTransfer(input: CreateIraTransferInput!): CreateIraTransferResult!

  """
  Creates a new, or updates an existing, rule which will create transfer
  instances on a schedule.
  """
  setScheduledTransferRule(input: SetScheduledTransferRuleInput!): SetScheduledTransferRulePayload!

  """Updates and/or creates an entire pie tree."""
  updatePieTree(input: UpdatePieTreeInput!): UpdatePieTreePayload

  """Registers a new user."""
  registerUser(input: RegisterUserInput!): RegisterUserPayload

  """Initiates the transfer of personal loan funds for the user."""
  queueLoanDisbursement(input: QueueLoanDisbursementInput!): QueueLoanDisbursementPayload

  """Opens an account."""
  openAccount(input: OpenAccountInput!): OpenAccountPayload

  """Opens a custodial account."""
  openCustodialAccount(input: OpenCustodialAccountInput!): OpenCustodialAccountPayload

  """Verifies completion of document upload process."""
  completeDocumentUpload(input: CompleteDocumentUploadInput!): CompleteDocumentUploadPayload @deprecated(reason: "Use `completeDocumentUploadRequest` instead.")

  """Verifies the product agnostic document upload request flow."""
  completeDocumentUploadRequest(input: CompleteDocumentUploadRequestInput!): CompleteDocumentUploadRequestPayload

  """Updates a user's profile information."""
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload

  """Links new external accounts via a Plaid Link token."""
  linkExternalAccounts(input: LinkExternalAccountsInput!): LinkExternalAccountsPayload

  """Refresh the estimated trading infomration with latest data."""
  refreshEstimatedTrading(input: RefreshEstimatedTradingInput!): RefreshEstimatedTradingPayload

  """Creates a new, or updates an existing, smart transfer rule."""
  setSmartTransferRule(input: SetSmartTransferRuleInput!): SetSmartTransferRulePayload

  """Set the enabled/disabled status on a transfer rule."""
  setEnabledOnTransferRule(input: SetEnabledOnTransferRuleInput!): SetEnabledOnTransferRulePayload!

  """Create a temporary link for an account document."""
  createAccountDocumentLink(input: CreateAccountDocumentLinkInput!): CreateAccountDocumentLinkPayload!

  """Generate token for initializing Plaid connection."""
  generatePlaidLinkItemAddClientToken(input: GeneratePlaidLinkItemAddClientTokenInput!): GeneratePlaidLinkItemAddClientTokenPayload

  """Generate a token to initialize the payment client."""
  generatePaymentClientToken(input: GeneratePaymentClientTokenInput!): GeneratePaymentClientTokenPayload

  """Generate a presigned S3 url for document upload requests."""
  generatePresignedDocumentUploadRequestUrl(input: GeneratePresignedDocumentUploadRequestUrlInput!): GeneratePresignedUrlPayload

  """Generate a presigned S3 url for generic document uploads."""
  generateGenericPresignedDocumentUrl(input: GenerateGenericPresignedDocumentUrlInput!): GenerateGenericPresignedDocumentUrlPayload

  """Generate a presigned S3 url for document uploads."""
  generatePresignedUrl(input: GeneratePresignedUrlInput!): GeneratePresignedUrlPayload @deprecated(reason: "Use `generatePresignedDocumentUploadRequestUrl` instead.")

  """Sets notification preferences."""
  setNotificationPreferences(input: SetNotificationPreferencesInput!): SetNotificationPreferencesPayload

  """Obsolete and no longer functional. Always returns null."""
  applyPromotionCode(input: ApplyPromotionCodeInput!): ApplyPromotionCodePayload @deprecated(reason: "Obsolete, user-entered promo codes are no longer accepted.")

  """Selects an account to be the payments account."""
  selectPaymentsAccount(input: SelectPaymentsAccountInput!): SelectPaymentsAccountPayload

  """
  Move a set of unmanaged holdings into a user's portfolio. "Managed"
  in this context means the holdings will be acted on by the trading
  pipeline.
  """
  moveUnmanagedHoldings(input: MoveUnmanagedHoldingsInput): MoveUnmanagedHoldingsPayload

  """
  Liquidate set of unmanaged holdings by ID's. If successful, this operation will subject the given holdings to our trading pipeline.
  """
  markUnmanagedHoldingsForLiquidation(input: MarkUnmanagedHoldingsForLiquidationInput!): MarkUnmanagedHoldingsForLiquidationPayload

  """
  Cancel a set of unmanaged holdings by ID's from liquidation. If successful, the given set of UH's will no longer be subject to our trading pipeline.
  """
  unmarkUnmanagedHoldingsForLiquidation(input: UnmarkUnmanagedHoldingsForLiquidationInput!): UnmarkUnmanagedHoldingsForLiquidationPayload

  """
  Submits an ACAT Transfer Request from an external brokerage to M1 invest account.
  """
  submitInvestAcatTransfer(input: SubmitInvestAcatTransferInput!): SubmitInvestAcatTransferPayload

  """
  Submit a request to setup AutoPay for a Personal Loan during the origination flow.
  """
  autoPayApplicationSetUp(input: AutoPayApplicationSetUpInput!): AutoPayApplicationSetUpPayload

  """
  Moves slices from a User's Allocation Pie elsewhere within their Portfolio.
  """
  moveSlices(input: MoveSlicesInput!): MoveSlicesPayload

  """
  Loops over move slices mutation, then updates the final pie tree at the end.
  Pie trees in each move must be valid pie trees since they are validated each move.
  """
  moveSlicesBatch(input: MoveSlicesBatchInput!): MoveSlicesBatchPayload

  """Archives (or unarchives) a pie."""
  archivePie(input: ArchivePieInput!): ArchivePiePayload
  createPieShareUrl(input: CreatePieShareUrlInput!): CreatePieShareUrlPayload
  setMaxCashThreshold(input: SetMaxCashThresholdInput!): SetMaxCashThresholdPayload

  """Accept the personal loan for a user."""
  acceptPersonalLoan(input: AcceptPersonalLoanInput!): AcceptPersonalLoanPayload!

  """Accept a personal loan offer."""
  acceptPersonalLoanOffer(input: AcceptPersonalLoanOfferInput!): AcceptPersonalLoanOfferPayload!

  """Activate a Plus trial, if eligible."""
  activatePlusTrial(input: ActivatePlusTrialInput!): ActivatePlusTrialPayload

  """Archive a transfer rule."""
  archiveTransferRule(input: ArchiveTransferRuleInput!): ArchiveTransferRulePayload!

  """Authenticates via credentials and produces an access token."""
  authenticate(input: AuthenticateInput!): AuthenticatePayload

  """Cancel a pending transfer instance."""
  cancelTransferInstance(input: CancelTransferInstanceInput!): CancelTransferInstancePayload!

  """Changes an authenticated user's password."""
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload

  """Completes the phone verification process."""
  completePhoneVerification(input: CompletePhoneVerificationInput!): CompletePhoneVerificationPayload

  """Creates a new profile without need for any accounts."""
  createProfile(input: CreateProfileInput!): CreateProfilePayload

  """Create a temporary link for a Spend Checking account document."""
  createSpendAccountDocumentLink(input: CreateSpendAccountDocumentLinkInput!): CreateSpendAccountDocumentLinkPayload!

  """
  Initiate the process of verifying a user's identity, required to use Spend
  features. Starts an identity verification session and returns verification
  challenge questions.
  """
  initiateSpendIdentity(input: InitiateSpendIdentityInput!): InitiateSpendIdentityPayload! @deprecated(reason: "Sunset Checking.")

  """
  Update a user's Spend identity. Changing values on the Spend account details, including
  if a user is subject to backup witholding for multiple checking accounts.
  """
  updateSpendIdentity(input: UpdateSpendIdentityInput!): UpdateSpendIdentityPayload! @deprecated(reason: "Sunset Checking.")

  """
  Finish the process of verifying a user's identity for Spend Checking. Accepts the
  verification token and answers to the verification challenge questions
  returned by `initiateSpendIdentity`.
  """
  verifySpendIdentity(input: VerifySpendIdentityInput!): VerifySpendIdentityPayload! @deprecated(reason: "Sunset Checking.")

  """
  Completes the Spend Checking enrollment process by creating the primary Spend Checking account
  and reconfiguring internal ACH connections.
  """
  completeSpendEnrollment(input: CompleteSpendEnrollmentInput!): CompleteSpendEnrollmentPayload! @deprecated(reason: "Sunset Checking.")

  """
  Create a Spend Checking external bank account connection with a bank account that has
  been verified via an instant link.
  """
  createSpendExternalAccountViaLink(input: CreateSpendExternalAccountViaLinkInput!): CreateSpendExternalAccountViaLinkPayload! @deprecated(reason: "Banker service deprecation: Mutation no longer in use")

  """
  Initiate the process of connecting an external bank account to a Spend
  account. Verification is accomplished via micro-deposits.
  """
  initiateSpendExternalAccount(input: InitiateSpendExternalAccountInput!): InitiateSpendExternalAccountPayload! @deprecated(reason: "Banker service deprecation: Mutation no longer in use")

  """
  Finish the process of connecting an external bank account to a Spend Checking account.
  Accepts the micro-deposit amounts that were initiated by
  `initiateSpendExternalAccount`.
  """
  verifySpendExternalAccount(input: VerifySpendExternalAccountInput!): VerifySpendExternalAccountPayload! @deprecated(reason: "Banker service deprecation: Mutation no longer in use")

  """Archive a Spend external bank account."""
  archiveSpendExternalAccount(input: ArchiveSpendExternalAccountInput!): ArchiveSpendExternalAccountPayload! @deprecated(reason: "Banker service deprecation: Mutation no longer in use")

  """Send a check."""
  sendCheck(input: SendCheckInput!): SendCheckPayload @deprecated(reason: "Sunset Checking.")

  """Disables two factor authentication for the user account."""
  disableTwoFactorAuth(input: DisableTwoFactorAuthInput!): DisableTwoFactorAuthPayload

  """Marks an announcement context as dismissed."""
  dismissAnnouncements(input: DismissAnnouncementsInput!): DismissAnnouncementsPayload

  """Enables two factor authentication for the user account."""
  enableTwoFactorAuth(input: EnableTwoFactorAuthInput!): EnableTwoFactorAuthPayload

  """Generate an Atomic access token"""
  generateAtomicToken(input: GenerateAtomicTokenInput!): GenerateAtomicTokenPayload

  """
  Generates an idempotency token to be used for identifying unique transactions.
  """
  generateIdempotencyKey(input: GenerateIdempotencyKeyInput!): GenerateIdempotencyKeyPayload

  """Initializes the secret necessary to enable two factor authentication."""
  initializeTwoFactorAuth(input: InitializeTwoFactorAuthInput!): InitializeTwoFactorAuthPayload

  """Initialize two factor verification for a user"""
  initializeTwoFactorVerification(input: InitializeTwoFactorVerificationInput!): InitializeTwoFactorVerificationPayload!

  """Initiates the phone verification process."""
  initiatePhoneVerification(input: InitiatePhoneVerificationInput!): InitiatePhoneVerificationPayload

  """Initiate the reset password process with a provided email address."""
  initiateResetPassword(input: InitiateResetPasswordInput!): InitiateResetPasswordPayload

  """Joins the crypto waitlist for the user."""
  joinCryptoWaitlist(input: JoinCryptoWaitlistInput!): JoinCryptoWaitlistPayload

  """Sets autorenewal preference for a Plus membership."""
  setPlusAutoRenewalPreference(input: SetPlusAutoRenewalPreferenceInput!): SetPlusAutoRenewalPreferencePayload @deprecated(reason: "plus is no longer supported.")

  """Create plus membership or update plus membership preferences."""
  confirmPlusMembership(input: ConfirmPlusMembershipInput!): ConfirmPlusMembershipPayload @deprecated(reason: "plus is no longer supported.")

  """Submit a payment for a Plus membership."""
  submitPlusMembershipPayment(input: SubmitPlusMembershipPaymentInput!): SubmitPlusMembershipPaymentPayload @deprecated(reason: "plus is no longer supported.")

  """Submit a payment for 1 year of Plus"""
  submitOneTimePlusPayment(input: SubmitOneTimePlusPaymentInput!): SubmitOneTimePlusPaymentPayload @deprecated(reason: "plus is no longer supported.")

  """Set the active Plus membership payment method."""
  setActivePlusMembershipPaymentMethod(input: SetActivePlusMembershipPaymentMethodInput!): SetActivePlusMembershipPaymentMethodPayload @deprecated(reason: "plus is no longer supported.")

  """Accepts a promotion campaign."""
  acceptPromotionCampaign(input: AcceptPromotionCampaignInput!): AcceptPromotionCampaignPayload!

  """Accepts a promotion campaign by promocode."""
  acceptPromotionByPromoCode(input: AcceptPromotionByPromoCodeInput!): AcceptPromotionCampaignPayload!

  """Authenticates via a refresh token and produces a new access token."""
  reauthenticate(input: ReauthenticateInput!): ReauthenticatePayload

  """Marks or unmarks a portfolio slice in the tree for reblance."""
  rebalancePortfolioSlice(input: RebalancePortfolioSliceInput!): RebalancePortfolioSlicePayload

  """Renames the account of the given id to a new string value."""
  renameAccount(input: RenameAccountInput!): RenameAccountPayload!

  """Reports information about a mobile device."""
  reportMobileDeviceInfo(input: ReportMobileDeviceInfoInput!): ReportMobileDeviceInfoPayload @deprecated(reason: "Endpoint no longer being used by backend")

  """
  Submits a request to CS to close the current users accounts and mark for deactivation.
  """
  requestAccountDeactivation(input: RequestAccountDeactivationInput!): RequestAccountDeactivationPayload

  """
  Requests instructions to open an account of an offline-only registration type.
  """
  requestOfflineOpenAccount(input: RequestOfflineOpenAccountInput!): RequestOfflineOpenAccountPayload

  """Request to participate in the referrals program."""
  requestReferralsParticipation(input: RequestReferralsParticipationInput!): RequestReferralsParticipationPayload

  """
  Resends the verification email to the authenticated user's primary email
  address.
  """
  resendEmailVerification(input: ResendEmailVerificationInput!): ResendEmailVerificationPayload

  """Reset a user's password given a valid reset token."""
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload

  """Resubmit a personal loan application after credit freeze"""
  resubmitLoanAfterCreditFreeze(input: ResubmitLoanAfterCreditFreezeInput!): ResubmitLoanAfterCreditFreezePayload

  """Revokes the given refresh token so that it cannot be used."""
  revokeRefresh(input: RevokeRefreshInput!): RevokeRefreshPayload

  """Sends a test push notification."""
  sendTestPushNotification(input: SendTestPushNotificationInput!): SendTestPushNotificationPayload
  setFullyPaidLendingStatus(input: SetFullyPaidLendingStatusInput!): SetFullyPaidLendingStatusPayload

  """Sets introduction source without need to create a profile."""
  setIntroductionSource(input: SetIntroductionSourceInput!): SetIntroductionSourcePayload @deprecated(reason: "No longer asking for introduction source")
  setPortfolioSliceOrder(input: SetPortfolioSliceOrderInput!): SetPortfolioSliceOrderPayload

  """Set the preferred Platform Billing payment method"""
  setPreferredPlatformPaymentMethod(input: SetPreferredPlatformPaymentMethodInput!): SetPreferredPlatformPaymentMethodPayload

  """Sets or unsets a trade order for a portfolio slice."""
  setPreferredTradeWindow(input: SetPreferredTradeWindowInput!): SetPreferredTradeWindowPayload

  """Sets the root pie on an investment account."""
  setRootPie(input: SetRootPieInput!): SetRootPiePayload

  """Sets users financial goal."""
  setUserFinancialGoal(input: SetUserFinancialGoalInput!): SetUserFinancialGoalPayload @deprecated(reason: "This mutation is deprecated.")

  """Updates the agreement status for a user."""
  signAgreementBundle(input: SignAgreementBundleInput!): SignAgreementBundlePayload

  """Starts an on demand trade window for Crypto."""
  startCryptoOnDemandTradeWindow(input: StartCryptoOnDemandTradeWindowInput!): StartCryptoOnDemandTradeWindowPayload
  startCustomerSupportConversation(input: StartCustomerSupportConversationInput!): StartCustomerSupportConverstionPayload

  """Submit a personal loan application."""
  submitPersonalLoanApplication(input: SubmitPersonalLoanApplicationInput!): SubmitPersonalLoanApplicationPayload!

  """Submit user feedback form for a user"""
  submitUserFeedback(input: SubmitUserFeedbackInput!): SubmitUserFeedbackPayload!

  """Updates a custodial account beneficiary's legal address"""
  updateCustodialAccountBeneficiaryLegalAddress(input: UpdateCustodialAccountBeneficiaryLegalAddressInput!): UpdateCustodialAccountBeneficiaryLegalAddressPayload

  """Update a user's email address"""
  updateEmail(input: UpdateEmailInput!): UpdateEmailPayload!
  updateFullyPaidLendingStatus(input: UpdateFullyPaidLendingStatusInput!): UpdateFullyPaidLendingStatusPayload

  """Updates the list of user data entries for the authenticated user."""
  updateUserData(input: UpdateUserDataInput!): UpdateUserDataPayload

  """
  Verifies an email address associated with the provided token, if it is valid.
  """
  verifyEmail(input: VerifyEmailInput!): VerifyEmailPayload

  """Withdraw a personal loan"""
  withdrawPersonalLoan(input: WithdrawPersonalLoanInput!): WithdrawPersonalLoanPayload

  """Withdraw a personal loan application"""
  withdrawPersonalLoanApplication(input: WithdrawPersonalLoanApplicationInput!): WithdrawPersonalLoanApplicationPayload
}

input SetAccountConfigurationDividendSettingsInput {
  accountId: ID!
  type: AccountConfigDividendSettingType!
  transferAccountId: ID
  clientMutationId: String
}

input SetAccountConfigurationDividendSettingsForHoldingsInput {
  accountId: ID!
  symbol: String!
  type: AccountConfigDividendSettingType!
  transferAccountId: ID
  clientMutationId: String
}

"""Payload for the setDirectDepositDestination mutation."""
type SetAccountConfigurationDividendSettingsPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: SetAccountConfigurationDividendSettingError
  errorMessage: String
  outcome: SetAccountConfigurationDividendSettingsOutcome
}

type SetAccountConfigurationDividendSettingsForHoldingsPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: SetAccountConfigurationDividendSettingError
  errorMessage: String
  outcome: SetAccountConfigurationDividendSettingsOutcome
}

type SetAccountConfigurationDividendSettingsOutcome {
  configuration: AccountConfiguration!
  successAnalyticsEvent: AppAnalyticsEvent
  successMessage: String
}

enum SetAccountConfigurationDividendSettingError {
  """GENERIC_ERROR"""
  GENERIC_ERROR
}

input CancelAchRelationshipInput {
  """An ID of an account."""
  accountId: ID!

  """An ID of an ACH relationship to cancel."""
  achRelationshipId: ID!
  clientMutationId: String
}

"""Possible input errors for the `CancelAchRelationship` mutation."""
enum CancelAchRelationshipInputErrorEnum {
  """The indicated ACH relationship is not active."""
  ACH_RELATIONSHIP_NOT_ACTIVE

  """The indicated ACH relationship is not found."""
  ACH_RELATIONSHIP_NOT_FOUND

  """The request is rejected for an unknown reason."""
  GENERAL_REJECTION

  """
  The ACH relationship cannot be canceled while there are pending transfers.
  """
  HAS_PENDING_TRANSFERS

  """A valid ACH relationship ID must be provided."""
  INVALID_ACH_RELATIONSHIP_ID

  """A valid investment account ID must be provided."""
  INVALID_INVESTMENT_ACCOUNT_ID

  """The indicated investment account is not found."""
  INVESTMENT_ACCOUNT_NOT_FOUND

  """A valid external account ID must be provided."""
  INVALID_EXTERNAL_ACCOUNT_ID
}

type CancelAchRelationshipPayload {
  """Retrieve the updated account."""
  account: Account
  clientMutationId: String

  """Metadata about the result of executing the mutation."""
  result: CancelAchRelationshipResult!
}

"""
Metadata about the result of executing the `CancelAchRelationship` mutation.
"""
type CancelAchRelationshipResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: CancelAchRelationshipInputErrorEnum
}

input ConfirmAchRelationshipViaDepositsInput {
  """An ID of an account."""
  accountId: ID!

  """An ID of an ACH relationship to confirm."""
  achRelationshipId: ID!
  clientMutationId: String

  """A first deposit amount."""
  depositAmount1: Float!

  """A second deposit amount."""
  depositAmount2: Float!
}

type ConfirmAchRelationshipViaDepositsPayload {
  """Retrieve the updated account."""
  account: Account

  """The confirmed ACH relationship."""
  achRelationship: AchRelationshipViaDeposits

  """The confirmed ACH relationship edge."""
  achRelationshipEdge: AchRelationshipEdge @deprecated(reason: "Use `achRelationship` instead. Will be removed.")
  clientMutationId: String

  """Metadata about the result of executing the mutation."""
  result: ConfirmAchRelationshipViaDepositsResult!
}

"""
Metadata about the result of executing the `ConfirmAchRelationshipViaDeposits` mutation.
"""
type ConfirmAchRelationshipViaDepositsResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: ConfirmAchRelationshipViaDepositsInputErrorEnum
}

"""
Possible input errors for the `ConfirmAchRelationshipViaDeposits` mutation.
"""
enum ConfirmAchRelationshipViaDepositsInputErrorEnum {
  """The indicated ACH relationship is not found."""
  ACH_RELATIONSHIP_NOT_FOUND

  """
  The indicated ACH relationship is not pending micro-deposit confirmation.
  """
  ACH_RELATIONSHIP_NOT_PENDING

  """
  The ACH relationship is not yet ready to confirm deposits. Try again later.
  """
  ACH_RELATIONSHIP_NOT_READY

  """
  The deposit amounts are now expired due to length of time since issue or due to too many failed verification attempts.
  """
  DEPOSITS_EXPIRED

  """The request is rejected for an unknown reason."""
  GENERAL_REJECTION

  """The provided deposit amounts are not correct."""
  INCORRECT_DEPOSIT_AMOUNTS

  """
  The indicated ACH relationship was not created via the micro-deposit process.
  """
  INELIGIBLE_ACH_RELATIONSHIP

  """A valid ACH relationship ID must be provided."""
  INVALID_ACH_RELATIONSHIP_ID

  """A valid investment account ID must be provided."""
  INVALID_INVESTMENT_ACCOUNT_ID

  """The indicated investment account is not found."""
  INVESTMENT_ACCOUNT_NOT_FOUND

  """Micro-deposits may not be confirmed until an account has opened."""
  INVESTMENT_ACCOUNT_NOT_OPEN
}

input CreateAchRelationshipViaDepositsInput {
  """An ID of an account."""
  accountId: ID!

  """A bank account number."""
  bankAccountNumber: BankAccountNumber!

  """A bank account routing number."""
  bankAccountRoutingNumber: BankRoutingNumber!

  """A type of bank account."""
  bankAccountType: ViaDepositsBankAcctTypeEnum!
  clientMutationId: String

  """A nickname for this account"""
  nickname: String!
}

type CreateAchRelationshipViaDepositsPayload {
  """Retrieve the updated account."""
  account: Account

  """The new ACH relationship."""
  achRelationship: AchRelationshipViaDeposits

  """The new ACH relationship edge."""
  achRelationshipEdge: AchRelationshipEdge @deprecated(reason: "Use `achRelationship` instead. Will be removed.")
  clientMutationId: String

  """Metadata about the result of executing the mutation."""
  result: CreateAchRelationshipViaDepositsResult!
}

"""
The type of the bank account with which a relationship is established via deposits.
"""
enum ViaDepositsBankAcctTypeEnum {
  """Checking"""
  CHECKING

  """Savings"""
  SAVINGS
}

"""
Metadata about the result of executing the `CreateAchRelationshipViaDeposits` mutation.
"""
type CreateAchRelationshipViaDepositsResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: CreateAchRelationshipViaDepositsInputErrorEnum
}

"""
Possible input errors for the `CreateAchRelationshipViaDeposits` mutation.
"""
enum CreateAchRelationshipViaDepositsInputErrorEnum {
  """
  The specified investment account does not allow external funding relationships to be configured.
  """
  ACCOUNT_DISALLOWS_EXTERNAL_FUNDING

  """The request is rejected for an unknown reason."""
  GENERAL_REJECTION

  """A valid investment account ID must be provided."""
  INVALID_INVESTMENT_ACCOUNT_ID

  """The indicated investment account is not found."""
  INVESTMENT_ACCOUNT_NOT_FOUND

  """Only one open ACH relationship is allowed at a time."""
  NO_ADDITIONAL_ACH_RELATIONSHIPS

  """The bank identified by the provided routing number is not allowed."""
  UNALLOWED_BANK

  """The provided routing number is unknown."""
  UNKNOWN_ROUTING_NUMBER
}

input CreateAchRelationshipViaLinkInput {
  """An ID of an account."""
  accountId: ID!
  clientMutationId: String

  """
  An ID of an external account. Either `externalAccountId` or `plaidAccountId` must be specified.
  """
  externalAccountId: ID

  """
  The Plaid ID for an external account. Either `externalAccountId` or `plaidAccountId` must be specified.
  """
  plaidAccountId: String
}

type CreateAchRelationshipViaLinkPayload {
  """Retrieve the updated account."""
  account: Account

  """The new ACH relationship."""
  achRelationship: AchRelationshipViaLink

  """The new ACH relationship edge."""
  achRelationshipEdge: AchRelationshipEdge @deprecated(reason: "Use `achRelationship` instead. Will be removed.")
  clientMutationId: String

  """Metadata about the result of executing the mutation."""
  result: CreateAchRelationshipViaLinkResult!
}

"""
Metadata about the result of executing the `CreateAchRelationshipViaLink` mutation.
"""
type CreateAchRelationshipViaLinkResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: CreateAchRelationshipViaLinkInputErrorEnum
}

"""Possible input errors for the `CreateAchRelationshipViaLink` mutation."""
enum CreateAchRelationshipViaLinkInputErrorEnum {
  """
  The specified investment account does not allow external funding relationships to be configured.
  """
  ACCOUNT_DISALLOWS_EXTERNAL_FUNDING

  """The indicated external account is not found."""
  EXTERNAL_ACCOUNT_NOT_FOUND

  """The request is rejected for an unknown reason."""
  GENERAL_REJECTION

  """A valid external account ID must be provided."""
  INVALID_EXTERNAL_ACCOUNT_ID

  """A valid investment account ID must be provided."""
  INVALID_INVESTMENT_ACCOUNT_ID

  """The indicated investment account is not found."""
  INVESTMENT_ACCOUNT_NOT_FOUND

  """Only one open ACH relationship is allowed at a time."""
  NO_ADDITIONAL_ACH_RELATIONSHIPS

  """
  The bank associated with the specified external account is not allowed.
  """
  UNALLOWED_BANK
}

input SubmitCreditCardApplicationInput {
  clientMutationId: String

  """User inputted annual income."""
  annualIncome: Int!

  """The user has attested to the correctness of their submission."""
  userAttestsApplicationData: Boolean!

  """The type of the user's housing."""
  housingType: CreditCardCustomerEmploymentInfoHousingTypeEnum!

  """Monthly housing expenses"""
  monthlyExpenses: Int!

  """
  The signature associated to the Terms and Conditions `RequiredDocumentsBundle` a user must accept when submitting a credit card application.
  """
  termsAndConditionsSignature: String!
}

enum CreditCardCustomerEmploymentInfoHousingTypeEnum {
  """Rent."""
  RENT

  """Own."""
  OWN

  """Other."""
  OTHER
}

type SubmitCreditCardApplicationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SubmitCreditCardApplicationOutcome
  error: SubmitCreditCardApplicationErrorEnum
}

type SubmitCreditCardApplicationOutcome {
  """The application details for the recently submitted application."""
  applicationDetails: CreditCardApplicationDetails!

  """
  The analytics event that should be fired by clients upon successful application submission.
  """
  successAnalyticsEvent: AppAnalyticsEvent
}

enum SubmitCreditCardApplicationErrorEnum {
  """User is not eligible to apply for a credit card."""
  USER_NOT_ELIGIBLE

  """
  User has an application in `REJECTED` status and has not reached the date in which they are eligible to re-apply for a Credit Card.
  """
  REJECTED_APPLICATION_HOLD_PERIOD_NOT_COMPLETE

  """User does not have the credit card eligibilty flag enabled."""
  CREDIT_CARD_NOT_ENABLED_FOR_USER
}

input AcceptCreditCardOfferInput {
  clientMutationId: String

  """The user has attested to reviewing the CHA"""
  userAttestsCha: Boolean!
}

type AcceptCreditCardOfferPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: AcceptCreditCardOfferOutcome
  error: AcceptCreditCardOfferErrorEnum
}

type AcceptCreditCardOfferOutcome {
  """The application details for the recently accepted credit card offer."""
  applicationDetails: CreditCardApplicationDetails!
}

enum AcceptCreditCardOfferErrorEnum {
  """User is not eligible to apply for a credit card."""
  USER_NOT_ELIGIBLE

  """User does not have the credit card eligibilty flag enabled."""
  CREDIT_CARD_NOT_ENABLED_FOR_USER

  """The user does not have any credit card applications."""
  NO_APPLICATIONS_FOR_USER

  """The user does not have an active application."""
  NO_ACTIVE_CREDIT_CARD_APPLICATION_FOR_USER

  """The user does not have an active offer."""
  NO_ACTIVE_CREDIT_CARD_OFFER_FOR_USER

  """General error when submitting the accept offer mutation."""
  GENERAL_ACCEPT_OFFER_ERROR
}

input ContinueCreditCardApplicationAfterUserCreditIsUnfrozenInput {
  clientMutationId: String
}

type ContinueCreditCardApplicationAfterUserCreditIsUnfrozenPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ContinueCreditCardApplicationAfterUserCreditIsUnfrozenOutcome
  error: ContinueCreditCardApplicationAfterUserCreditIsUnfrozenErrorEnum
}

type ContinueCreditCardApplicationAfterUserCreditIsUnfrozenOutcome {
  """
  The application details after the user progresses their application once their credit is unfrozen.
  """
  applicationDetails: CreditCardApplicationDetails!
}

enum ContinueCreditCardApplicationAfterUserCreditIsUnfrozenErrorEnum {
  """User is not eligible to apply for a credit card."""
  USER_NOT_ELIGIBLE

  """User does not have the credit card eligibilty flag enabled."""
  CREDIT_CARD_NOT_ENABLED_FOR_USER

  """User does not have an active credit card application."""
  NO_CREDIT_CARD_APPLICATIONS_FOR_USER

  """The user's active application is not in unfreeze credit status."""
  APPLICATION_NOT_IN_UNFREEZE_CREDIT_BUREAU_STATUS

  """
  General error when trying to advance application after user unfreezes their credit.
  """
  GENERAL_UNFREEZE_CREDIT_ERROR
}

input ActivateCreditCardInput {
  clientMutationId: String

  """Last four digits of the card being verified."""
  creditCardLastFour: String!
}

type ActivateCreditCardPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ActivateCreditCardOutcome
  error: ActivateCreditCardErrorEnum
}

type ActivateCreditCardOutcome {
  """The `CreditCard` type for the recently activated credit card."""
  creditCard: CreditCard
}

enum ActivateCreditCardErrorEnum {
  """User is not eligible to apply for a credit card."""
  USER_NOT_ELIGIBLE

  """User does not have the credit card eligibilty flag enabled."""
  CREDIT_CARD_NOT_ENABLED_FOR_USER

  """User does not have an active credit card account."""
  NO_CREDIT_CARD_ACCOUNT_FOR_USER

  """
  The user's credit card account does not have a credit card issued for it.
  """
  NO_CREDIT_CARD_ISSUED_FOR_ACCOUNT

  """
  The last four digits, if provided to the `activateCreditCard` mutation, do not match the last four of the card issued for the account.
  """
  LAST_FOUR_MISMATCH

  """The credit card has already been activated."""
  CARD_ALREADY_ACTIVATED

  """
  General error when submitting the activate credit card by last four mutation.
  """
  GENERAL_ACTIVATE_CREDIT_CARD_BY_LAST_FOUR_ERROR
}

input SetLockOnCreditCardInput {
  clientMutationId: String

  """The `id` of the `CreditCard` to lock or unlock."""
  creditCardId: ID!

  """
  Specify `true` to make the card locked, or `false` to make it unlocked.
  """
  setLock: Boolean!
}

type SetLockOnCreditCardPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetLockOnCreditCardOutcome
  error: SetLockOnCreditCardErrorEnum
}

type SetLockOnCreditCardOutcome {
  """The updated `CreditCard` type."""
  creditCard: CreditCard!
}

enum SetLockOnCreditCardErrorEnum {
  """User is not eligible to lock or unlock a credit card."""
  USER_NOT_ELIGIBLE

  """User does not have the credit card eligibilty flag enabled."""
  CREDIT_CARD_NOT_ENABLED_FOR_USER

  """General error when submitting the set lock on credit card mutation."""
  GENERAL_LOCK_CREDIT_CARD_ERROR
}

input SetCreditCardWaitlistStatusInput {
  clientMutationId: String

  """The desired enrollment status for the user."""
  desiredEnrollmentStatus: SetCreditCardWaitlistStatusEnum!
}

type SetCreditCardWaitlistStatusPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetCreditCardWaitlistStatusOutcome
  error: SetCreditCardWaitlistStatusErrorEnum
}

enum SetCreditCardWaitlistStatusEnum {
  """Enroll the user in the Credit Card marketing waitlist."""
  ENROLL

  """Unenroll the user in the Credit Card marketing waitlist."""
  UNENROLL
}

enum SetCreditCardWaitlistStatusErrorEnum {
  """User is not eligible to be added into the Credit Card waitlist."""
  USER_NOT_ELIGIBLE

  """
  General error for adding or removing a user from the Credit Card waitlist.
  """
  GENERAL_SET_CREDIT_CARD_WAITLIST_STATUS_ERROR
}

type SetCreditCardWaitlistStatusOutcome {
  """
  The confirmation screen content for after the waitlist signup mutation is sent.
  """
  confirmationContent(phase: CreditCardWaitlistConfirmationContentPhase): CreditCardWaitlistConfirmationContent

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent

  """
  Links the user to the current terms and conditions associated with the Credit Card waitlist.
  """
  waitlistTermsAndConditions: AppLink!
}

input UpdateCreditCardRewardPayoutDestinationInput {
  clientMutationId: String

  """
  The destination transfer participant ID where Credit Card reward payouts will be sent.
  """
  rewardPayoutDestinationId: ID!
}

type UpdateCreditCardRewardPayoutDestinationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: UpdateCreditCardRewardPayoutDestinationOutcome
  error: UpdateCreditCardRewardPayoutDestinationErrorEnum
}

type UpdateCreditCardRewardPayoutDestinationOutcome {
  """
  The ID of the Smart Transfer that was updated with the new destination.
  """
  rewardsPortal: CreditCardRewardsPortalScreen
}

enum UpdateCreditCardRewardPayoutDestinationErrorEnum {
  """CREDIT_CARD_NOT_ENABLED_FOR_USER"""
  CREDIT_CARD_NOT_ENABLED_FOR_USER

  """USER_NOT_ELIGIBLE"""
  USER_NOT_ELIGIBLE

  """GENERAL_UPDATE_CREDIT_CARD_REWARD_PAYOUT_DESTINATION_ERROR"""
  GENERAL_UPDATE_CREDIT_CARD_REWARD_PAYOUT_DESTINATION_ERROR
}

input RequestMobilePushProvisioningCertificatesInput {
  """Client mutation Id"""
  clientMutationId: String

  """User's credit card Id, required for both iOS and Android"""
  cardId: String!

  """Certificates provided by the Deserve SDK, iOS only"""
  certificates: [String]

  """Nonce provided by the Deserve SDK, iOS only"""
  nonce: String

  """Nonce signature provided by the Deserve SDK, iOS only"""
  nonceSignature: String

  """walletId provided by the Deserve SDK, Android only"""
  walletId: String

  """Device Id provided by the Deserve SDK, Android only"""
  deviceId: String
}

type RequestMobilePushProvisioningCertificatesPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: RequestMobilePushProvisioningCertificatesOutcome
  error: RequestMobilePushProvisioningCertificatesErrorEnum
}

enum RequestMobilePushProvisioningCertificatesErrorEnum {
  """User is not eligible for push provisioning"""
  USER_NOT_ELIGIBLE

  """Data received is invalid or incomplete"""
  INVALID_INPUT

  """General error with push provisioning flow"""
  GENERAL_PUSH_PROVISIONING_ERROR
}

type RequestMobilePushProvisioningCertificatesOutcome {
  """
  Stringified JSON // iOS should contain: encryptedPassData (as encryptedPayload), activationData, ephemeralPublicKey // Android should contain: opc, userAddress object
  """
  pushProvisioningCredentials: String!
}

"""Input for the `linkFundingSources` mutation."""
input LinkFundingSourcesInput {
  clientMutationId: String

  """The `public_token` generated by Plaid Link."""
  plaidLinkPublicToken: String!
}

"""Payload for the `linkFundingSources` mutation."""
type LinkFundingSourcesPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: LinkFundingSourcesOutcome
  error: LinkFundingSourcesErrorEnum
}

"""Outcome for the `linkFundingSources` mutation."""
type LinkFundingSourcesOutcome {
  """The funding sources that were linked with the supplied token."""
  linkedFundingSources: [FundingSourceAccount]
}

"""Errors for the `linkFundingSources` mutation."""
enum LinkFundingSourcesErrorEnum {
  """The supplied Plaid token is blocked."""
  BLOCKED_LINK_TOKEN
}

"""Input for the `completePlaidIncomeVerification` mutation."""
input CompletePlaidIncomeVerificationInput {
  clientMutationId: String
}

"""Payload for the `completePlaidIncomeVerification` mutation."""
type CompletePlaidIncomeVerificationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CompletePlaidIncomeVerificationOutcome
  error: CompletePlaidIncomeVerificationErrorEnum
}

"""Outcome for the `completePlaidIncomeVerification` mutation."""
type CompletePlaidIncomeVerificationOutcome {
  """
  Whether or not the Plaid income verification flow was successfully completed.
  """
  verificationSubmitted: Boolean
}

"""Errors for the `completePlaidIncomeVerification` mutation."""
enum CompletePlaidIncomeVerificationErrorEnum {
  """
  The user does not have a link token generated, the generateIncomeLinkToken mutation was not called prior.
  """
  NO_USER_TOKEN
}

"""Input for the `createAchRelationshipViaFundingSource` mutation."""
input CreateAchRelationshipViaFundingSourceInput {
  clientMutationId: String

  """Account id."""
  accountId: ID!

  """Funding source id."""
  fundingSourceId: ID!
}

"""Payload for the `createAchRelationshipViaFundingSource` mutation."""
type CreateAchRelationshipViaFundingSourcePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CreateAchRelationshipViaFundingSourceOutcome
  error: CreateAchRelationshipViaFundingSourceErrorEnum
}

"""Outcome for the `createAchRelationshipViaFundingSource` mutation."""
type CreateAchRelationshipViaFundingSourceOutcome {
  """ACH relationship id."""
  achRelationshipId: String

  """Ach Relationship."""
  achRelationship: AchRelationship
}

"""Errors for the `createAchRelationshipViaFundingSource` mutation."""
enum CreateAchRelationshipViaFundingSourceErrorEnum {
  """Invalid account id."""
  INVALID_ACCOUNT_ID

  """Invalid funding source id."""
  INVALID_FUNDING_SOURCE_ID

  """Account not found."""
  ACCOUNT_NOT_FOUND

  """No additional ACH relationships."""
  NO_ADDITIONAL_ACH_RELATIONSHIPS

  """Unallowed bank."""
  UNALLOWED_BANK
}

"""Input for the `confirmManualPlaidMicroDesposits` mutation."""
input ConfirmManualPlaidMicroDepositsInput {
  clientMutationId: String
  plaidPublicToken: String!
  fundingSourceId: String!
}

"""Payload for the `confirmManualPlaidMicroDesposits` mutation."""
type ConfirmManualPlaidMicroDepositsPayload {
  clientMutationId: String
  didSucceed: Boolean!
}

enum ConfirmManualPlaidMicroDepositsErrorEnum {
  """Manual Plaid micro deposit confirmation failed."""
  CONFIRMATION_FAILED
}

"""Input for the `generatePlaidIncomeLinkToken` mutation."""
input GeneratePlaidIncomeLinkTokenInput {
  clientMutationId: String

  """
  Boolean dictates if users will be allowed to add multiple income connections. Do not include a funding source id if this value is set to true.
  """
  incomeEnableMultipleItems: Boolean!

  """
  Funding source id. Include to generate a token for a pre-auth Plaid Income Verification single item flow. When included, incomeEnableMultipleItems should be false.
  """
  fundingSourceId: String
}

"""Payload for the `generatePlaidIncomeLinkToken` mutation."""
type GeneratePlaidIncomeLinkTokenPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: GeneratePlaidIncomeLinkTokenOutcome
}

"""Outcome for the `generatePlaidIncomeLinkToken` mutation."""
type GeneratePlaidIncomeLinkTokenOutcome {
  """Token used to connect with Plaid for Plaid Income Verification."""
  plaidIncomeLinkToken: String!
}

input LinkAndCreateAchRelationshipInput {
  """The ID of the account for the external accounts to be linked with."""
  accountId: ID!
  clientMutationId: String

  """
  The Plaid identifier for an external account to create an ACH relationship with.
  """
  plaidAccountId: String!

  """The `public_token` generated by Plaid Link."""
  plaidLinkPublicToken: String!
}

type LinkAndCreateAchRelationshipPayload {
  """Retrieve the updated account."""
  account: Account

  """The new ACH relationship."""
  achRelationship: AchRelationshipViaLink

  """The new ACH relationship edge."""
  achRelationshipEdge: AchRelationshipEdge @deprecated(reason: "Use `achRelationship` instead. Will be removed.")
  clientMutationId: String

  """The new external account edges."""
  externalAccountEdges: [ExternalAccountEdge!] @deprecated(reason: "Not in use. Will be removed.")

  """Metadata about the result of executing the mutation."""
  result: LinkAndCreateAchRelationshipResult!
}

"""
Metadata about the result of executing the `LinkAndCreateAchRelationship` mutation.
"""
type LinkAndCreateAchRelationshipResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: LinkAndCreateAchRelationshipInputErrorEnum
}

"""Possible input errors for the `LinkAndCreateAchRelationship` mutation."""
enum LinkAndCreateAchRelationshipInputErrorEnum {
  """
  The specified investment account does not allow external funding relationships to be configured.
  """
  ACCOUNT_DISALLOWS_EXTERNAL_FUNDING

  """The request is rejected for an unknown reason."""
  GENERAL_REJECTION

  """A valid investment account ID must be provided."""
  INVALID_INVESTMENT_ACCOUNT_ID

  """The indicated investment account was not found."""
  INVESTMENT_ACCOUNT_NOT_FOUND

  """The supplied Plaid token is forbidden."""
  LINK_FORBIDDEN

  """Only one open ACH relationship is allowed at a time."""
  NO_ADDITIONAL_ACH_RELATIONSHIPS

  """
  The linking operation was interrupted by an unexpected error, and can be retried.
  """
  TRANSIENT_LINK_FAILURE

  """
  The bank associated with the specified Plaid Link token is not allowed.
  """
  UNALLOWED_BANK

  """The provided link inputs fail due to an unknown reason."""
  UNKNOWN_LINK_FAILURE
}

input ReissueDepositsForAchRelationshipInput {
  """An ID of an account."""
  accountId: ID!

  """An ID of an ACH relationship for which to reissue deposits."""
  achRelationshipId: ID!
  clientMutationId: String
}

type ReissueDepositsForAchRelationshipPayload {
  """Retrieve the updated account."""
  account: Account

  """The ACH relationship for which deposits were reissued."""
  achRelationship: AchRelationshipViaDeposits

  """The ACH relationship edge for which deposits were reissued."""
  achRelationshipEdge: AchRelationshipEdge @deprecated(reason: "Use `achRelationship` instead. Will be removed.")
  clientMutationId: String

  """Metadata about the result of executing the mutation."""
  result: ReissueDepositsForAchRelationshipResult!
}

"""
Metadata about the result of executing the `ReissueDepositsForAchRelationship` mutation.
"""
type ReissueDepositsForAchRelationshipResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: ReissueDepositsForAchRelationshipInputErrorEnum
}

"""
Possible input errors for the `ReissueDepositsForAchRelationship` mutation.
"""
enum ReissueDepositsForAchRelationshipInputErrorEnum {
  """The indicated ACH relationship is not found."""
  ACH_RELATIONSHIP_NOT_FOUND

  """
  The indicated ACH relationship is not pending micro-deposit confirmation.
  """
  ACH_RELATIONSHIP_NOT_PENDING

  """
  The ACH relationship is not yet ready to request reiussing deposits. Try again later.
  """
  ACH_RELATIONSHIP_NOT_READY

  """The request is rejected for an unknown reason."""
  GENERAL_REJECTION

  """The indicated ACH relationship was not initiated via deposits."""
  INELIGIBLE_ACH_RELATIONSHIP

  """A valid ACH relationship ID must be provided."""
  INVALID_ACH_RELATIONSHIP_ID

  """A valid investment account ID must be provided."""
  INVALID_INVESTMENT_ACCOUNT_ID

  """The indicated investment account is not found."""
  INVESTMENT_ACCOUNT_NOT_FOUND

  """Micro-deposits may not be reissued until an account has opened."""
  INVESTMENT_ACCOUNT_NOT_OPEN

  """THe maximum number of micro-deposit reissuances has been exceeded."""
  MAX_DEPOSIT_REISSUES_EXCEEDED

  """
  The deposits cannot be reissued becuase there are still unexpired existing deposits.
  """
  UNEXPIRED_EXISTING_DEPOSITS
}

"""Input for the `openHighYieldSavingsAccount` mutation."""
input OpenHighYieldSavingsAccountInput {
  """Client mutation id"""
  clientMutationId: String

  """
  The type of savings account (i.e. IndividualSave, JointSaveInitiate, JointSaveCoOwner, JointCashInitiate, JointCashCoOwner)
  """
  accountType: String

  """A custom name for the account"""
  accountName: String

  """Answers to the customer due diligence questions"""
  customerDueDiligence: [SavingsCustomerDueDiligenceResponse!]

  """Answers to the invest due diligence questions"""
  investDueDiligence: InvestDueDiligence

  """
  The signature associated to the Terms and Conditions `RequiredDocumentsBundle` a user must accept when opening a savings account.
  """
  termsAndConditionsSignature: String!

  """Information about the co-owner(s) of the account"""
  coOwners: [SavingsCoOwnerInformation!]

  """
  The node ID of the savings account invitation, required for a co-owner to accept a shared account invitation
  """
  accountId: ID

  """User's fully paid lending enrollment decision"""
  fplStatus: Boolean
}

input SavingsCustomerDueDiligenceResponse {
  """The ID for this Savings due diligence question"""
  questionId: String!

  """Selected answer(s) for this Savings due diligence question"""
  selectedAnswers: [String!]
}

input InvestDueDiligence {
  """The trusted contact of the account holder"""
  trustedContact: TrustedContactInput
}

input SavingsCoOwnerInformation {
  """The first name of the co-owner"""
  firstName: String!

  """The lastName of the co-owner"""
  lastName: String!

  """The email address of the co-owner"""
  email: String!

  """The phone number of the co-owner"""
  phoneNumber: String!
}

"""Payload for the `openHighYieldSavingsAccount` mutation"""
type OpenHighYieldSavingsAccountMutationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: OpenHighYieldSavingsAccountOutcome
  error: OpenHighYieldSavingsAccountErrorEnum
}

"""Errors for the `openHighYieldSavingsAccount` mutation"""
enum OpenHighYieldSavingsAccountErrorEnum {
  BLOCKED_BY_PENDING_TRANSFER
  USER_NOT_ELIGIBLE
  UNVERIFIED_EMAIL
  USER_REJECTED
  TOO_MANY_INVITES
}

"""Outcome for the `openHighYieldSavingsAccount` mutation"""
type OpenHighYieldSavingsAccountOutcome {
  """The account id for the B2 savings account"""
  accountId: String

  """The account opened by the mutation"""
  account: SavingsAccount

  """
  A boolean indicating whether the user has external funding source linked to their Savings Account
  """
  hasExternalFundingSource: Boolean!

  """
  A boolean indicating whether the user has available funding sources they can connect to their new Savings Account
  """
  hasAvailableFundingSources: Boolean!

  """
  The initial funding source for the Savings account, this should populate the `from` field for the initial deposit flow
  """
  initialTransferParticipant: TransferParticipant

  """
  The Savings account transfer participant, this should populate the `to` field for the initial deposit flow
  """
  savingsTransferParticipant: TransferParticipant

  """
  The analytics event for when the mutation successfully creates a savings account
  """
  successAnalyticsEvent: AppAnalyticsEvent
}

input SetDirectDepositDestinationInput {
  """
  Node id - represents the internal account to be set as the direct deposit destination.
  """
  accountId: ID!
  clientMutationId: String
}

"""Payload for the setDirectDepositDestination mutation."""
type SetDirectDepositDestinationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: SetDirectDepositDestinationErrorEnum
  outcome: SetDirectDepositDestinationOutcome
}

enum SetDirectDepositDestinationErrorEnum {
  """GENERIC_ERROR"""
  GENERIC_ERROR
}

type SetDirectDepositDestinationOutcome {
  """success message for setting direct deposit destination"""
  successMessage: String
}

input CreateFundingSourceRelationshipInput {
  clientMutationId: String

  """Funding source node id - represents the external account."""
  fundingSourceId: ID!

  """
  Account node id - represents the internal account to be linked. If none provided, BE will handle connecting to the appropriate account.
  """
  accountId: ID
}

"""Payload for the createFundingSourceRelationship mutation."""
type CreateFundingSourceRelationshipPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: CreateFundingSourceRelationshipErrorEnum
  outcome: CreateFundingSourceRelationshipOutcome
}

enum CreateFundingSourceRelationshipErrorEnum {
  """INVALID_TRANSFER_PARTICIPANT"""
  INVALID_TRANSFER_PARTICIPANT

  """INVALID_FUNDING_SOURCE"""
  INVALID_FUNDING_SOURCE

  """ACCOUNT_SWITCH_LIMIT_EXCEEDED"""
  ACCOUNT_SWITCH_LIMIT_EXCEEDED

  """BLOCKED_BY_PENDING_TRANSFER"""
  BLOCKED_BY_PENDING_TRANSFER

  """BLOCKED_ROUTING_NUMBER"""
  BLOCKED_ROUTING_NUMBER

  """UNABLE_TO_CHANGE_LINKED_BANK"""
  UNABLE_TO_CHANGE_LINKED_BANK
}

"""Outcome for the `createFundingSourceRelationship` mutation"""
type CreateFundingSourceRelationshipOutcome {
  """
  The M1 product transfer participant - this can be null if due to product specific logic resolving the transfer participant.
  """
  internalTransferParticipant: TransferParticipant

  """
  The funding source transfer participant - this represents the external account.
  """
  fundingSourceTransferParticipant: TransferParticipant
}

"""Input for the `createTransferInstance` mutation."""
input CreateTransferInstanceInput {
  clientMutationId: String

  """
  The participant to transfer money from. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  fromParticipantId: ID!

  """
  The participant to transfer money to. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  toParticipantId: ID!

  """The dollar amount to transfer."""
  amount: Float!

  """
  When true, and applicable given the from participant, the transfer instance
  will trigger a total liquidation as the source of funds to transfer.
  """
  isLiquidation: Boolean

  """
  When true, the IRA deposit is a rollover, and contribution limits are not applied. Deposits that put a user over their contribution limit will be rejected unless this rollover flag is true.
  """
  isIraRollover: Boolean

  """
  The contribution year selection that must be specified when the destination
  participant is an Invest IRA. Ignored otherwise. If `PRIOR_YEAR` is specified
  when that option is not available, the contribution is automatically made for
  the current year.
  """
  iraContributionYear: IraContributionYearEnum

  """
  The distribution reason which must be specified when the source participant is
  an Invest IRA. Ignored otherwise.
  """
  iraDistributionReason: IraDistributionReasonEnum

  """
  The amount of Net Income Attributable being reported by the user withdrawing an
  overcontribution.
  """
  niaAmount: Float

  """
  The uuid of the transfer sent to back end to prevent duplicate transfers.
  """
  idempotencyKey: String

  """Create transfer instance scenario."""
  scenario: TransferScenarioTypeEnum
}

"""Payload for the `createTransferInstance` mutation."""
type CreateTransferInstancePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CreateTransferInstanceOutcome
  error: CreateTransferInstanceErrorEnum
}

"""
Container type for handling auto-invest implications on the destination account for this particular transfer
"""
type ToCreateTransferInstancePayloadAutoInvestImplications {
  """
  The threshold dollar amount over which any cash will be automatically invested
  into destination account. When non-null, value will be greater than or equal to
  zero. When null, the max cash threshold is disabled.
  """
  maxCashThresholdOnDestinationAccount: Int

  """
  The number of pending buy trades estimated as a result of the transfer. If null, estimated trades were unable to be calculated.
  """
  estimatedBuyTradesDestinationAmount: Int
}

"""Outcome for the `createTransferInstance` mutation."""
type CreateTransferInstanceOutcome {
  """The newly-created transfer instance."""
  instance: TransferInstance

  """
  When the source participant is an Invest account, estimated trading
  information for that account, if applicable and available.
  """
  fromInvestEstimatedTrading: EstimatedTrading

  """
  When the destination participant is an Invest account, estimated trading
  information for that account, if applicable and available.
  """
  toInvestEstimatedTrading: EstimatedTrading

  """Details of the transfer instance created"""
  details: Details

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent

  """
  Container type for handling auto-invest data for this particular transfer
  """
  autoInvestImplications: ToCreateTransferInstancePayloadAutoInvestImplications
}

type Details {
  """The title for the confirmation page for the transfer instance"""
  title: String!

  """The illustration for the confirmation page for the transfer instance"""
  illustration: AppImage

  """Transfer instance created description"""
  description: String

  """Transfer instance link to details"""
  detailsLink: AppLink
}

"""Errors for the `createTransferInstance` mutation."""
enum CreateTransferInstanceErrorEnum {
  """The from/to participant configuration is invalid."""
  PARTICIPANTS_INVALID

  """Either or both participants are currently frozen."""
  PARTICIPANTS_FROZEN

  """The daily transfer limit between the from/to participants is exceeded."""
  PARTICIPANTS_DAILY_LIMIT_EXCEEDED

  """Amount exceeds the IRA contribution limit."""
  AMOUNT_EXCEEDS_IRA_CONTRIBUTION_LIMIT

  """Amount is less than the transfer minimum for the particpants."""
  AMOUNT_LESS_THAN_TRANSFER_MINIMUM

  """Amount is greater than the transfer maximum for the particpants."""
  AMOUNT_GREATER_THAN_TRANSFER_MAXIMUM

  """Amount is greater than the source participant's available balance."""
  AMOUNT_GREATER_THAN_AVAILABLE_BALANCE

  """Amount is less than the initial deposit minimum to an Invest account."""
  AMOUNT_LESS_THAN_INVEST_INITIAL_DEPOSIT

  """Amount requires first paying back credited margin."""
  AMOUNT_REQUIRES_MARGIN_PAY_BACK

  """Amount requires a total liqiudation. `isLiquidation` must be true."""
  AMOUNT_REQUIRES_INVEST_LIQUIDATION

  """The `iraContributionYear` must be specified."""
  IRA_CONTRIBUTION_YEAR_REQUIRED

  """
  Contributions to the Invest IRA are disallowed due to account owner age.
  """
  IRA_CONTRIBUTION_DISALLOWED_BY_AGE

  """The `iraDistributionReason` must be specified."""
  IRA_DISTRIBUTION_REASON_REQUIRED

  """The `iraDistributionReason` must be `PREMATURE`."""
  IRA_DISTRIBUTION_REASON_MUST_BE_PREMATURE

  """The `iraDistributionReason` is not valid."""
  INVALID_IRA_DISTRIBUTION_REASON

  """
  The amount being withdrawn would decrease the accounts balance below the minimum threshold required for margin balance.
  """
  INSUFFICIENT_MARGIN_BALANCE

  """Maximum simultaneous transfers for the participants has been reached."""
  TOO_MANY_TRANSFERS

  """User initiated a transfer with a previously used idempotency key."""
  DUPLICATE_AUTOMATED_TRANSFER
}

"""Input for the `createIraTransfer` mutation."""
input CreateIraTransferInput {
  clientMutationId: String

  """
  The participant to transfer money from. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  fromParticipantId: ID!

  """
  The participant to transfer money to. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  toParticipantId: ID!

  """
  When true, and applicable given the from participant, the transfer instance
  will trigger a total liquidation as the source of funds to transfer.
  """
  isLiquidation: Boolean

  """
  When true, the IRA deposit is a rollover, and contribution limits are not applied. Deposits that put a user over their contribution limit will be rejected unless this rollover flag is true.
  """
  isIraRollover: Boolean

  """
  The contribution year selection that must be specified when the destination
  participant is an Invest IRA. Ignored otherwise. If `PRIOR_YEAR` is specified
  when that option is not available, the contribution is automatically made for
  the current year.
  """
  iraContributionYear: IraContributionYearEnum

  """
  The distribution reason which must be specified when the source participant is
  an Invest IRA. Ignored otherwise.
  """
  iraDistributionReason: IraDistributionReasonEnum

  """
  The amount of Net Income Attributable being reported by the user withdrawing an
  overcontribution.
  """
  niaAmount: Float

  """
  The dollar amount to transfer - The total amount of the transfer including any net income attributable.
  """
  amount: Float!

  """
  The amount (in dollars) of funds withheld from an IRA distribution for federal taxes
  """
  federalWithholdingAmount: Float

  """
  The amount (in dollars) of funds withheld from an IRA distribution for state taxes
  """
  stateWithholdingAmount: Float

  """
  The uuid of the transfer sent to back end to prevent duplicate transfers.
  """
  idempotencyKey: String!

  """IRA transfer scenario."""
  scenario: TransferScenarioTypeEnum
}

"""Errors for the `createIraTransfer` mutation."""
enum CreateIraTransferErrorEnum {
  """The from/to participant configuration is invalid."""
  PARTICIPANTS_INVALID

  """Either or both participants are currently frozen."""
  PARTICIPANTS_FROZEN

  """The daily transfer limit between the from/to participants is exceeded."""
  PARTICIPANTS_DAILY_LIMIT_EXCEEDED

  """Amount exceeds the IRA contribution limit."""
  AMOUNT_EXCEEDS_IRA_CONTRIBUTION_LIMIT

  """Amount is less than the transfer minimum for the particpants."""
  AMOUNT_LESS_THAN_TRANSFER_MINIMUM

  """Amount is greater than the transfer maximum for the particpants."""
  AMOUNT_GREATER_THAN_TRANSFER_MAXIMUM

  """Amount is greater than the source participant's available balance."""
  AMOUNT_GREATER_THAN_AVAILABLE_BALANCE

  """Amount is less than the initial deposit minimum to an Invest account."""
  AMOUNT_LESS_THAN_INVEST_INITIAL_DEPOSIT

  """Amount requires first paying back credited margin."""
  AMOUNT_REQUIRES_MARGIN_PAY_BACK

  """Amount requires a total liquidation. `isLiquidation` must be true."""
  AMOUNT_REQUIRES_INVEST_LIQUIDATION

  """The `iraContributionYear` must be specified."""
  IRA_CONTRIBUTION_YEAR_REQUIRED

  """
  Contributions to the Invest IRA are disallowed due to account owner age.
  """
  IRA_CONTRIBUTION_DISALLOWED_BY_AGE

  """The `iraDistributionReason` must be specified."""
  IRA_DISTRIBUTION_REASON_REQUIRED

  """The `iraDistributionReason` must be `PREMATURE`."""
  IRA_DISTRIBUTION_REASON_MUST_BE_PREMATURE

  """The `iraDistributionReason` is not valid."""
  INVALID_IRA_DISTRIBUTION_REASON

  """
  The amount being withdrawn would decrease the accounts balance below the minimum threshold required for margin balance.
  """
  INSUFFICIENT_MARGIN_BALANCE

  """Maximum simultaneous transfers for the participants has been reached."""
  TOO_MANY_TRANSFERS

  """User initiated a transfer with a previously used idempotency key."""
  DUPLICATE_AUTOMATED_TRANSFER

  """
  User initiated a transfer where the state withholding, federal withholding,
  or both exceeded 100% of the transfer amount.
  """
  IRA_WITHHOLDING_PERCENTAGE_CANNOT_EXCEED_100

  """
  User initiated a transfer for a state with MANDATORY withholding
  requirements, and one of those requirements was unmet.
  """
  IRA_WITHHOLDING_MANDATORY_REQUIREMENTS_UNMET

  """
  User initiated a transfer for a state with MANDATORY_OPT_OUT withholding
  requirements, and one of those requirements was unmet.
  """
  IRA_WITHHOLDING_MANDATORY_OPT_OUT_REQUIREMENTS_UNMET

  """
  User initiated a transfer for a state with VOLUNTARY withholding
  requirements, and one of those requirements was unmet.
  """
  IRA_WITHHOLDING_VOLUNTARY_REQUIREMENTS_UNMET

  """
  User initiated a transfer for a state with WITHHOLDING_MATCH
  requirements, and the federal withholding did not match the state withholding
  """
  IRA_WITHHOLDING_MATCH_FEDERAL_REQUIREMENT_UNMET

  """
  User initiated a transfer for a state with WITHHOLDING_MATCH
  requirements, and the state amount specified was less than the minimum, and greater than zero.
  """
  IRA_WITHHOLDING_MATCH_STATE_REQUIREMENT_UNMET

  """
  User initiated a transfer for a state with WITHHOLDING_MAY_NOT_BE_ELECTED
  requirements, and one of those requirements was unmet.
  """
  IRA_WITHHOLDING_NOT_ALLOWED_REQUIREMENTS_UNMET

  """
  User initiated a transfer for a state that failed withholding validation.
  Note, this is a generic error if none of the above are thrown.
  """
  IRA_WITHHOLDING_VALIDATION_ERROR

  """
  User initiated a transfer for a state with an unknown withholding requirement
  type. Please consult the IraStateWithholdingRequirementEnum in the broker
  service client for more details.
  """
  IRA_WITHHOLDING_REQUIREMENT_NOT_FOUND
  IRA_ACCOUNT_NOT_FOUND

  """Account does not have enough funds to recharacterize for a given year"""
  NOT_ENOUGH_FUNDS_TO_RECHARACTERIZE
}

"""Result for the `createIraTransfer` mutation."""
type CreateIraTransferResult {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CreateTransferInstanceOutcome
  error: CreateIraTransferErrorEnum
  errorMessage: String
}

"""Input for the `setScheduledTransferRule` mutation."""
input SetScheduledTransferRuleInput {
  clientMutationId: String

  """
  Specify a `ScheduledTransferRule` ID to update an existing rule. Otherwise, a
  new scheduled transfer rule is created.
  """
  scheduledTransferRuleId: ID

  """
  The participant to transfer money from. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  fromParticipantId: ID!

  """
  The participant to transfer money to. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  toParticipantId: ID!

  """The dollar amount that should be transfered."""
  amount: Float!

  """
  The contribution year selection that must be specified when the destination
  participant is an Invest IRA. Ignored otherwise. If `PRIOR_YEAR` is specified
  when that option is not available, the contribution is automatically made for
  the current year.
  """
  iraContributionYear: IraContributionYearEnum

  """
  The distribution reason which must be specified when the source participant is
  an Invest IRA. Ignored otherwise.
  """
  iraDistributionReason: IraDistributionReasonEnum

  """The desired transfer schedule."""
  schedule: RecurrenceScheduleInput!

  """Scheduled transfer rule scenario."""
  scenario: TransferScenarioTypeEnum
}

"""A recurrence schedule input. Exactly one field must be non-null."""
input RecurrenceScheduleInput {
  """A monthly schedule. Exactly one field must be non-null."""
  monthly: MonthlyScheduleInput

  """A week-of-month schedule. Exactly one field must be non-null."""
  weekOfMonth: WeekOfMonthScheduleInput

  """A biweekly schedule. Exactly one field must be non-null."""
  biweekly: BiweeklyScheduleInput

  """A weekly schedule. Exactly one field must be non-null."""
  weekly: WeeklyScheduleInput
}

"""Represents a repeating monthly schedule."""
input MonthlyScheduleInput {
  """The day of the month."""
  dayOfMonth: MonthlyScheduleDateEnum

  """
  Credit card specific AutoPay payment values (use autoPayPaymentValue instead).
  """
  creditCardPaymentValue: CreditCardPaymentValueEnum

  """Payment values for creating an AutoPay instance."""
  autoPayPaymentValue: AutoPayPaymentValueEnum
}

"""Represents a repeating week-of-month schedule."""
input WeekOfMonthScheduleInput {
  """The week of the month."""
  weekOfMonth: WeekOfMonthScheduleWeekEnum!

  """The day of the week."""
  dayOfWeek: WeeklyScheduleDayEnum!
}

"""A biweekly schedule input."""
input BiweeklyScheduleInput {
  """The day of the week."""
  dayOfWeek: WeeklyScheduleDayEnum!

  """True if the schedule is for even weeks, false for odd weeks."""
  isEvenWeeks: Boolean!
}

"""Represents a repeating weekly schedule."""
input WeeklyScheduleInput {
  """The day of the week."""
  dayOfWeek: WeeklyScheduleDayEnum!
}

"""Payload for the `setScheduledTransferRule` mutation."""
type SetScheduledTransferRulePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetScheduledTransferRuleOutcome
  error: SetScheduledTransferRuleErrorEnum
}

"""Outcome for the `setScheduledTransferRule` mutation."""
type SetScheduledTransferRuleOutcome {
  """The newly-created or now-updated scheduled transfer rule."""
  rule: ScheduledTransferRule

  """Details of the transfer schedule created"""
  details: Details

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Errors for the `setScheduledTransferRule` mutation."""
enum SetScheduledTransferRuleErrorEnum {
  """The from/to participant configuration is invalid."""
  PARTICIPANTS_INVALID

  """Amount is less than the transfer minimum for the particpants."""
  AMOUNT_LESS_THAN_TRANSFER_MINIMUM

  """Amount is greater than the transfer maximum for the particpants."""
  AMOUNT_GREATER_THAN_TRANSFER_MAXIMUM

  """
  Setting a schedule for this amount first requires that a minimum initial
  deposit be created.
  """
  AMOUNT_REQUIRES_INVEST_INITIAL_DEPOSIT

  """The `iraContributionYear` must be specified."""
  IRA_CONTRIBUTION_YEAR_REQUIRED

  """
  Contributions to the Invest IRA are disallowed due to account owner age.
  """
  IRA_CONTRIBUTION_DISALLOWED_BY_AGE

  """The `iraDistributionReason` must be specified."""
  IRA_DISTRIBUTION_REASON_REQUIRED

  """The `iraDistributionReason` must be `PREMATURE`."""
  IRA_DISTRIBUTION_REASON_MUST_BE_PREMATURE

  """The `iraDistributionReason` is not valid."""
  INVALID_IRA_DISTRIBUTION_REASON

  """The rule cannot be set because it conflicts with an existing rule."""
  CONFLICTS_WITH_EXISTING_RULE

  """There are too many scheduled transfer rules."""
  TOO_MANY_SCHEDULED_TRANSFER_RULES
}

input UpdatePieTreeInput {
  clientMutationId: String

  """
  An optional flag, to be included when creating or updating a Crypto pie.
  """
  isCrypto: Boolean

  """
  An optional label for the pie at the root of the tree. If another pie is already has the label, it will be replaced.
  """
  label: PieLabelEnum

  """The serialized pie tree."""
  serializedTree: String!

  """
  When true, it skips the waitForEstimation check.  This is generally used when adding a shared pie.  Default is false
  """
  skipTradeEstimation: Boolean = false
}

"""A pie label."""
enum PieLabelEnum {
  """Shared Pie"""
  SHARED_PIE
}

type UpdatePieTreePayload {
  clientMutationId: String

  """The updated or created pie node at the root of the tree."""
  pie: UserPie

  """Metadata about the result of executing the mutation."""
  result: UpdatePieTreeResult!

  """Retrieve details for the current user."""
  viewer: Viewer
}

"""Metadata about the result of executing the `UpdatePieTree` mutation."""
type UpdatePieTreeResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: UpdatePieTreeInputErrorEnum
}

"""Possible input errors for the `UpdatePieTree` mutation."""
enum UpdatePieTreeInputErrorEnum {
  """
  The pie tree invokes more than the maximum number of create and update edit operations.
  """
  EXCEEDS_MAX_EDIT_OPS

  """
  The number of existing user pies, plus the number of new pies created by the pie tree, exceeds the maximum user pie limit.
  """
  EXCEEDS_MAX_USER_PIES

  """
  Completing the edit operations necessary to manifest the provided tree will cause a pie tree to exist that excees the maximum number of allowed slices.
  """
  EXCEEDS_PIE_TREE_MAX_SLICES

  """
  Each slice percentage must be greater than 0% and less than or equal to 100%.
  """
  INVALID_PERCENTAGE

  """A provided pie description is not valid."""
  INVALID_PIE_DESCRIPTION

  """An invalid pie ID was provided."""
  INVALID_PIE_ID

  """A provided pie name is not valid."""
  INVALID_PIE_NAME

  """A valid serialized pie tree must be provided."""
  INVALID_PIE_TREE

  """
  Each slice must specify its composition with a valid ID to a sliceable.
  """
  INVALID_SLICEABLE_ID

  """The number of slices specified must be between 1 and 100, inclusive."""
  INVALID_SLICE_COUNT

  """Total slice percentage must equal 100%."""
  INVALID_TOTAL_PERCENTAGE

  """Multiple slices may not point to the same sliceable."""
  NO_DUPLICATE_SLICES

  """No slice may point to the same pie it belongs to, or any ancestor pie."""
  NO_SLICE_SELF_REFERENCE

  """An indicated pie is not editable."""
  PIE_NOT_EDITABLE

  """An indicated pie is not found."""
  PIE_NOT_FOUND

  """One or more of the sliceables is not active."""
  SLICEABLE_NOT_ACTIVE

  """The ID of one or more of the sliceables is not found."""
  SLICEABLE_NOT_FOUND
}

type Account implements ListableAccount & TransferParticipant & Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """The account category."""
  accountCategory: AccountCategoryEnum!

  """The account configuration"""
  configuration: AccountConfiguration

  """Legacy signal for if an account is marginable."""
  canBorrow: Boolean @deprecated(reason: "Use BorrowAccount instead.")

  """The name of the account."""
  name: String!

  """A descriptor for the account, for help identifying in a list."""
  descriptor: String

  """The account origination"""
  originator: AccountOriginatorEnum

  """The registration type of the account."""
  registration: AccountRegistrationEnum!

  """The current status for the account."""
  status: AccountStatusEnum!

  """True if the account is active: either NEW or OPENED status."""
  isActive: Boolean!

  """True if the account is rejected."""
  isRejected: Boolean!

  """The document upload content and requirements"""
  documentUpload: DocumentUpload

  """True when trading is paused for the account for some reason."""
  isTradingPaused: Boolean

  """True when trading is paused because of incoming ACAT"""
  isTradingPausedWithAcat: Boolean

  """
  True when the account is a Custodial Account and the beneficiary has reached the age of majority.
  """
  hasBeneficiaryReachedAgeOfMaturity: Boolean

  """The trading window preference of the account."""
  preferredTradeWindow: PreferredTradeWindowEnum

  """The feature flag for preferredTradeWindow."""
  hasPreferredTradeWindowAccess: Boolean

  """The current trading status of the account."""
  trading: AccountTradingStatus

  """If trading for the account is paused, information about the pause."""
  tradingPause: AccountTradingPause

  """A nickname for the account."""
  nickname: String! @deprecated(reason: "Use `name` instead.")

  """The account number."""
  number: String!

  """True if the account is a crypto account, false otherwise."""
  isCryptoAccount: Boolean

  """
  True if the account is considered a custodial account, false otherwise.
  """
  isCustodialAccount: Boolean

  """True if the account is current direct deposit destination"""
  directDepositDestinationPill: AppPill

  """
  When the account is a custodial account, this description will provide the UGMA or UTMA designation for the account.
  """
  custodialAccountDescription: String

  """
  True if the account is considered a retirement account, false otherwise.
  """
  isRetirement: Boolean!

  """
  True if the account is currently marked for liquidation. While liquidating,
  some funding functions are not available.
  """
  isLiquidating: Boolean!

  """True if the account currently holds cash or investments."""
  isFunded: Boolean

  """True if the user should be prompted to connect an external bank."""
  shouldPromptForExternalBankConnection: Boolean @deprecated(reason: "Replaced by `setupChecklist`.")

  """True if the user should be prompted to create a transfer or schedule."""
  shouldPromptForTransfer: Boolean

  """
  True if the account currently has a pending transfer. Only one transfer may be
  pending at a time.
  """
  hasPendingTransfer: Boolean! @deprecated(reason: "Replaced by `hasPendingTransferInstances`.")

  """
  The current pending ACH transfer, if there is one. Value is null when there is
  currently no pending transfer.
  """
  pendingTransfer: AchTransfer @deprecated(reason: "Replaced by `pendingTransferInstances`.")

  """
  A signed dollar amount that will be imminently transfered to or from the
  account at the next trading opportunity. Positive amounts are deposits into
  the account; negative amounts are withdrawals.
  """
  imminentPendingCashFlowForOrders: Float

  """The account balance."""
  balance: AccountBalance!

  """Borrow information for this account, if applicable and eligible."""
  borrowAccount: BorrowAccount

  """If applicable, a setup checklist to display for this account."""
  setupChecklist: SetupChecklist

  """
  True when a portfolio has been set for this account. Use this field to
  determine if a null value for `rootPortfolioSlice` is because a portfolio has
  not been set vs it has been set, but there was an error resolving that field.
  """
  hasPortfolio: Boolean!

  """If the account has no portfolio set, options for creating one."""
  setPortfolioOptions: SetPortfolioOptions

  """
  The root portfolio slice that defines the investment composition for the
  account. Value is null when a root pie has not yet been set for the account.
  """
  rootPortfolioSlice: RootPortfolioSlice

  """A list of portfolio slices that currently have buy orders set."""
  portfolioSlicesWithBuyOrders: [PortfolioSlice]

  """A list of portfolio slices that currently have sell orders set."""
  portfolioSlicesWithSellOrders: [PortfolioSlice]

  """A list of portfolio slices that currently have rebalances set."""
  portfolioSlicesWithRebalances: [PortfolioSlice]

  """
  Estimated information about trading that will occur during the next trading
  window for this account. Estimated trades are based on portfolio activity and
  are based on current prices. The most recently generated estimated trading
  information will be returned. Value is null if the estimated trades feature is
  unavailable or disabled.
  """
  estimatedTrading: EstimatedTrading

  """A history of activities for the account."""
  investActivity: InvestActivity

  """
  The threshold dollar amount over which any cash will be automatically invested
  into the portfolio. When non-null, value will be greater than or equal to
  zero. When null, the max cash threshold is disabled.
  """
  maxCashThreshold: Int

  """
  The minimum dollar amount required to activate auto-invest. Cash balances must
  exceed the `maxCashThreshold` by this amount in order for auto-invest to
  trigger.
  """
  autoInvestTriggerMinimum: Int!

  """The minimum dollar amount required for buy trades to execute."""
  minimumBuyTradeAmount: Float!

  """
  The minimum deposit amount for the initial deposit into this Invest account.
  """
  minimumInitialDeposit: Float!

  """
  The maximum deposit amount for the initial deposit into this Invest account.
  """
  maximumInitialDeposit: Float!

  """
  A summary of account funding over time. Value is null if data is currently
  unavailable.
  """
  fundingTotals: AccountFundingTotals

  """
  A summary of IRA contributions over time. Value is null if the account is not
  a retirement account, or if the data is currently unavailable.
  """
  iraContributionTotals: IraContributionTotals

  """
  A summary of IRA contributions limits. Value is null if the account is not
  a retirement account, or if the data is currently unavailable.
  """
  iraContributionLimits: IraContributionLimits

  """List of applicable distribution reasons for an IRA account"""
  iraDistributionReasons: [IraDistributionReasonEnum!]

  """
  Whether the account allows an external funding relationship to be configured.
  """
  allowsExternalFunding: Boolean!

  """Retrieve all external accounts linked to this investment account."""
  externalAccounts(
    after: String
    first: Int

    """Deprecated. Has no effect."""
    onlyActive: Boolean
  ): ExternalAccountConnection!

  """
  The most recent ACH relationship. Value is `null` when there have been no ACH
  relationships.
  """
  lastAchRelationship: AchRelationship

  """MOFO Account open tax lots"""
  taxLots(first: Int, after: String, lotType: LotTypeEnum!): AccountTaxLotsConnection

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String

  """
  If the account is a Custodial Account, this field contains the custodial account beneficiary information.
  """
  custodialAccountBeneficiary: CustodialAccountBeneficiary

  """
  Received Securities entry point for an Account. Returns null if this is not an Invest Account.
  """
  receivedSecurities: ReceivedSecurities
  iraWithholding: IraWithholding @deprecated(reason: "Use `iraWithholding field on TransferParticipantDetails` instead.")

  """
  Entry point for Move Slices. The given Account must be of type Invest and have a Portfolio set. Null otherwise.
  """
  moveSlices: MoveSlices

  """Banner used to display information about the account to the user"""
  informationalBanner: InformationBanner

  """
  A string that should display the account type along with the account number.
  """
  accountTypeWithNumberDescriptor: String

  """Ira actions - conversion & recharacterization entry point"""
  fundingActions: FundingActions
}

enum LotTypeEnum {
  OPEN
  CLOSED
}

"""An account status."""
enum AccountStatusEnum {
  """Closed"""
  CLOSED

  """New"""
  NEW

  """Opened"""
  OPENED

  """Rejected"""
  REJECTED
}

"""An account originator."""
enum AccountOriginatorEnum {
  """Apex"""
  APEX

  """M1"""
  M1
}

type FundingActions {
  title: RichTextContent!
  cards: [AppCard]!
}

"""Employment status/where applicant is sourcing funds from."""
enum LoanIncomeSourcesEnum {
  """Employed Full-time"""
  EMPLOYED_FULL_TIME

  """Employed Part-time"""
  EMPLOYED_PART_TIME

  """Self-Employed"""
  SELF_EMPLOYED

  """Retired"""
  RETIRED

  """Unemployed or Furloughed"""
  UNEMPLOYED
}

"""ie pre-Approved, declined, in progress"""
type LoanApplicationStatus {
  """Status for the loan application."""
  status: LoanApplicationStatusEnum

  """Description for the loan application status."""
  statusDescription: String @deprecated(reason: "Field never implemented and not necessary.")
}

enum LoanApplicationStatusEnum {
  """Queued"""
  QUEUED

  """Submitted"""
  SUBMITTED

  """Offers provided"""
  OFFERS_PROVIDED

  """Offer selection queued"""
  OFFER_SELECTION_QUEUED

  """Offers accepted"""
  OFFER_ACCEPTED

  """Approved"""
  APPROVED

  """Expired"""
  EXPIRED

  """Rejected"""
  REJECTED

  """Rejected due to credit frozen"""
  REJECTED_CREDIT_FROZEN

  """Error submitting application"""
  ERROR_SUBMITTING_APPLICATION

  """Error accepting offer"""
  ERROR_ACCEPTING_OFFER

  """Plaid income verification required"""
  INCOME_VERIFICATION_REQUIRED

  """Withdrawn"""
  WITHDRAWN

  """Manual review required"""
  MANUAL_REVIEW_REQUIRED
}

type BorrowDashboard implements Node {
  """The ID of this node."""
  id: ID!
}

type BorrowMarketingScreen implements Node {
  """The ID of this node."""
  id: ID!

  """
  An array of the content cards for the primary Borrow overview marketing screen.
  """
  marketingCards: [MarketingCard]

  """
  An array of the footnotes for the primary Borrow overview marketing screen.
  """
  footnotes: [String]

  """
  Link to a reference informational page for content comparing Margin and Personal loans.
  """
  marginPersonalLoanInfoLink: AppLink

  """M1 Bank disclosure content for the Borrow marketing screen."""
  bankDisclosure: String

  """Design & marketing assets."""
  assets: BorrowMarketingDesignAssets
}

type BorrowMarketingScreenV2 implements Node & MarketingScreen {
  """The ID of this node."""
  id: ID!

  """The header for the borrow marketing screen."""
  header: String

  """The bank disclosure for the borrow marketing screen."""
  bankDisclosure: BorrowBankDisclosure

  """
  Link to a reference informational page for content comparing Margin and Personal loans.
  """
  marginPersonalLoanInfoLink: AppLink

  """An array of the content cards for the borrow marketing screen."""
  productMarketingCards: [ProductMarketingCard]

  """An array of the disclosures for the borrow marketing screen."""
  disclosures: [AppRichTextDisclosureLink]

  """
  A nullable modal for users with more than one eligible invest account to select which one they want used for a margin loan
  """
  marginLoanModal: MarginLoanModal
}

type BorrowBankDisclosure {
  """The text for the borrow bank disclosure"""
  text: String

  """The icon for the borrow bank disclosure"""
  icon: AppImage
}

type MarginLoanModal {
  """A title for the margin loan modal"""
  title: String

  """A subtitle for the margin loan modal"""
  subtitle: String

  """An array of eligible invest accounts a margin loan"""
  marginLoanAccounts: [MarginLoanAccount]

  """The CTA label for the margin loan modal"""
  ctaLabel: String
}

type MarginLoanAccount {
  """
  The transferParticipantId of a transferParticipant for the margin loan modal
  """
  transferParticipantId: String!

  """
  The transferParticipantName of a transferParticipant for the margin loan modal
  """
  transferParticipantName: String!
}

type BorrowMarketingDesignAssets {
  equalHousingIcon: AppImage
}

type PersonalLoans implements Node {
  """The ID of this node."""
  id: ID!

  """Umbrella type for application flow"""
  applicationFlow: PersonalLoanApplicationFlow

  """Entry point for the Personal Loans Direct flow."""
  applicationFlowDirect: PersonalLoanDirect

  """Information about the active application for the user."""
  activeApplication: PersonalLoanApplicationDetails

  """A personal loan application."""
  application(applicationId: ID): PersonalLoanApplicationDetails

  """Umbrella type for application flow"""
  disbursementFlow(loanId: ID): PersonalLoanDisbursementFlow

  """A connection of loans for the user."""
  loans(filterByStatus: [PersonalLoanStatusEnum] = [ACTIVE, DISBURSEMENT_QUEUED]): PersonalLoanConnection

  """Returns true if the user has the feature flag for AutoPay enabled."""
  isPersonalLoansAutoPayEnabled: Boolean

  """Applink to drive navigation to Personal Loans"""
  applyForPersonalLoanCta: AppLink
}

type PersonalLoanApplicationFlow implements Node {
  """The ID of this node."""
  id: ID!

  """Information for the landing page"""
  landingPage: PersonalLoanLandingPage

  """The optional documents for the view terms and conditions landing page."""
  optionalDocuments: RequiredDocumentsBundle

  """The required documents for the view terms and conditions landing page."""
  requiredDocuments: RequiredDocumentsBundle

  """The required disclosures for the profile review page."""
  requiredDisclosures: RequiredDocumentsBundle

  """What the user is requesting the loan for."""
  loanPurposeOptions: LoanPurposeConnection

  """Details about the restrictions around a loan amount."""
  loanMinAndMaxDetails: LoanMinAndMaxDetails

  """Options for the duration of the loan term."""
  loanTermOptions: [LoanTermOption]

  """Content for the view loan terms screen after choosing an offer."""
  viewLoanTerms: PersonalLoanViewTerms

  """Viewed pill for the personal loan application flow."""
  viewedPill: AppPill

  """Not viewed pill for the personal loan application flow."""
  notViewedPill: AppPill

  """Loan declined error screens for post-submission application states ."""
  loanDeclinedErrorScreen: PersonalLoanDeclinedErrorScreen

  """Loan ineligibility screen for ineligible applicants."""
  loanIneligibilityScreen: PersonalLoanIneligibilityScreen

  """
  Loan application manual review screen for applicants requiring further manual review.
  """
  loanManualReviewScreen: PersonalLoanApplicationManualReviewScreen

  """Information about how the user's income sources."""
  loanIncomeSources: LoanIncomeSourcesEnum

  """True if additional questions should be included in origination"""
  hasAdditionalOriginationQuestions: Boolean

  """
  Required flag to determine if the user should be asked for annual income within the PL application flow.
  """
  shouldAskForAnnualIncome: Boolean!

  """
  Questions used to drive the Personal Loan in-app flow.
  Clients should poll this field to retrieve up-to-date questions to surface to the user within this flow.
  """
  questions: [PersonalLoanQuestion]
}

type PersonalLoanDeclinedErrorScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The title for the loan decline error screen."""
  title: String

  """The subtitle for the loan decline error screen."""
  subtitle: String

  """
  List of credit bureaus the user will need to contact to unfreeze their credit report.
  """
  bureaus: [String!]

  """The text for the optional check box on the loan decline error screen."""
  checkBoxText: String

  """
  An analytics event for following the step into the re-submit application flow.
  """
  analyticsEvent: AppAnalyticsEvent

  """The destination AppLink for the loan decline error screen."""
  ctaLink: AppLink
}

type PersonalLoanIneligibilityScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The title for the loan ineligibility screen."""
  title: String

  """The subtitle for the loan ineligibility screen."""
  subtitle: String

  """The reasons for ineligibility."""
  reasons: [String] @deprecated(reason: "Use eligibilityCriteriaLink instead.")

  """The link for eligibility criteria"""
  eligibilityCriteriaLink: AppLink
}

type PersonalLoanApplicationManualReviewScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The title for the manual review screen."""
  title: String!

  """The content for the manual review screen."""
  content: [String]

  """The cta link for the manual review screen"""
  ctaLink: AppLink

  """The illustration for the manual review screen"""
  illustration: AppImage
}

type PersonalLoanDisbursementFlow implements Node {
  """The ID of this node."""
  id: ID!

  """
  Flag to determine if the given loan has any valid external accounts to disburse to.
  """
  hasDisbursementOption: Boolean

  """
  Content to drive the view for prompting the user to connect their bank.
  """
  promptForBankConnection: PersonalLoansPromptForBankConnection

  """Information to be displayed on the Review Loan Screen."""
  reviewLoanScreen: ReviewLoanScreen

  """Content for the loan disbursement of funds."""
  loanDisbursement: PersonalLoanDisbursement

  """
  An analytics event to be fired upon loan acceptance completion before disbursement.
  """
  analyticsEvent: AppAnalyticsEvent

  """Content for the post-disbursement AutoPay setup screen."""
  autoPaySetup: PersonalLoansAutoPaySetup
}

type PersonalLoansAutoPaySetup {
  """Title for the set up AutoPay screen."""
  title: String

  """Subtitle for the set up AutoPay screen."""
  subtitle: String

  """
  List of valid transfer participants for setting up AutoPay for a personal loan.
  """
  autoPayAccountList: [TransferParticipant]

  """App informational card with AutoPay details."""
  autoPayInformationalCard: AppInformationalMessageCard

  """Payment schedule table values for the set up AutoPay screen."""
  paymentSchedule: [PersonalLoanPaymentScheduleEntry] @deprecated(reason: "Field was a part of older designs but is no longer used`.")
}

type PersonalLoanLandingPage {
  """Information for the bullet points to display on the screen"""
  bulletPoints: [PersonalLoanBulletPoint]

  """A required disclaimer for the loan application."""
  loanDisclaimer: String!

  """
  An analytics event for opening the `Terms of Use` document on the personal loans application landing page.
  """
  analyticsEvent: AppAnalyticsEvent
}

type PersonalLoanBulletPoint {
  """The icon to display as the bullet point."""
  icon: AppImage @deprecated(reason: "No longer included in designs. Clients should omit")

  """The copy to display for the bullet point."""
  copy: String
}

type LoanTermOption {
  """Length of the loan term in months."""
  value: Float

  """String description of the value, formatted in years and months."""
  description: String
}

type PersonalLoanDisbursement implements Node {
  """The ID of this node."""
  id: ID!

  """Title for the loan funds disbursement screen."""
  title: String

  """Subtitle for the loan funds disbursement screen."""
  subtitle: String

  """
  List of valid transfer destination participants for the loan funds disbursement.
  """
  destinationList: [TransferParticipant]

  """Disclaimer text for time limit rescinding."""
  disclaimerText: String @deprecated(reason: "Removing, no longer displaying to user.")

  """Continue button CTA for the loan funds disbursement screen."""
  continueCta: String
}

type PersonalLoansPromptForBankConnection {
  """AppImage for this screen."""
  image: AppImage

  """Header content for this screen."""
  header: String

  """Subheader content for this screen."""
  subheader: String

  """Image associated with the subheader."""
  subheaderImage: AppImage

  """AppLink for the main CTA. If null, render a generic error."""
  primaryContinueLink: AppLink!

  """AppLink for the secondary CTA. If null, render a generic error."""
  secondaryContinueLink: AppLink!
}

type PersonalLoanViewTerms implements Node {
  """The ID of this node."""
  id: ID!

  """Title for the view loan terms screen."""
  title: String

  """Subtitle for the view loan terms screen."""
  subtitle: String

  """The text for the cta on the view loan terms screen."""
  continueCta: String

  """The checkbox agreement text for the cta on the view loan terms screen."""
  checkBoxText: String @deprecated(reason: "The UI this field supported has been removed.")

  """The header for all loan documents on the view loan terms screen"""
  viewLoanDocumentsHeader: String

  """The header for the loan agreement on the view loan terms screen"""
  viewLoanAgreementHeader: String @deprecated(reason: "Use `viewLoanDocumentsHeader` instead.")

  """The header for the additional documents on the view loan terms screen"""
  viewAdditionalTermsHeader: String @deprecated(reason: "Use `viewLoanDocumentsHeader` instead.")

  """Chart entry values for the view loan terms screen."""
  loanDetails: [PersonalLoanViewTermsTableEntry]

  """An error message to display if the user has not viewed the T&Cs."""
  notViewedErrorMessage: PersonalLoanViewTermsDocumentsError

  """Viewed pill for the document set."""
  viewedPill: AppPill

  """Not viewed pill for the document set."""
  notViewedPill: AppPill

  """Loan agreement document for the view loan terms screen."""
  loanAgreement: RequiredDocumentsBundle

  """Loan agreement document for the view loan terms screen."""
  dynamicLoanAgreementPresignedUrl: AppLink

  """Additional loan terms documents for the view loan terms screen."""
  additionalTerms: RequiredDocumentsBundle

  """Payment schedule table values for the view loans term screen."""
  paymentSchedule: [PersonalLoanPaymentScheduleEntry]

  """Final payment table values for the view loans term screen."""
  finalPayment: [PersonalLoanPaymentScheduleEntry] @deprecated(reason: "Field is no longer used, all details returned in `paymentSchedule`.")
}

type PersonalLoanViewTermsTableEntry {
  """Title for the view loan terms table entry"""
  title: String

  """Subtitle for the view loan terms table entry"""
  subtitle: String

  """Loan value for the view loan terms table entry"""
  value: String
}

type PersonalLoanViewTermsDocumentsError {
  """Copy to display."""
  copy: String

  """Icon to display."""
  icon: AppImage
}

type PersonalLoanPaymentScheduleEntry {
  """Label for the payment schedule table entry."""
  label: String

  """Value for the payment schedule table entry."""
  value: String
}

type LoanPurposeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LoanPurposeEdge]
}

type LoanPurposeEdge {
  """The item at the end of the edge"""
  node: LoanPurpose
}

"""What the loan will be utilized for."""
type LoanPurpose {
  """The title for the option."""
  title: String

  """The icon for the option."""
  icon: AppImage

  """The subtitle for the option."""
  subtitle: String

  """The corresponding enum for the loan purpose."""
  value: LoanPurposeEnum
}

enum LoanPurposeEnum {
  """Debt consolidation"""
  DEBT_CONSOLIDATION

  """Home improvement"""
  HOME_IMPROVEMENT

  """Medical expenses"""
  MEDICAL_EXPENSES

  """Moving or relocating"""
  MOVING_OR_RELOCATING

  """Vacation"""
  VACATION

  """Special occasion"""
  SPECIAL_OCCASION

  """Major purchase"""
  MAJOR_PURCHASE
}

type LoanMinAndMaxDetails {
  """The minimum amount that can be requested for a personal loan."""
  minAmount: Float

  """The maximum amount that can be requested for a personal loan."""
  maxAmount: Float

  """
  A description of the minimum and maximum amounts that can be requested for a personal loan.
  """
  rangeDescription: String
}

type PersonalLoanApplicationDetails implements Node {
  """The ID of this node."""
  id: ID!

  """The application id for the application"""
  applicationId: String!

  """The loan application status."""
  status: LoanApplicationStatus

  """Credit check disclaimer"""
  creditCheckDisclaimer: String!

  """Information about the loan offers for the application."""
  applicationOffers: PreApprovalLoanApplicationOfferConnection

  """Analytics event to be logged upon application submission completion."""
  analyticsEvent: AppAnalyticsEvent

  """The loan associated with the active application."""
  loan: PersonalLoan

  """
  The disclosure text to be displayed on the loan application offers page.
  """
  disclosureFooter: String @deprecated(reason: "Should be replaced with loanDisclosure for updated PL origination flows.")

  """
  The title for the select offer screen
  ex: Fantastic! Here are your pre-approved offers:
  """
  loanTitle: String!

  """
  The subtitle for the select offer screen
  ex: Offers are good for 30 days, or you can withdraw your application now.
  """
  loanSubtitle: [RichTextContent!]!

  """
  The dislosure to show to the user on the re-designed select offer screen
  ex: Offers from B2 Bank, NA, Member FDIC, Equal Opportunity Lender. Offers aren't guaranteed and are subject to verification through M1's credit model and hard credit check.\n\nM1 is not a bank.
  """
  loanDisclosure: [String!]
}

type PreApprovalLoanApplicationOfferConnection {
  pageInfo: PageInfo!
  edges: [PreApprovalLoanApplicationOfferEdge]
}

type PreApprovalLoanApplicationOfferEdge {
  node: PreApprovalLoanApplicationOffer
}

type PreApprovalLoanApplicationOffer implements Node {
  """The ID of this node."""
  id: ID!

  """An id for the application associated with the offer."""
  applicationId: String!

  """The loan offer amount."""
  amount: Float!

  """The loan offer amount formatted."""
  formattedAmount: String!

  """The APR for the loan offer."""
  annualPercentageRate: Float!

  """The monthly payment for the loan offer."""
  monthlyPayment: Float!

  """The monthly payment for the loan offer, formatted in USD."""
  formattedMonthlyPayment: String!

  """The duration of the loan in months."""
  monthlyDuration: Int!

  """The duration of the loan in years and months."""
  formattedMonthlyDuration: String!

  """The short description of the loan details."""
  shortLoanDetailDescription: String!

  """
  Returns the loan amount, percentage, and duration in a formatted string
  ex: $XX,XXX / XX% APR / X years and Y months
  """
  offerTitle: String!

  """
  Returns the number of monthly payments and payment amount in a formatted string
  ex: That's XX monthly payments of $XXX.
  """
  offerSubtitle: String!

  """
  The amount and description of the loan
  ex: formattedValue: $24,000, formattedSubtitle: Loan amount
  """
  formattedAmountInfo: PersonalLoanOfferValue!

  """
  The formatted monthly payment and description
  ex: formattedValue: $609, formattedSubtitle: monthly payment
  """
  formattedMonthlyPaymentInfo: PersonalLoanOfferValue!

  """
  The formatted APR and description
  ex: formattedValue: 18%, formattedSubtitle: APR
  """
  formattedAnnualPercentageInfo: PersonalLoanOfferValue!

  """
  The formatted term length and description
  ex: formattedValue: 5 yrs, formattedSubtitle: Term
  """
  formattedDurationInfo: PersonalLoanOfferValue!

  """
  An optional app pill that adds extra marketing flavor to the offer
  ex: Lowest monthly payment
  """
  marketingPill: AppPill
}

type PersonalLoanOfferValue {
  """
  Formatted value
  ex: $24,000
  """
  formattedValue: String!

  """
  The description text that goes along with the formatted value
  ex: Loan amount
  """
  formattedSubtitle: String!
}

type PersonalLoanConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonalLoanEdge]
}

type PersonalLoanEdge {
  """The item at the end of the edge"""
  node: PersonalLoan
}

type PersonalLoan implements Node & TransferParticipant & ListableAccount {
  """The ID of this node."""
  id: ID!

  """Status for the loan application."""
  status: PersonalLoanStatusEnum

  """The formatted principal balance."""
  formattedPrincipalBalance: LoanDetailValue

  """Check whether the user has accepted the loan"""
  hasAcceptedLoan: Boolean @deprecated(reason: "Clients should use the loan `status` to determine routing")

  """Loan details to be displayed."""
  subHeaderDetails: [LoanDetailValue]

  """Check whether the loan is active"""
  isActive: Boolean

  """Returns the instance of AutoPay for the specific loan, if it exists."""
  autoPayInstance: ScheduledTransferRule

  """Loan details to be displayed."""
  additionalDetails: [LoanDetailValue]

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String

  """Late payment warning message if the loan is past due."""
  paymentWarningMessage: String

  """(Mobile only) Loan quick actions."""
  quickActions: [QuickActionLink]

  """AppLinks to be displayed on the manage loan and overview pages."""
  links: PersonalLoanAdditionalLinks

  """Manage Loan Actions"""
  manageLoanActions: [ManageLoanActionSection]

  """Personal loan transactions to be displayed on the overview screen."""
  transactions(first: Int, after: String): LoanTransactionEntryConnection

  """The account category."""
  accountCategory: AccountCategoryEnum!

  """
  Boolean for mobile clients to use on the overview Borrow menu to indicate a late personal loan.
  """
  isLatePersonalLoan: Boolean

  """
  Boolean for mobile clients to use on the overview Borrow menu to indicate a personal loan that has failed disbursement.
  """
  isFailedDisbursementPersonalLoan: Boolean

  """The name of the account."""
  name: String!

  """A descriptor for the account, for help identifying in a list."""
  descriptor: String

  """A message to be displayed on the loan overview screen."""
  autoPayMessage: BorrowPromotionalMessage

  """Design assets."""
  assets: PersonalLoanDesignAssets

  """Details for the Personal Loan Product Landing Page"""
  personalLoanProductLandingPage: PersonalLoanProductLandingPage
}

type PersonalLoanProductLandingPage implements ProductAccountLandingPage {
  """The title for the Personal Loan Product Landing Page"""
  title: String

  """The header for the Personal Loan Product Landing Page"""
  header: ProductAccountLandingPageHeader

  """The account details for the Personal Loan Product Landing Page"""
  accountDetails: [TabularDataItem]

  """
  An array of informational banners for the Personal Loan Product Landing Page
  """
  banners: [InformationBanner]

  """The graph details for the Personal Loan Product Landing Page"""
  graphDetails: PersonalLoanLandingPageGraphDetails

  """
  The details for the Loan Details card on the Personal Loan Product Landing Page (Web only)
  """
  loanDetails: TabularDataSection

  """An array of the disclosures for the Personal Loan Product Landing Page"""
  disclosures: [AppRichTextDisclosureLink]

  """
  The mobile floating action button details for the Personal Loan Product Landing Page
  """
  floatingActionButton: AppNavigationItem

  """
  Common transactions to be displayed on the Personal Loan Product Landing Page
  """
  transactions(first: Int, after: String): CommonTransactionEntryConnection

  """
  Copy to be displayed when there are no transactions on the Personal Loan Product Landing Page
  """
  transactionsEmptyState: CommonTransactionsEmptyState

  """
  Card(s) to be shown for promotions that may require additional action or just be less important
  """
  promotionCards: [AppCard!]

  """
  Card(s) to be shown in a more prominent location (such as closer to the top of the page) for active or more important promotions, these may or may not require additional actions
  """
  priorityPromotionCards: [AppCard!]
}

type PersonalLoanLandingPageGraphDetails {
  """The title for the Product Account Graph Details"""
  title: String

  """The percentage for the Product Account Graph"""
  percentage: Float

  """The upperLimit for the Product Account Graph"""
  upperLimitAmount: Float

  """The currentAmount for the Product Account Graph"""
  currentAmount: Float

  """The description for the Product Account Graph Details"""
  description: String

  """The tooltip for the Product Account Graph Details"""
  tooltip: AppTooltip
}

type PersonalLoanCommonTransactionMetadata implements CommonTransactionMetadata {
  """The ID on Personal Common Transaction Metadata"""
  id: ID!

  """
  The amount paid to principal on Personal Loan Common Transaction Metadata
  """
  toPrincipal: String

  """
  The amount paid to interest on Personal Loan Common Transaction Metadata
  """
  toInterest: String
}

enum PersonalLoanStatusEnum {
  """Active"""
  ACTIVE

  """Closed"""
  CLOSED

  """Frozen"""
  FROZEN

  """Expired"""
  EXPIRED

  """Created"""
  CREATED

  """CreationPending"""
  CREATION_PENDING

  """LoanAcceptanceQueued"""
  LOAN_ACCEPTANCE_QUEUED

  """LoanAccepted"""
  LOAN_ACCEPTED

  """DisbursementReady"""
  DISBURSEMENT_READY

  """DisbursementQueued"""
  DISBURSEMENT_QUEUED

  """Withdrawn"""
  WITHDRAWN
}

type PersonalLoanDesignAssets {
  equalHousingIcon: AppImage
}

type PersonalLoanAdditionalLinks {
  """AppLink to be displayed on the manage loan details screen."""
  viewDocuments: AppLink

  """AppLink to be displayed on the SCRA contact support screen."""
  scraContactSupport: AppLink
}

type LoanTransactionEntryConnection {
  total: Int
  pageInfo: PageInfo!
  edges: [LoanTransactionEntryEdge]
}

type LoanTransactionEntryEdge {
  cursor: String!
  node: LoanTransactionEntry
}

type LoanTransactionEntry implements Node {
  """The ID of this node."""
  id: ID!

  """The title of this loan transaction activity entry."""
  title: String

  """The type of this loan transaction activity entry."""
  paymentType: PersonalLoanPaymentTypeEnum

  """The status of this loan transaction activity entry."""
  status: AppPill

  """The formatted date for this loan transaction activity entry."""
  activityDate: String

  """The AppImage icon for this loan transaction activity entry."""
  icon: AppImage

  """Principal paid for this loan transaction activity entry."""
  principalPaid: Float

  """Interest paid for this loan transaction activity entry."""
  interestPaid: Float

  """Total amount paid for this loan transaction activity entry."""
  totalPaid: Float

  """Information for the loan transaction activity entry details view."""
  details: LoanTransactionEntryDetails
}

"""Type of payment or disbursement transaction."""
enum PersonalLoanPaymentTypeEnum {
  """Loan disbursement."""
  LOAN_DISBURSEMENT

  """Payment made through the app."""
  USER_PAYMENT

  """Payment made by check."""
  CHECK_PAYMENT

  """AutoPay payment."""
  AUTO_PAYMENT
}

type LoanTransactionEntryDetails {
  """Amount for the transaction entry details screen."""
  amount: Float

  """Transaction status pill for the details screen."""
  statusPill: AppPill

  """Indicator if the given payment has failed."""
  isFailed: Boolean

  """
  Array of optional additional details for the loan transaction entry details screen.
  """
  additionalDetails: [LoanTransactionEntryDetailsItem]
}

"""Information and message for a Borrow account."""
type BorrowPromotionalMessage implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Title for the Borrow promotional message."""
  title: String

  """Body text for the Borrow promotional message."""
  body: String

  """Link for the Borrow promotional message."""
  link: AppLink
}

type LoanTransactionEntryDetailsItem {
  """Label for the loan transaction entry details item."""
  label: String

  """Value for the loan transaction entry details item."""
  value: String
}

type ManageLoanActionSection {
  """Title for the manage loan category"""
  title: String!

  """Array of loan actions for a specific category"""
  loanActions: [ManageLoanAction]
}

type ManageLoanAction {
  """Icon for the action."""
  icon: AppImage

  """Title for the action."""
  title: String

  """Subtitle for the action."""
  subtitle: String

  """Link for the action."""
  link: AppLink
}

type LoanDetailValue {
  """Value formatted as a string."""
  value: String

  """The title for the loan detail."""
  title: String

  """The icon for the loan detail."""
  icon: AppImage

  """The tooltip for the loan detail, if required."""
  tooltip: LoanTooltip
}

type QuickActionLink {
  """The icon for the quick action link."""
  icon: AppImage

  """The deeplink for the quick action."""
  link: AppLink
}

"""Tooltip to be used for loan detail information."""
type LoanTooltip {
  icon: AppImage
  copy: [String]
}

"""Information to be displayed on the Review Loan Screen"""
type ReviewLoanScreen {
  """Information about the loan terms to display."""
  details: [ReviewLoanDetail]

  """Congratulatory copy to display."""
  customizedMessage: [String]

  """Returns an app link to the document center."""
  loanAgreementDocLink: AppLink

  """Information about the AutoPay details for the user, if applicable."""
  autoPayDetails: [ReviewLoanDetail]
}

type ReviewLoanDetail {
  """Label for the loan detail."""
  label: String

  """Value for the loan detail."""
  value: String
}

enum PersonalLoanDirectQuestionEnum {
  NAME_EMAIL_PASSWORD
  LOAN_USE_AMOUNT_AND_DURATION
  HOME_ADDRESS
  PHONE_NUMBER
  PHONE_NUMBER_VERIFICATION
  DATE_OF_BIRTH_CITIZENSHIP
  ANNUAL_INCOME_MONTHLY_RENT_MORTGAGE
  SOCIAL_SECURITY_NUMBER
  PRE_APPROVED_OFFERS
  EMPLOYMENT_STATUS_AND_INFO
  AVAILABLE_CASH
  FINANCIAL_DISCLOSURES
  HARD_PULL_CONSENT
  BANK_CONNECTION
  BANK_DEPOSIT
  AUTOPAY
  ACCEPT_LOAN_OFFER
  RECEIPT
}

type PersonalLoanDirect {
  """
  Status for a user's active application. Null if no application currently exists.
  """
  activeApplicationStatus: LoanApplicationStatusEnum

  """
  Questions used to drive the PersonalLoanDirect flow.
  Clients should poll this field to retrieve up-to-date questions to surface to the user within this flow.
  """
  questions: [PersonalLoanDirectQuestion]
}

type PersonalLoanDirectQuestion {
  """
  An ENUM representing the specific question. Clients can key off this value to build custom behavior on a per-question basis.
  This field serves as the ID for the given question which is why it is required.
  """
  questionType: PersonalLoanDirectQuestionEnum!

  """Title screen for the question."""
  title: String

  """Subtitle copy of the given question."""
  subtitle: String

  """Footer copy of the given question."""
  footer: String

  """Links required for CTAs if outside of the app"""
  link: AppLink

  """Image to display on personal loan direct question page if there is one"""
  image: AppImage

  """Copy to be rendered for the continue CTA."""
  continueLabel: String

  """
  Copy to be rendered for the skip CTA. Null if the question can't be skipped.
  """
  skipLabel: String

  """
  An ENUM representing the previous question, null if the given question is the first in its section.
  """
  previousQuestionType: PersonalLoanDirectQuestionEnum

  """
  An ENUM representing the next question, null if the given question is the last in its section.
  """
  nextQuestionType: PersonalLoanDirectQuestionEnum
}

enum PersonalLoanQuestionEnum {
  LOAN_DISCLOSURES
  LOAN_USE
  LOAN_AMOUNT_AND_DURATION
  ANNUAL_INCOME
  MONTHLY_RENT_MORTGAGE
  LOAN_REVIEW
  PRE_APPROVED_OFFERS
  EMPLOYMENT_STATUS
  EMPLOYMENT_INFO
  FINANCIAL_DISCLOSURES
  HARD_PULL_CONSENT
  BANK_CONNECTION
  BANK_DEPOSIT
  AUTOPAY
  ACCEPT_LOAN_OFFER
  RECEIPT
}

type PersonalLoanQuestion {
  """
  An ENUM representing the specific question. Clients can key off this value to build custom behavior on a per-question basis.
  This field serves as the ID for the given question which is why it is required.
  """
  questionType: PersonalLoanQuestionEnum!

  """Title screen for the question."""
  title: String

  """Subtitle copy of the given question."""
  subtitle: String

  """Footer copy of the given question."""
  footer: String

  """Copy to be rendered for the continue CTA."""
  continueLabel: String

  """
  Copy to be rendered for the skip CTA. Null if the question can't be skipped.
  """
  skipLabel: String

  """
  An ENUM representing the previous question, null if the given question is the first in its section.
  """
  previousQuestionType: PersonalLoanQuestionEnum

  """
  An ENUM representing the next question, null if the given question is the last in its section.
  """
  nextQuestionType: PersonalLoanQuestionEnum
}

type CommonTransactionDetails {
  """The transaction ID"""
  id: ID!

  """The header for a Common Transaction Details instance"""
  header: String

  """The description for a Common Transaction Details instance"""
  description: [RichTextContent]

  """The status on a Common Transaction"""
  status: CommonTransactionStatusEnum

  """The primary details information for a Common Transaction instance"""
  primaryDetails: CommonTransactionPrimaryInfo

  """The array of detail sections for a Common Transaction Details instance"""
  detailSections: [CommonTransactionDetailSection]

  """
  The link for a Common Transaction Details instance (ex: 'Report an issue with this transaction')
  """
  link: AppNavigationItem
}

type CommonTransactionPrimaryInfo {
  """The amount details for a Common Transaction Primary Info section"""
  amount: CommonTransactionPrimaryInfoAmount

  """The status details for a Common Transaction Primary Info section"""
  status: CommonTransactionPrimaryInfoStatus
}

type CommonTransactionPrimaryInfoAmount {
  """The label for a Common Transaction Primary Info Amount section"""
  label: String

  """The value for a Common Transaction Primary Info Amount section"""
  value: CommonTransactionAmount
}

type CommonTransactionPrimaryInfoStatus {
  """The label for a Common Transaction Primary Info Status section"""
  label: String

  """The pill for a Common Transaction Primary Info Status section"""
  pill: AppPill
}

type CommonTransactionDetailSection {
  """
  The header for a Common Transaction Detail Section (ex: 'Payment Breakdown')
  """
  header: String

  """The details array for a Common Transaction Detail Section"""
  details: [CommonTransactionDetail]
}

type CommonTransactionDetail {
  """The label for a Common Transaction Detail (ex: 'To principal')"""
  label: String

  """The value for a Common Transaction Detail"""
  value: CommonTransactionDetailValue

  """
  The metadata for a Common Transaction Detail as an array of strings (ex: for address, phone number, and website)
  """
  metadata: [String]

  """The pill for a Common Transaction Detail (ex: Rewards tier pill)"""
  pill: AppPill

  """The reward tier pill for a Credit Card Common Transaction Detail"""
  rewardTierPill: CreditCardRewardsAppPill

  """
  The disclaimers for a Common Transaction Detail (ex: Rewards tier pill)
  """
  disclaimers: [RichTextContent]
}

type CommonTransactionDetailValue {
  """The icon for a Common Transaction Detail Value"""
  icon: AppImage

  """The text for a Common Transaction Detail Value"""
  text: String
}

type CommonTransactionEntryConnection {
  """Information to aid in pagination"""
  pageInfo: PageInfo!

  """The table headers for a Common Transactions table"""
  tableHeaders: [CommonTransactionHeader]

  """The transaction edges of a Common Transaction Connection"""
  edges: [CommonTransactionEntryEdge]
}

type CommonTransactionHeader {
  """The title of a Common Transaction table header"""
  title: String

  """The alignment of a Common Transaction table header/cells in the column"""
  align: CommonTransactionHeaderAlignEnum
}

type CommonTransactionEntryEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The transaction node of a Common Transaction"""
  node: CommonTransactionEntry
}

interface CommonTransactionEntry {
  """The ID of this node."""
  id: ID!

  """The icon for a Common Transaction"""
  icon: AppImage

  """The title for a Common Transaction"""
  title: String

  """The subtitle for a Common Transaction"""
  subtitle: String

  """The amount for a Common Transaction"""
  amount: CommonTransactionAmount

  """The status for a Common Transaction"""
  status: CommonTransactionStatusEnum

  """The pill for a Common Transaction"""
  pill: AppPill

  """The metadata for a Common Transaction"""
  metadata: CommonTransactionMetadata

  """The additional details for a Common Transaction"""
  details: CommonTransactionDetails

  """
  The group the Common Transaction belongs to (will help clients with grouping logic)
  """
  groupBy: String!

  """
  If available, a URL to a logo image that represents the Common Transaction
  """
  logoUrl: String
}

enum CommonTransactionHeaderAlignEnum {
  """Align left"""
  LEFT

  """Align center"""
  CENTER

  """Align right"""
  RIGHT
}

type CommonTransactionAmount {
  """The color for a Common Transaction Amount"""
  color: String

  """The text for a Common Transaction Amount"""
  text: String
}

interface CommonTransactionMetadata {
  """The ID of the Common Transaction Metadata"""
  id: ID!
}

enum CommonTransactionStatusEnum {
  """The transaction is in a created state"""
  CREATED

  """The transaction is in a pending state"""
  PENDING

  """The transaction is in a canceled state"""
  CANCELED

  """The transaction is in a failed state"""
  FAILED

  """The transaction is in a complete state"""
  COMPLETE
}

type CommonTransaction implements Node & CommonTransactionEntry {
  """The ID of this node."""
  id: ID!

  """The icon for a Common Transaction"""
  icon: AppImage

  """The title for a Common Transaction"""
  title: String

  """The subtitle for a Common Transaction"""
  subtitle: String

  """The amount for a Common Transaction"""
  amount: CommonTransactionAmount

  """The status for a Common Transaction"""
  status: CommonTransactionStatusEnum

  """The pill for a Common Transaction"""
  pill: AppPill

  """The metadata for a Common Transaction"""
  metadata: CommonTransactionMetadata

  """The additional details for a Common Transaction"""
  details: CommonTransactionDetails

  """
  The group the Common Transaction belongs to (will help clients with grouping logic)
  """
  groupBy: String!

  """
  If available, a URL to a logo image that represents the Common Transaction
  """
  logoUrl: String
}

type CommonTransactionsEmptyState {
  """The title of the transactions empty state"""
  title: [RichTextContent]

  """The subtitle of the transactions empty state"""
  subtitle: [RichTextContent]
}

type Credit implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  Credit Card feature flag. If `true`, show credit card related features. If `false`, hide them from UI.
  """
  isEnabled: Boolean!

  """
  Returns information pertinent to a user's eligibility to apply for a Credit Card.
  """
  isEligible: Boolean!

  """
  Returns true if the user is already enrolled and on the Credit Card marketing waitlist.
  """
  isOnCreditCardWaitlist: Boolean! @deprecated(reason: "Waitlist no longer used")

  """Returns true if the virtual cards feature flag is enabled."""
  isVirtualCardsAvailable: Boolean!

  """True if there is at least one active Credit Card account."""
  hasActiveAccount: Boolean!

  """True if there is at least one suspended Credit Card account."""
  hasSuspendedAccount: Boolean!

  """True if there is at least one terminated Credit Card account."""
  hasClosedAccount: Boolean!

  """True if the user has AutoPay enabled."""
  isAutoPayEnabled: Boolean

  """True if the user meets the criteria to engage in push provisioning."""
  isEligibleForPushProvisioning: Boolean!

  """Returns the user's current AutoPay instance, if it exists."""
  autoPayInstance: ScheduledTransferRule

  """
  Applicant's information that will be used when submitting the Credit Card application.
  """
  applicantInformation: CreditCardApplicantInformation

  """
  Returns the documents and agreements that a user must accept to in order to apply for a credit card.
  """
  termsAndConditions: RequiredDocumentsBundle!

  """
  Links the user to the current terms and conditions associated with the Credit Card waitlist.
  """
  waitlistTermsAndConditions: AppLink! @deprecated(reason: "Waitlist no longer used")

  """An array of credit card application ID's for the user."""
  applicationsForUser: CreditCardApplicationDetailsConnection @deprecated(reason: "Use `activeApplication` instead.")

  """
  Will return an instance of `CreditCardApplicationDetails` if the user has an active credit card application.
  """
  activeApplication: CreditCardApplicationDetails

  """
  Will return an instance of `CreditCardActiveOffer` if a user has an active credit card offer available to them.
  """
  activeOffer: CreditCardActiveOffer

  """
  Will return a list of `CreditCardAccount`s, or `null` if a user does not have any accounts.
  """
  accounts: CreditCardAccountConnection @deprecated(reason: "Use `activeAccount` instead.")

  """
  Will return an instance of `CreditCardAccount` if the user has an active or suspended credit card account.
  """
  activeAccount: CreditCardAccount

  """All copy relating to the Credit Card waitlist confirmation screen."""
  creditCardWaitlistConfirmation(phase: CreditCardWaitlistConfirmationContentPhase): CreditCardWaitlistConfirmationContent @deprecated(reason: "Waitlist confirmation screen no longer used")

  """All copy relating to the initial Credit Card waitlist screen."""
  creditCardWaitlistMarketingScreen: CreditCardWaitlistMarketingScreen @deprecated(reason: "Waitlist marketing screen no longer used")

  """Content for the Credit Card Onboarding flow."""
  onboardingContent: CreditCardOnboardingContent

  """
  Content for the terminated Credit Card account screen when a user's account has been deleted.
  """
  closedAccountContent: CreditCardClosedAccountContent

  """
  Content for the suspended or closed Credit Card account banner when a user's account still exists but is in one of these two suspended states.
  """
  suspendedAccountContent: CreditCardSuspendedAccountContent

  """Content for the Manage Card screen."""
  manageCard: CreditCardManageCardScreen

  """Content for the Manage Card Details screen."""
  manageCardDetails(creditCardId: String): CreditCardManageCardDetailsScreen

  """Content for the Rewards Portal screen."""
  rewardsPortal: CreditCardRewardsPortalScreen

  """
  A breakdown of rewards programs for a user by owned or unowned securities.
  """
  rewardsProgramBreakdownByOwnedOrUnowned(ownershipStatus: CreditCardOwnersRewardsProgramHighlightLinkEnum!): CreditCardRewardsProgramBreakdown

  """Content for the Credit Card marketing banner."""
  creditCardWaitlistMarketingBanner: CreditCardWaitlistMarketingBanner @deprecated(reason: "Marketing banner abandoned")

  """All copy related to just the Credit Card apply now screen."""
  creditCardApplyNowMarketingScreen: CreditCardApplyNowMarketingScreen @deprecated(reason: "No longer used by clients. Will be removed.")

  """Agreements that the user signed up for during Credit Card onboarding."""
  userAcceptedCreditCardAgreements: UserAcceptedCreditCardAgreements

  """Content for the Early Access disclosure for early Credit Card users."""
  earlyAccessContent: CreditCardEarlyAccessContent @deprecated(reason: "Early access banner content no longer used")

  """
  Content for the banner that announces that Credit Card AutoPay is coming soon.
  """
  autoPayComingSoonBannerContent: String @deprecated(reason: "Autopay is live for users")

  """Content for the Select Reward Destination screen."""
  selectRewardDestinationContent: CreditCardSelectRewardDestinationContent
}

type UserAcceptedCreditCardAgreements implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  Onboarding documents the user agreed to upon signing up for the Credit Card.
  """
  onboardingCreditCardAgreements: AgreementBundle
}

type CreditCardApplicantInformation implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Applicant's full name."""
  fullName: String!

  """Applicant's date of birth."""
  dateOfBirth: String!

  """Last four of applicant's SSN."""
  ssnLastFour: String!

  """Applicant's email address."""
  email: String!

  """Applicant's phone number."""
  phoneNumber: String!

  """Applicant's formatted mailing address."""
  legalResidence: String!
}

type CreditCardApplicationDetailsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditCardApplicationDetailsEdge]
}

type CreditCardApplicationDetailsEdge {
  """The item at the end of the edge"""
  node: CreditCardApplicationDetails
}

type CreditCardApplicationDetails implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The status of a user's credit card application."""
  status: CreditCardApplicationStatusEnum!

  """
  For approved or accepted applicants, this will be the APR for the given credit card application.
  """
  annualPercentageRate: Float

  """
  For approved or accepted applicants, this will be the Credit Limit for the given credit card application.
  """
  creditLimit: Float

  """
  For approved applicants, this will be the date in which the Credit Card offer expires.
  """
  expirationDate: String

  """
  For rejected applicants, this will be the date in which the user can submit another Credit Card application.
  """
  nextApplicationEligibilityDate: String

  """
  Cardholder Agreement specific to the user, available when the user has an offer.
  """
  cardholderAgreement: RequiredDocument
}

enum CreditCardApplicationStatusEnum {
  """Submitted."""
  SUBMITTED

  """Approved."""
  APPROVED

  """Accepted, but pending final approval."""
  ACCEPTED_PENDING_FINAL_APPROVAL

  """Accepted."""
  ACCEPTED

  """Rejected."""
  REJECTED

  """Expired."""
  EXPIRED

  """Error when submitting the application."""
  ERROR_SUBMITTING_APPLICATION

  """Error when accepting the offer."""
  ERROR_ACCEPTING_OFFER

  """In review."""
  IN_REVIEW

  """Upload documents requested."""
  UPLOAD_DOCUMENTS_REQUESTED

  """Unfreeze bureau requested."""
  UNFREEZE_BUREAU_REQUESTED
}

type CreditCardActiveOffer implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Credit limit for the active offer."""
  creditLimit: Float

  """APR for the active offer."""
  annualPercentageRate: Float

  """
  For approved applicants, this will be the date in which the Credit Card offer expires.
  """
  expirationDate: String

  """
  Cardholder Agreement specific to the user, available when the user has an offer.
  """
  cardholderAgreement: RequiredDocument
}

type CreditCardAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditCardAccountEdge]
}

type CreditCardAccountEdge {
  """The item at the end of the edge"""
  node: CreditCardAccount
}

type CreditCardAccount implements Node & TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The status of the Credit Card account."""
  status: CreditCardAccountStatusEnum

  """
  Will return `true` if the user's active account has had a credit card issued and the credit card has not yet been activated.
  """
  hasUnactivatedCard: Boolean!

  """The Credit Card account's APR."""
  annualPercentageRate: Float

  """The Credit Card account's credit limit."""
  creditLimit: Float

  """The account's current balance."""
  currentBalance: Float

  """The account's available credit."""
  availableCredit: Float

  """The minimum payment amount due for the current statement period."""
  minimumPaymentAmount: Float

  """The due date for the account's current statement period."""
  paymentDueDate: String

  """
  Will return a list of `CreditCard`s or `null` if there are no cards associated to the account. Optional input
  to filter based on card type (physical or virtual), default will return both.
  """
  cards(cardType: CreditCardTypeEnum): CreditCardConnection

  """
  Will return the user's last issued `CreditCard` or `null` if there isn't one.
  """
  activeCard: CreditCard

  """
  Will return a list of settled `SpendActivityEntry`s or `null` if there are no settled transactions associated ot the account.
  """
  pendingTransactions(first: Int, after: String): CreditCardTransactionConnection @deprecated(reason: "Use creditCardProductLandingPage.transactions instead.")

  """
  Will return a list of settled `SpendActivityEntry`s or `null` if there are no settled transactions associated ot the account.
  """
  settledTransactions(first: Int, after: String): CreditCardTransactionConnection @deprecated(reason: "Use creditCardProductLandingPage.transactions instead.")

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String

  """The remaining statement balance for the active Credit Card account."""
  remainingStatementBalance: String

  """
  The Spend promotional message for checking accounts to be displayed on the Credit Card screen.
  """
  checkingMarketingCard: SpendPromotionalMessage @deprecated(reason: "Checking account marketing card is no longer used.")

  """Details for the Credit Card Product Landing Page"""
  creditCardProductLandingPage: CreditCardProductLandingPage
}

enum CreditCardAccountStatusEnum {
  """Active"""
  ACTIVE

  """Suspended"""
  SUSPENDED

  """Closed"""
  CLOSED
}

type CreditCardOnboardingContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Content for the Start Application Screen"""
  startApplicationScreen: CreditCardOnboardingStartApplicationScreen!

  """Content for the Application Status Screen"""
  applicationStatusScreen: CreditCardOnboardingApplicationStatusScreen!

  """AppLink for Document Upload Status"""
  uploadDocumentLink: AppLink
}

type CreditCardOnboardingStartApplicationScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Page title."""
  title: String!

  """Page header."""
  header: String!

  """Label for onboarding overview conent."""
  label: String!

  """Onboarding overview content."""
  content: [String!]!

  """Disclaimer for onboarding overview content."""
  disclaimer: String!

  """Copy for the CTA."""
  buttonLabel: String!
}

type CreditCardOnboardingApplicationStatusScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Page title."""
  title: String

  """Page header."""
  header: String

  """Content for step 1 (of 3)."""
  stepOne: CreditCardOnboardingApplicationStatusStepOne

  """Content for step 2 (of 3)."""
  stepTwo: CreditCardOnboardingApplicationStatusStepTwo

  """Content for step 3 (of 3)."""
  stepThree: CreditCardOnboardingApplicationStatusStepThree

  """Copy for the additional content."""
  additionalContent: String

  """Copy for the footer content."""
  footer: String!

  """Copy for the CTA."""
  buttonLabel: String!
}

type CreditCardOnboardingApplicationStatusStepOne {
  """The icon for this section"""
  icon: AppImage

  """The title for this section"""
  title: String

  """The content for the body of this section"""
  body: String

  """The content for the body of this section"""
  details: CreditCardActiveOffer
}

type CreditCardOnboardingApplicationStatusStepTwo {
  """The icon for this section"""
  icon: AppImage

  """The title for this section"""
  title: String

  """The content for the body of this section"""
  cardholderAgreement: RequiredDocument

  """The pill to indicate a document has been viewed"""
  viewedPill: AppPill

  """The pill to indicate a document has NOT been viewed"""
  notViewedPill: AppPill

  """The icon for this section error"""
  errorIcon: AppImage

  """The copy for this section error"""
  errorMessage: String
}

type CreditCardOnboardingApplicationStatusStepThree {
  """The icon for this section"""
  icon: AppImage

  """The title for this section"""
  title: String

  """The content for the body of this section"""
  termsAndConditions: RequiredDocumentsBundle
}

type CreditCardManageCardDetailsScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Will return `true` if a the queried card is currently locked."""
  isCardLocked: Boolean!

  """Mange Card Screen title."""
  pageTitle: String

  """Details pertaining to the user's Credit Card"""
  manageCardDetailsSection: ManageCardDetailsSection

  """Manage Card Actions"""
  manageCardActionsSection: [ManageCardActionSection]

  """Credit Card details for digital wallet push provisioning"""
  digitalWalletPushProvisioningCredentials: DigitalWalletPushProvisioningCredentials

  """Page content for manage card digital wallet (mobile only)"""
  digitalWalletPageContent: DigitalWalletPageContent
}

type CreditCardManageCardScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Will return `true` if a user has activated their card."""
  hasCardBeenActivated: Boolean!

  """Will return an optional `AppPill` to be displayed on the card image."""
  cardPill: AppPill

  """Mange Card Screen title."""
  pageTitle: String

  """Details pertaining to the user's Credit Card"""
  primaryCardDetails: [String!]

  """A list of credit card details."""
  cardDetails: [CreditCardDetail]

  """Manage Card Actions"""
  manageCardActions: [ManageCardActionSection]

  """Card Actions"""
  cardActions: [CreditCardManageCardAction] @deprecated(reason: "Pattern retired in favor of new design with section headers, see manageCardActions (type ManageCardActionSection) instead")

  """Credit Card details for digital wallet push provisioning"""
  digitalWalletPushProvisioningCredentials: DigitalWalletPushProvisioningCredentials

  """Page content for manage card digital wallet (mobile only)"""
  digitalWalletPageContent: DigitalWalletPageContent
}

type DigitalWalletPageContent {
  """Digital wallet page title"""
  title: String!

  """Digital wallet content header"""
  header: String

  """Digital wallet content subHeader"""
  subheader: String
}

type CreditCardDetail {
  """Card Detail label."""
  label: String!

  """Card Detail value."""
  value: String!
}

type CreditCardManageCardAction {
  """Icon for the action."""
  icon: AppImage

  """Title for the action."""
  title: String!

  """Subtitle for the action."""
  subtitle: String

  """Link for the action."""
  destination: CreditCardManageCardActionDestinationEnum

  """Label for web button."""
  buttonLabel: String
}

type ManageCardActionSection {
  """Title for the manage card section"""
  title: String!

  """Array of card actions for a specific section"""
  cardActions: [CreditCardManageCardAction]
}

type ManageCardDetailsSection {
  """Title for the manage card details section"""
  title: String!

  """Array of card details"""
  cardDetails: [String]

  """Preview image for card"""
  cardImage: AppImage
}

type DigitalWalletPushProvisioningCredentials implements Node {
  """The ID of this node"""
  id: ID!

  """The internal key of this node"""
  key: String

  """The relevant card ID"""
  cardId: String

  """The name on the user's card"""
  cardholderName: String

  """The last four numbers of the relevant card"""
  lastFour: String

  """The name of the payment network (i.e. VISA)"""
  paymentNetworkName: String
}

enum CreditCardManageCardActionDestinationEnum {
  """ACTIVATE_CARD"""
  ACTIVATE_CARD

  """STATEMENTS"""
  STATEMENTS

  """TOGGLE_LOCK_CARD"""
  TOGGLE_LOCK_CARD

  """CONTACT_SUPPORT"""
  CONTACT_SUPPORT

  """ADD_DIGITAL_WALLET"""
  ADD_DIGITAL_WALLET
}

type CreditCardRewardsPortalScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Content for the Rewards Portal Summary component."""
  summary: CreditCardRewardsSummary

  """Standard Rewards overview section."""
  standardRewardsOverview: CreditCardStandardRewardsProgramOverview

  """Owners Rewards overview section."""
  ownersRewardsOverview: CreditCardOwnersRewardsProgramOverview

  """An array of AppLinks for documents to display on the Rewards Portal."""
  documents: [AppLink]

  """
  Temporary way of querying for the Rewards Details scren content by `programId`.
  """
  rewardsDetails(programId: String!): CreditCardRewardsDetailsScreen

  """
  Temporary Node ID to use when querying for Owners Rewards on the Rewards Details screen.
  """
  ownersRewardsDetailsNodeId: ID! @deprecated(reason: "Lens built details screen before overview screen. Once overview screen is constructed, each Program will have a unique Node ID to use when navigating to the Rewards Details page.")
}

type CreditCardRewardsSummary {
  """Estimated rewards payout information for the current rewards cycle."""
  currentCycleRewardsEstimate: CreditCardRewardsOverview

  """
  Rewards payout information for the lifetime of the user's credit card account.
  """
  lifetimeRewardsOverview: CreditCardRewardsOverview

  """Information pertaining to the payout location for credit card rewards."""
  rewardsPayoutLocation: CreditCardRewardsPayoutLocationOverview
}

type CreditCardRewardsOverview {
  """Rewards overview label."""
  label: String!

  """Optional tooltip copy for a rewards overview section."""
  tooltipContent: CreditCardRewardsOverviewTooltipContent

  """
  Optional `AppPill` for display when a user has reached the maximum reward amount for a given reward cycle.
  """
  pill: AppPill

  """Rewards overview value."""
  value: String!

  """Optional subtitle."""
  subtitle: String
}

type CreditCardClosedAccountContent {
  """Title for the terminated Credit Card account screen."""
  title: String

  """Subtitle for the terminated Credit Card account screen."""
  subtitle: String

  """
  Phone number to contact Deserve on the terminated Credit Card account screen.
  """
  phoneNumber: String
}

type CreditCardSuspendedAccountContent {
  """Content for the suspended Credit Card account banner."""
  content: String

  """
  Phone number to contact Deserve on the suspended Credit Card account screen.
  """
  phoneNumber: String
}

type CreditCardRewardsOverviewTooltipContent {
  """Tooltip title. Should be `null` on web."""
  title: String

  """Tooltip content."""
  content: String!

  """Tooltip `AppLink`. Should be `null` on web."""
  link: AppLink

  """Tooltip icon."""
  icon: AppImage!
}

type CreditCardRewardsPayoutLocationOverview {
  """Rewards payout location label."""
  label: String!

  """Icon for rewards payout location."""
  icon: AppImage

  """Description of the payout account."""
  value: String!
}

type CreditCardStandardRewardsProgramOverview {
  """Standard Rewards title."""
  title: String!

  """Standard Rewards program highlights."""
  highlights: CreditCardStandardRewardsProgramHighlights
}

type CreditCardStandardRewardsProgramHighlights {
  """Standard Rewards program icon."""
  icon: AppImage

  """Standard Rewards program description."""
  description: String!

  """
  ID to use when navigating to the Rewards Details screen. If ID is `null`, do not allow users to navigate.
  """
  creditCardRewardsDetailsScreenId: ID
}

type CreditCardOwnersRewardsProgramOverview {
  """Rewards Program Title"""
  title: String!

  """Tooltip icon and content for the Owners Rewards Program Overview."""
  tooltip: CreditCardOwnersRewardsProgramOverviewTooltipContent

  """
  Highlights related to the given rewards program used to display a general overview to the user.
  """
  highlights: [CreditCardOwnersRewardsProgramHighlights]
}

type CreditCardOwnersRewardsProgramOverviewTooltipContent {
  """Owners Rewards Program Overview tooltip icon."""
  icon: AppImage!

  """Owners Rewards Program Overview tooltip copy."""
  copy: String!

  """Owners Rewards Program Overview tooltip link."""
  link: AppLink
}

type CreditCardOwnersRewardsProgramHighlights {
  """Optional title for the Rewards Program Highlight section."""
  title: String

  """Navigation link for the Rewards Program Highlight section."""
  link: CreditCardOwnersRewardsProgramHighlightLink

  """Array of programs in the owners rewards highlight list."""
  programs: [CreditCardRewardsProgramOverview]
}

type CreditCardOwnersRewardsProgramHighlightLink {
  """String to be displayed to clients."""
  title: String

  """Enum used for navigation."""
  destination: CreditCardOwnersRewardsProgramHighlightLinkEnum
}

enum CreditCardOwnersRewardsProgramHighlightLinkEnum {
  """Owned Stocks."""
  OWNED_STOCKS

  """Unowned Stocks."""
  UNOWNED_STOCKS
}

type CreditCardRewardsDetailsScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Page title."""
  title: String

  """Overview item for the Current Rewards Cycle Details Screen."""
  programOverview: CreditCardRewardsProgramOverview

  """Header for display above the transaction list."""
  header: String

  """Optional content for display above the transaction list."""
  content: String

  """Transactions for the given reward cycle for the reward program."""
  relatedTransactions: CreditCardTransactionConnection
}

type CreditCardRewardsProgramOverview implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The URL for the Security's Logo, if available."""
  securityLogoUrl: String

  """
  An optional `AppImage`, to be used in place of the `securityLogoUrl` to support Dark Mode on mobile clients for non-security logo reward program overviews (i.e. standard rewards).
  """
  logoAppImage: AppImage

  """Rewards Item title."""
  title: String!

  """Rewards Item value."""
  value: String!

  """
  Optional ID that, when present, should be used when navigating to the Credit Card Rewards Details Screen.
  """
  creditCardRewardsDetailsScreenId: ID
}

type CreditCardTransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditCardTransactionEdge]
}

type CreditCardTransactionEdge {
  cursor: String!

  """The item at the end of the edge"""
  node: SpendActivityEntry
}

type CreditCardTransaction implements Node & SpendActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The status of this activity entry."""
  status: AppPill

  """The legacy date for this activity entry."""
  date: String!

  """The formatted date for this activity entry."""
  activityDate: String!

  """The AppImage icon for this activity entry."""
  icon: AppImage

  """A short summary description for this transaction."""
  summary: String!

  """
  A friendly description for this activity entry which must be displayed to users.
  """
  description: String!

  """The merchant name where the activity entry occured."""
  merchant: String

  """A short description of the activity entry category."""
  categoryLabel: String!

  """A boolean value for whether or not the transaction is void."""
  isVoided: Boolean

  """A signed dollar amount associated with this activity, if applicable."""
  amount: Float

  """Further details for this activity entry."""
  details: SpendActivityEntryDetails

  """The date in which the transaction was made."""
  transactionDate: String! @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")

  """The date in which the transaction was settled."""
  settledDate: String @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")
}

type CreditCardWaitlistConfirmationContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The main title of the Credit Card waitlist confirmation screen."""
  title: String!

  """The subtitle of the Credit Card waitlist confirmation screen."""
  subtitle: [String]!

  """
  The Plus marketing section title of the Credit Card waitlist confirmation screen.
  """
  plusMarketingTitle: String

  """
  The Plus marketing section copy of the Credit Card waitlist confirmation screen.
  """
  plusMarketingCopy: String

  """
  The Plus trial section copy of the Credit Card waitlist confirmation screen.
  """
  plusTrialCopy: String

  """
  The Plus-related button copy, if applicable, on the Credit Card waitlist confirmation screen.
  """
  plusCtaCopy: String

  """A link to the informational content page for Credit Card."""
  learnMoreLink: AppLink
}

type CreditCardRewardsProgramBreakdown implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Rewards Program Breakdown title."""
  title: String

  """Rewards Program Breakdown subtitle."""
  subtitle: String

  """Array of programs in the owners rewards highlight list."""
  programs: CreditCardRewardsProgramOverviewConnection
}

type CreditCardRewardsProgramOverviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditCardRewardsProgramOverviewEdge]
}

type CreditCardRewardsProgramOverviewEdge {
  """The item at the end of the edge"""
  node: CreditCardRewardsProgramOverview
}

type CreditCardWaitlistMarketingBanner implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The headline for the Credit Card marketing banner."""
  bannerHeadline: String @deprecated(reason: "Marketing banner abandoned.")

  """The copy for the Credit Card marketing banner."""
  bannerCopy: String @deprecated(reason: "Marketing banner abandoned.")

  """The AppLink for the Credit Card marketing banner."""
  bannerLink: AppLink @deprecated(reason: "Marketing banner abandoned.")
}

type CreditCardEarlyAccessContent {
  """Credit Card Early Access Banner icon."""
  icon: AppImage

  """Credit Card Early Access Banner title."""
  title: String

  """Credit Card Early Access Banner content."""
  content: String!

  """Credit Card Early Access Banner link."""
  link: AppLink
}

type CreditCardSelectRewardDestinationContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Title."""
  title: String

  """Description."""
  description: String

  """Dropdown placeholder."""
  placeholder: String

  """A list of valid reward payout locations."""
  destinationOptions: [CreditCardRewardDestinationOption]

  """Button Label."""
  buttonLabel: String!
}

type CreditCardRewardDestinationOption implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Transfer Participant display name."""
  name: String!
}

type CreditCardWaitlistMarketingScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The main title of the Credit Card marketing screen."""
  title: String

  """The subtitle of the Credit Card marketing screen."""
  subtitle: String

  """The main copy for the Credit Card marketing screen."""
  mainCopy: [String]!

  """
  The title for the Plus marketing section of the Credit Card marketing screen.
  """
  plusCopyTitle: String

  """
  The body copy for the Plus marketing section of the Credit Card marketing screen.
  """
  plusCopyBody: String

  """The waitlist message copy for the Credit Card marketing screen."""
  waitlistCopy: String

  """Button copy relating to the Credit Card marketing screen."""
  confirmationCtaCopy: String!

  """Primary Credit Card marketing CTA label, typically "Apply Now"."""
  primaryCta: ConfirmationCtaLabelDestination

  """The first tool tip copy for the Credit Card marketing screen."""
  firstTooltipCopy: String

  """The second tool tip copy for the Credit Card marketing screen."""
  secondTooltipCopy: String

  """The third tool tip copy for the Credit Card marketing screen."""
  thirdTooltipCopy: String

  """The final marketing header text for the Credit Card marketing screen."""
  finalMarketingHeader: String

  """
  The final marketing subheader text for the Credit Card marketing screen.
  """
  finalMarketingSubHeader: String

  """
  The additional links to be added on to the Credit Card apply now marketing screen.
  """
  additionalInfoLinks: [AppLink]

  """A link to the informational content page for Credit Card."""
  learnMoreLink: AppLink
}

type CreditCardMarketingPerk {
  """The title that summarizes a perk of the Credit Card."""
  title: String!

  """The description of a perk of the Credit Card."""
  description: String!

  """The tooltip with more details about a perk of the Credit Card."""
  tooltip: String
}

type CreditCardApplyNowMarketingScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The primary title for the Credit Card apply now screen as an array of strings.
  """
  title: [String!]!

  """The tooltip for the primary title of the Credit Card apply now screen."""
  titleTooltip: String!

  """The subtitle for the Credit Card apply now screen."""
  subtitle: String!

  """An array of perks that describe the features of the Credit Card."""
  perks: [CreditCardMarketingPerk!]!

  """The label for the primary CTA button to allow users to apply now."""
  primaryCtaLabel: String!

  """
  The additional links to be added on to the Credit Card apply now marketing screen.
  """
  additionalInfoLinks: [AppLink]

  """A link to the informational content page for Credit Card."""
  learnMoreLink: AppLink
}

type ConfirmationCtaLabelDestination {
  """The label to display for the Credit Card marketing CTA button."""
  buttonLabel: String!

  """
  The associated destination enum value to send users when they click the Credit Card marketing CTA button.
  """
  destination: ConfirmationCtaDestinationEnum
}

enum CreditCardWaitlistConfirmationContentPhase {
  """DEEPLINK_ONLY_PHASE"""
  DEEPLINK_ONLY_PHASE

  """ON_SPEND_TAB_PHASE"""
  ON_SPEND_TAB_PHASE
}

enum ConfirmationCtaDestinationEnum {
  """CREDIT_CARD_APPLICATION"""
  CREDIT_CARD_APPLICATION

  """PLUS_ENROLLMENT"""
  PLUS_ENROLLMENT

  """OPEN_INVEST_ACCOUNT"""
  OPEN_INVEST_ACCOUNT
}

type CreditCardProductLandingPage implements ProductAccountLandingPage {
  """The title for the Credit Card Product Landing Page"""
  title: String

  """The header for the Credit Card Product Landing Page"""
  header: ProductAccountLandingPageHeader

  """The account details for the Credit Card Product Landing Page"""
  accountDetails: [TabularDataItem]

  """
  An array of informational banners for the Credit Card Product Landing Page
  """
  banners: [InformationBanner]

  """The graph details for the Credit Card Product Landing Page"""
  graphDetails: CreditCardLandingPageGraphDetails

  """
  A card with a value prop display and related details for the Credit Card Product Landing Page
  """
  valuePropCard: ValuePropCard

  """A card with credit card details and actions"""
  detailsCard: CreditCardLandingPageDetailsCard

  """An array of the disclosures for the Credit Card Product Landing Page"""
  disclosures: [AppRichTextDisclosureLink]

  """
  The mobile floating action button details for the Credit Card Product Landing Page
  """
  floatingActionButton: AppNavigationItem

  """Credit card transactions for the Credit Card Product Landing Page"""
  transactions(first: Int, after: String): CommonTransactionEntryConnection

  """
  Copy to be displayed when there are no transactions on the Credit Card Product Landing Page
  """
  transactionsEmptyState: CommonTransactionsEmptyState

  """
  Card(s) to be shown for promotions that may require additional action or just be less important
  """
  promotionCards: [AppCard!]

  """
  Card(s) to be shown in a more prominent location (such as closer to the top of the page) for active or more important promotions, these may or may not require additional actions
  """
  priorityPromotionCards: [AppCard!]
}

type CreditCardLandingPageGraphDetails {
  """(Web only) The title for the Credit Card Graph Details"""
  title: String

  """(Mobile only) The tooltip for the Credit Card Graph Details"""
  tooltip: AppTooltip

  """The credit limit for the Credit Card Graph"""
  creditLimit: String

  """The current balance for the Credit Card Graph"""
  currentBalance: String

  """The percentage for the Credit Card Graph"""
  percentage: Float

  """The description for the Credit Card Graph Details"""
  description: String
}

type CreditCardLandingPageDetailsCard {
  """The title for the Credit Card Details Card"""
  title: String

  """
  Returns copy when the user's card is activated and the user can lock or unlock their card; Clients should not show the label OR switch if this is null
  """
  lockCardLabel: String

  """The details about the Credit Card"""
  details: [TabularDataItem]
}

type CreditCardCommonTransactionMetadata implements CommonTransactionMetadata {
  """The ID on Credit Card Common Transaction Metadata"""
  id: ID!

  """The reward tier pill on Credit Card Common Transaction Metadata"""
  rewardTierPill: CreditCardRewardsAppPill
}

type Crypto implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  Crypto feature flag. If true, show crypto related features. If false, hide them from UI.
  """
  isEnabled: Boolean!

  """
  Boolean for checking if the user is eligible to use crypto or create a crypto account.
  """
  isEligible: Boolean!

  """Whether the waitlist phase has started or not."""
  isWaitlistEligible: Boolean! @deprecated(reason: "Crypto waitlist is deprecated.")

  """Whether the user is in the crypto waitlist or not."""
  isOnCryptoWaitlist: Boolean! @deprecated(reason: "Crypto waitlist is deprecated.")

  """Returns a list of Crypto Assets for the Crypto research tab."""
  screenCrypto(first: Int, after: String, sort: [CryptoSortOptionInput!] = [{type: VOLUME, direction: DESC}]): CryptoScreenerConnection!

  """Returns a list of Crypto System Pies."""
  screenCryptoSystemPies(first: Int, after: String): CryptoSystemPiesConnection!

  """Boolean for if the user has a crypto account."""
  hasCryptoAccount: Boolean!
}

type CryptoSystemPiesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CryptoSystemPiesConnectionEdge]

  """Total number of crypto system pies."""
  total: Int
}

type CryptoSystemPiesConnectionEdge {
  """The item at the end of the edge."""
  node: CryptoSystemPie

  """A cursor for use in pagination"""
  cursor: String!
}

type CryptoSystemPie implements Node & Sliceable & Pie & ChartableSlice {
  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  An identifier for this system pie that is stable across development environments.
  """
  key: String!

  """A boolean flag that is true if the pie contains crypto slices."""
  containsCrypto: Boolean!

  """A disclosure statement for this pie."""
  disclosure: String

  """The time that this node was created in ISO 8601 format."""
  created: String

  """The time that this node was last modified in ISO 8601 format."""
  modified: String

  """The type of the sliceable."""
  type: SliceableTypeEnum!

  """
  Indicates if this pie is currently active and available to be added to other pies.
  """
  isActive: Boolean!

  """The name of this pie."""
  name: String!

  """The description of this pie."""
  description: String

  """The list of slices that belong to this pie."""
  slices: [Slice!]!

  """A summary description of the slices in this pie."""
  summary(includeHtml: Boolean, includeMarkdown: Boolean): String

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(onlyAccountId: ID): [PortfolioSlice!]!

  """The chart data for the crypto system pie. Intraday is ignored for pies"""
  chartData(
    range: TimeRangeInput

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """
  Analysis on the composition of this pie. Value is null if the pie has greater than 500 securities, or when analysis is unavilable.
  """
  analysis: PieAnalysis

  """True if the pie belongs to the viewing user."""
  isOwnPie: Boolean!

  """The current status of the system pie."""
  status: SystemPieStatusEnum!

  """
  A list of methodology details used to create this pie. Value will be null when no information is available.
  """
  methodology: [String!]

  """
  A description of the frequency at which the composition of this pie is updated. Value will be null when no information is available.
  """
  updateFrequency: String

  """If available, a URL to a logo image that represents the pie."""
  logoUrl: String

  """
  If available, a URL to a feature image that represents the pie. The best-fitting image to the requested width/height constraints will be returned, but specific dimensions are not guaranteed.
  """
  featureUrl(width: Int = 500, height: Int = 200): String

  """Performance information for the system pie."""
  performance: PiePerformance

  """
  A list of states that where this pie is restricted and shouldn't be allowed.
  Ex. NY restricts trading of certain coins so if NY was in the restrictions array
  we shouldn't display this pie to user in the state of NY
  """
  restrictions: [CryptoAssetRestrictionEnum!]

  """An array of AppPills that match any restrictions the pie might have."""
  restrictionPills: [AppPill!]

  """Experimental. Generates an edit model representation of the pie."""
  editModel(mode: PieEditModelModeEnum): String!

  """
  Aggregated fundamentals data for the pie. Value is null when fundamentals data is unavailable.
  """
  fundamentals: PieFundamentals @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """
  A time-series of backtested performance for the pie. Value is null if no backtested performance is available.
  """
  backtestedPerformance(period: PieHistoricalPeriodEnum!): [BacktestedPiePerformance!] @deprecated(reason: "Superceded by the `analysis` field, use that instead.")
}

enum CryptoSortTypeEnum {
  """Name"""
  NAME

  """Price"""
  PRICE

  """Market Cap"""
  MARKET_CAP

  """Volume"""
  VOLUME

  """Circulating Supply"""
  SUPPLY

  """1 Year Price Change"""
  PRICE_CHANGE_1Y

  """2 Year Price Change"""
  PRICE_CHANGE_2Y

  """5 Year Price Change"""
  PRICE_CHANGE_5Y
}

input CryptoSortOptionInput {
  """A sort type."""
  type: CryptoSortTypeEnum!

  """A sort direction."""
  direction: SortDirectionEnum!
}

type CryptoScreenerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CryptoScreenerEdge]

  """Total number of cryptocurrencies"""
  total: Int
}

type CryptoScreenerEdge {
  """The item at the end of the edge."""
  node: CryptoAsset

  """A cursor for use in pagination"""
  cursor: String!
}

type CryptoAsset implements Security & Sliceable & Node & ChartableSlice {
  """
  Legacy ID which, when decoded, resolves to `CRYPTO:ID`. Used for legacy Pie functionality.
  """
  legacyId: String!

  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """The internal key of this node."""
  key: String

  """The type of the sliceable."""
  type: SliceableTypeEnum!

  """
  Indicates if this crypto asset is currently active and available to be added to pies. True when the `status` is `ACTIVE`, false otherwise.
  """
  isActive: Boolean!

  """The current status of the crypto asset."""
  status: SecurityStatusEnum!

  """The ticker symbol for this crypto asset."""
  symbol: String!

  """The name of the crypto asset."""
  name: String!

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(onlyAccountId: ID): [PortfolioSlice!]!

  """
  The category path for this secuirty in the category hierarchy. An empty list means that the crypto asset is currently uncategorized.
  """
  category: [String!]!

  """
  The name of the market or exchange on which the crypto asset is listed. Value is null when data is unavailable.
  """
  market: String

  """
  Profile information for the crypto asset. Value is null when data is unavailable.
  """
  profile: SecurityProfile

  """
  Fundamentals data for the crypto asset. Value is null when data is unavailable.
  """
  fundamentals: Fundamentals @deprecated(reason: "Not used for Crypto")

  """
  Latest-available delayed market quote data for the crypto asset. Value is null when data is unavailable.
  """
  quote: Quote

  """
  Latest-available delayed market quote data for the crypto asset. Value is null when data is unavailable.
  """
  latestQuote: Quote

  """
  The percent difference in price compared to a historical point. Value is null when data is unavailable.
  """
  priceChange(period: HistoricalQuotePeriodEnum!): PriceChange

  """The chart data for the crypto asset"""
  chartData(range: TimeRangeInput, initialValueForBacktesting: Float): ChartableSliceData!

  """
  A time-series of historical quote data for the crypto asset. Value is null when market data is unavailable.
  """
  historicalQuotes(period: HistoricalQuotePeriodEnum, range: TimeRangeInput, interval: TimeIntervalEnum, dailyInChronologicalOrder: Boolean): [HistoricalQuote!]

  """
  A time-series of quote data with intraday resolution. Value is null when data is unavailable.
  """
  intradayQuotes(period: IntradayQuotePeriodEnum, interval: IntradayQuoteIntervalEnum, isCrypto: Boolean): IntradayQuoteTimeSeries

  """
  A list of news stories related to this crypto asset, sorted in reverse chronological order.
  """
  news(after: String, first: Int): NewsConnection! @deprecated(reason: "Moving to a new nullable field in case of timeouts.")

  """
  A list of news stories related to this crypto asset, sorted in reverse chronological order.
  """
  securityNews(after: String, first: Int): NewsConnection

  """
  True IF the crypto asset is marginable. Always false for crypto assets.
  """
  isMarginable: Boolean!

  """The maintenance margin requirement for a given crypto asset"""
  maintenanceMargin: Float

  """Icon representing mergin eligibility"""
  marginEligibleIcon: AppImage

  """tooltip to display margin requirement content"""
  marginRequirementTooltip: SecurityMarginTooltip!

  """tooltip to display margin requirement content"""
  marginEligibileTooltip: SecurityMarginTooltip!

  """App Pill to be displayed for the crypto asset"""
  securityPill: AppPill

  """The market capitalization, calculated using a recent share price."""
  marketCap: Float

  """Measures how many times a coin changes hands over a given time frame"""
  volume: Float

  """
  The total number of coins or tokens that are actively available for trade and are being used in the market and in general public.
  """
  circulatingSupply: Float

  """The maximum number of coins that will ever be created."""
  maxSupply: Float

  """Rate of return for the given time period."""
  performanceSummary(timePeriod: CryptoPerformanceSummaryTimePeriodEnum!): Float

  """Date cryptocurrency was created"""
  createdDate: String

  """The type of the cryptocurrency coin"""
  coinType: String

  """Status of the cryptocurrency's development"""
  developmentStatus: String

  """String that describes if the coin is open source or not"""
  openSource: String

  """How the cryptocurrency is structured"""
  orgStructure: String

  """The hash algorithm for the cryptocurrency"""
  hashAlgorithm: String

  """The link to the whitepaper for the cryptocurrency"""
  whitepaperLink: AppLink

  """The icon to display for the whitepaper link"""
  whitepaperIcon: AppImage

  """The high value in the last 52 weeks"""
  week52High: Float

  """The low value in the last 52 weeks"""
  week52Low: Float

  """The average volume in the last 10 days"""
  avgVolumeLast10Days: Float

  """The average volume in the last 30 days"""
  avgVolumeLast30Days: Float

  """The average volume in the last 90 days"""
  avgVolumeLast90Days: Float

  """The annualized percent change over the past year"""
  percentChangeAnnualized1Year: Float

  """
  The list of restrictions that the coin may have for the user. If null, there are no restrictions.
  """
  restrictions: [CryptoAssetRestrictionEnum!]

  """
  A pill representing the restrictions that the coin may have for the user. If null, there are no restrictions. Region eligibility trumps plus restrictions.
  """
  restrictionPill: AppPill
}

enum CryptoAssetRestrictionEnum {
  """NY region not eligible"""
  NY_REGION

  """Plus only"""
  PLUS
}

enum CryptoPerformanceSummaryTimePeriodEnum {
  """One year."""
  ONE_YEAR

  """Two years."""
  TWO_YEARS

  """Five years."""
  FIVE_YEARS
}

type FundScreenerConnection {
  """The current hierarchical category level."""
  currentCategory: FundSubCategory!

  """A list of edges."""
  edges: [FundScreenerEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The next hierarchical level of sub-categories."""
  subCategories: [FundSubCategory!]!

  """The approximate total number of edges in the connection."""
  total: Int!
}

"""A connection sub-category."""
type FundSubCategory {
  """The category path in the category hierarchy."""
  category: [String!]!

  """The approximate total number of edges within the sub-category."""
  count: Int!
}

"""An edge in a connection."""
type FundScreenerEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Fund
}

"""A sort option."""
input FundSortOptionInput {
  """A sort direction."""
  direction: SortDirectionEnum!

  """A sort type."""
  type: FundSortTypeEnum!
}

"""A limit option."""
input FundLimitOptionInput {
  """
  Whether the limit should be inclusive of the minimum and/or maximum values. Default is true.
  """
  inclusive: Boolean = true

  """A maximum limit."""
  max: Float

  """A minimum limit."""
  min: Float

  """A limit type."""
  type: FundLimitTypeEnum!
}

"""A fund limit type."""
enum FundLimitTypeEnum {
  """Dividend yield"""
  FUND_DIVIDEND_YIELD

  """Net expense ratio"""
  FUND_NET_EXPENSE_RATIO

  """Return 1Y"""
  FUND_PERFORMANCE_1Y

  """Return 3Y"""
  FUND_PERFORMANCE_3Y

  """Return 5Y"""
  FUND_PERFORMANCE_5Y

  """Return 10Y"""
  FUND_PERFORMANCE_10Y

  """Return since inception"""
  FUND_PERFORMANCE_SI

  """Total assets"""
  FUND_TOTAL_ASSETS
}

"""A fund sort type."""
enum FundSortTypeEnum {
  """Fund category"""
  FUND_CATEGORY

  """Dividend yield"""
  FUND_DIVIDEND_YIELD

  """Net expense ratio"""
  FUND_NET_EXPENSE_RATIO

  """Return 1Y"""
  FUND_PERFORMANCE_1Y

  """Return 3Y"""
  FUND_PERFORMANCE_3Y

  """Return 5Y"""
  FUND_PERFORMANCE_5Y

  """Return 10Y"""
  FUND_PERFORMANCE_10Y

  """Return since inception"""
  FUND_PERFORMANCE_SI

  """Total assets"""
  FUND_TOTAL_ASSETS

  """Name"""
  NAME

  """Price percent change 1M"""
  PRICE_CHANGE_1M

  """Price percent change 1W"""
  PRICE_CHANGE_1W

  """Price percent change 1Y"""
  PRICE_CHANGE_1Y

  """Price percent change 2Y"""
  PRICE_CHANGE_2Y

  """Price percent change 3M"""
  PRICE_CHANGE_3M

  """Price percent change 3Y"""
  PRICE_CHANGE_3Y @deprecated(reason: "No longer supported by new upstream data source. Use `PRICE_CHANGE_2Y` instead.")

  """Price percent change 5Y"""
  PRICE_CHANGE_5Y

  """Price percent change 6M"""
  PRICE_CHANGE_6M

  """Annualized price percent change 1Y"""
  PRICE_CHANGE_ANNUALIZED_1Y

  """Annualized price percent change 2Y"""
  PRICE_CHANGE_ANNUALIZED_2Y

  """Annualized price percent change 3Y"""
  PRICE_CHANGE_ANNUALIZED_3Y @deprecated(reason: "No longer supported by new upstream data source. Use `PRICE_CHANGE_ANNUALIZED_2Y` instead.")

  """Annualized price percent change 5Y"""
  PRICE_CHANGE_ANNUALIZED_5Y

  """Price percent change YTD"""
  PRICE_CHANGE_YTD

  """Symbol"""
  SYMBOL
}

type FundingSources implements Node {
  """The ID of this node."""
  id: ID!

  """Flag to determine if account has any funding sources."""
  hasFundingSources: Boolean

  """Retrieve all funding sources linked to this investment account."""
  fundingSourcesGroup(after: String, first: Int): FundingSourceConnection
}

"""A connection to a list of funding sources group."""
type FundingSourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FundingSourceEdge]
}

type FundingSourceEdge {
  """The item at the end of the edge."""
  node: FundingSourceAccount

  """A cursor for use in pagination."""
  cursor: String!
}

type FundingSourceAccount implements Node & TransferParticipant {
  """The id of this node."""
  id: ID!

  """Funding source status."""
  status: FundingSourceStatusEnum

  """Funding source routing number."""
  routingNumber: String

  """Funding source external name."""
  externalName: String

  """Funding source account number."""
  accountNumber: String

  """Funding source creation date."""
  createdAt: String

  """Funding source last updated date."""
  updatedAt: String

  """
  Funding source verification type - used to differentiate how the funding source was verified.
  """
  verificationType: FundingSourceVerificationTypeEnum

  """Logo URL for the funding source."""
  logoUrl: String

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String
}

enum FundingSourceVerificationTypeEnum {
  """
  PLAID_SAME_DAY_MICRODEPOSIT - Verification happens after user manually enters microdeposit amounts.
  """
  PLAID_SAME_DAY_MICRODEPOSIT

  """
  PLAID_AUTOMATIC_MICRODEPOSIT - Verification happens asynchronously thorugh plaid.
  """
  PLAID_AUTOMATIC_MICRODEPOSIT

  """PLAID_INSTANT"""
  PLAID_INSTANT

  """ADMIN"""
  ADMIN

  """APEX_MICRODEPOSIT"""
  APEX_MICRODEPOSIT

  """LSB_MICRODEPOSIT"""
  LSB_MICRODEPOSIT
}

enum FundingSourceStatusEnum {
  """
  PENDING - Funding source has not been authenticated yet and is awaiting full authentication. If a funding source is awaiting on microdeposit authentication, it will have this status.
  """
  PENDING

  """
  ACTIVE - Funding source is ready for use. It has account and routing numbers.
  """
  ACTIVE

  """
  LOCKED - Funding source is locked from use. Usually because of fraud concerns.
  """
  LOCKED

  """ARCHIVED - Funding source has been archived and is unusable."""
  ARCHIVED

  """
  EXPIRING - Funding source access token is about to expire within 7 days. User should go through Link Update Mode re-authentication soon.
  """
  EXPIRING

  """
  REAUTHENTICATION_REQUIRED - Funding source access token has expired and needs to be re-authenticated through Link update mode.
  """
  REAUTHENTICATION_REQUIRED
}

type OverviewPromotions {
  """The header for the home overview promotions section"""
  header: RichTextContent

  """Promotional cards to be shown in a carousel"""
  cards: [AppCard!]
}

enum DividendTrackerDataPeriod {
  LAST_YEAR
  LAST_12_MONTHS
  THIS_YEAR
  NEXT_12_MONTHS
}

type Dividends {
  """
  The cacheId is a composite key of the accountId and period and helps
  cache the data on the FE.
  """
  cacheId: String!

  """
  A type containing summary information about a PortfolioSlice's dividends.
  """
  dividendSummary: DividendSummary!

  """Contains performance data for the PortfolioSlice's dividends."""
  dividendPerformance: [DividendDataPoint!]!

  """
  A connection of DividendPositions that are currently in the user account.
  """
  currentPositions(first: Int, after: String): PositionConnection

  """A connection of upcoming dividends."""
  upcomingDividends(first: Int, after: String): UpcomingDividendsConnection

  """Disclosure for portfolio dividends page."""
  disclosure: AppRichTextDisclosureLink!
}

type UpcomingDividendsConnection {
  pageInfo: PageInfo!
  edges: [UpcomingDividendEdge]
  total: Int
}

type UpcomingDividendEdge {
  """The node at the end edge."""
  node: UpcomingDividend

  """A cursor for use in pagination"""
  cursor: String!
}

type UpcomingDividend {
  """
  The ex date for the upcoming dividend formatted as Jan 1st, 2024 or Jan, 2024 depending on the status.
  """
  exDividendDate: String!

  """
  The payment date for the upcoming dividend formatted as Jan 1st 2024, or Jan, 2024 depending on the status.
  """
  payDate: String

  """The security that is paying the dividend."""
  security: Security

  """The number of shares the user owns of the security."""
  numOfShares: Float

  """The amount per share the user will receive."""
  dividendPerShare: Float

  """The total amount the user will receive."""
  paymentAmount: String!

  """An AppPill representing the status of the dividend."""
  dividendStatus: AppPill
}

type DividendSummary {
  """The total amount of dividend income earned for the user's account"""
  totalIncomeEarned: String!

  """
  The total amount of dividends credited to the user's account for the time range
  """
  totalPaidForTimeRange: String!

  """
  The total amount of dividends expected to be credited to the user's account for the time range
  """
  totalUpcomingForTimeRange: String!

  """
  The total amount of confirmed upcoming dividends, basically upcoming dividends with a status of 'pending'.
  """
  totalConfirmedForTimeRange: String!

  """The average amount of dividend income per month."""
  averageMonthlyIncome: String!
}

type DividendTopEarner {
  """The security that is paying the dividend."""
  security: Position @deprecated(reason: "Utilize `securityRef` instead.")

  """A reference to the security that paid out the dividends."""
  securityRef: SecurityReference!

  """
  The amount of dividend income earned for the user's account in the data point's time period.
  """
  amount: Float!
}

type DividendDataPoint {
  groupedBy: DividendGroupedByEnum!
  label: String!
  paid: Float!
  total: Float!
  pending: Float!
  upcoming: Float!
  topEarners: [DividendTopEarner]!
}

enum DividendGroupedByEnum {
  YEAR
  MONTH
}

"""Dividend Frequency Enum"""
enum DividendFrequencyEnum {
  """Bi-monthly"""
  BIMONTHLY

  """Monthly"""
  MONTHLY

  """Quarterly"""
  QUARTERLY

  """Semi-Annual"""
  SEMI_ANNUAL

  """Annual"""
  ANNUAL

  """Trimesterly"""
  TRIMESTERLY

  """Weekly"""
  WEEKLY

  """Irregular"""
  IRREGULAR

  """Never Issued"""
  NEVER_ISSUED

  """Other"""
  OTHER
}

"""Dividend Yield Level Enum"""
enum PeRatioLevelEnum {
  """High"""
  HIGH

  """Medium High"""
  MEDIUM_HIGH

  """Medium"""
  MEDIUM

  """Medium Low"""
  MEDIUM_LOW

  """Low"""
  LOW
}

type FundFundamentals {
  """A description of the relative asset allocations within the fund."""
  assetAllocations: [FundAllocationInfo!]

  """The fund category."""
  category: String @deprecated(reason: "Obsolete. Use `category` on `Fund` instead.")

  """A description of the fund."""
  description: String

  """The inception date of the fund."""
  inceptionDate: String

  """
  True if the fund is an index fund; false otherwise. Value is null when unknown.
  """
  isIndexFund: Boolean

  """The net expense ratio, expressed as a percentage."""
  netExpenseRatio: Float

  """
  A numeric grading of the net expense ratio, from 1-5 (from low to high).
  """
  netExpenseRatioGrade: Float

  """The net expense ratio bucketized into five levels, from low to high."""
  netExpenseRatioLevel: NetExpenseRatioLevelEnum

  """
  The fund performance for the most recent one year. Value is null when the time period predates the fund.
  """
  performance1y: FundPerformanceInfo

  """
  The fund performance for the most recent three years. Value is null when the time period predates the fund.
  """
  performance3y: FundPerformanceInfo

  """
  The fund performance for the most recent five years. Value is null when the time period predates the fund.
  """
  performance5y: FundPerformanceInfo

  """
  The fund performance for the most recent ten years. Value is null when the time period predates the fund.
  """
  performance10y: FundPerformanceInfo

  """
  The fund performance since inception. Value is null when data is not available.
  """
  performanceSinceInception: FundPerformanceInfo

  """Information about the top two fund holdings."""
  topHoldings: [FundHoldingInfo!]

  """The total amount of assets managed in the fund."""
  totalAssets: Float

  """The total number of holdings."""
  totalNumberOfHoldings: Int
}

"""Information about an asset allocation within a fund."""
type FundAllocationInfo {
  """The name of the asset type."""
  name: String

  """The asset allocation, expressed as a percentage."""
  percentage: Float
}

"""A net expense ratio level."""
enum NetExpenseRatioLevelEnum {
  """High"""
  HIGH

  """Low"""
  LOW

  """Medium"""
  MEDIUM

  """Medium-High"""
  MEDIUM_HIGH

  """Medium-Low"""
  MEDIUM_LOW
}

"""Information about a fund's performance over a period of time."""
type FundPerformanceInfo {
  """The net-asset-value annual return."""
  annualReturnNav: Float!

  """The as-of date for the performance figure."""
  asOfDate: String!
}

"""Information about a specific fund holding."""
type FundHoldingInfo {
  """The name of the holding."""
  name: String

  """The number of shares held."""
  quantity: Float

  """The stock symbol of the holding."""
  symbol: String

  """
  The portion of the fund designated to the holding, expressed as a percentage.
  """
  weighting: Float

  """The URL of the holding's logo."""
  logoUrl: String
}

"""Represents a fund security."""
type Fund implements ChartableSlice & Node & Security & Sliceable {
  """
  The category path for this secuirty in the category hierarchy. An empty list means that the security is currently uncategorized.
  """
  category: [String!]!

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is one month."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 10, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """
  The category path for this fund in the category hierarchy. An empty list means that the fund is currently uncategorized.
  """
  fundCategory: [String!]!

  """
  Information about fund document filings. Value is null when data is not available.
  """
  fundFilings: FundFilings

  """Fund fundamentals data. Value is null when data is not available."""
  fundFundamentals: FundFundamentals

  """
  Fundamentals data for the security. Value is null when data is unavailable.
  """
  fundamentals: Fundamentals

  """
  A time-series of historical quote data for the security. Value is null when market data is unavailable.
  """
  historicalQuotes(
    """
    This flag exists to correct a legacy issue. By default, for daily intervals only, data will be returned in reverse chronological order (which is inconsistent with the rest of the API). Clients should opt-in to receiving daily data in chronological order by setting this argument to true. This argument will eventually be removed once all clients are corrected to expect daily data in chronological order.
    """
    dailyInChronologicalOrder: Boolean = false

    """
    An interval length over which to aggregate the quote data. Default is days. Dividend and split data is not aggregated if an interval longer than days is selected.
    """
    interval: TimeIntervalEnum = DAY

    """A preset time range option. Supercedes `range` if both are specified."""
    period: HistoricalQuotePeriodEnum

    """
    A time range over which to retrieve historical quotes. Default is one month.
    """
    range: TimeRangeInput = {inclusive: true, length: {amount: 1, unit: MONTHS}}
  ): [HistoricalQuote!]

  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  A time-series of quote data with intraday resolution. Value is null when data is unavailable.
  """
  intradayQuotes(
    """
    An interval length over which to aggregate the quote data. Default is one hour.
    """
    interval: IntradayQuoteIntervalEnum = ONE_HOUR

    """Whether or not the security is a crypto currency."""
    isCrypto: Boolean = false

    """
    A time period over which to retrieve intraday quotes. Default is today.
    """
    period: IntradayQuotePeriodEnum = LATEST_DAY
  ): IntradayQuoteTimeSeries

  """
  Indicates if this security is currently active and available to be added to pies. True when the `status` is `ACTIVE`, false otherwise.
  """
  isActive: Boolean!

  """True IF the security is marginable"""
  isMarginable: Boolean!

  """
  Latest-available delayed market quote data for the security. Value is null when data is unavailable.
  """
  latestQuote: Quote

  """The maintenance margin requirement for a given security"""
  maintenanceMargin: Float

  """tooltip to display margin requirement content"""
  marginEligibileTooltip: SecurityMarginTooltip!

  """Icon representing mergin eligibility"""
  marginEligibleIcon: AppImage

  """tooltip to display margin requirement content"""
  marginRequirementTooltip: SecurityMarginTooltip!

  """
  The name of the market or exchange on which the security is listed. Value is null when data is unavailable.
  """
  market: String

  """The name of the security."""
  name: String!

  """
  A list of news stories related to this security, sorted in reverse chronological order.
  """
  news(after: String, first: Int): NewsConnection! @deprecated(reason: "Moving to a new nullable field in case of timeouts.")

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(
    """
    When provided, filter for portfolio locations only within the specified account.
    """
    onlyAccountId: ID
  ): [PortfolioSlice!]!

  """
  The percent difference in price compared to a historical point. Value is null when data is unavailable.
  """
  priceChange(
    """A preset time range option."""
    period: HistoricalQuotePeriodEnum!
  ): PriceChange

  """
  Profile information for the security. Value is null when data is unavailable.
  """
  profile: SecurityProfile

  """
  Latest-available delayed market quote data for the security. Value is null when data is unavailable.
  """
  quote: Quote

  """
  A list of news stories related to this security, sorted in reverse chronological order.
  """
  securityNews(after: String, first: Int): NewsConnection

  """App Pill to be displayed for the security"""
  securityPill: AppPill

  """The current status of the security."""
  status: SecurityStatusEnum!

  """The ticker symbol for this security."""
  symbol: String!

  """The type of the sliceable."""
  type: SliceableTypeEnum!
}

"""Filings information specific to funds."""
type FundFilings {
  """
  The most recent available document filed for Rule 485(b). Value is null when unavailable.
  """
  last485b: SecurityFiling
}

"""A security document filed with the SEC."""
type SecurityFiling {
  """A description of the document. Value is null when unavailable."""
  description: String

  """The filing date of the document. Value is null when unavailable."""
  filingDate: String

  """
  The document group associated with the document type. Value is null when unavailable.
  """
  group: String

  """A URL to an HTML version of the document."""
  htmlUrl: String!

  """The number of pages in the document. Value is null when unavailable."""
  pages: Int

  """A URL to a PDF version of the document."""
  pdfUrl: String!

  """The document type."""
  type: String!
}

type Fundamentals implements Node {
  """The unique identifier of the Node."""
  id: ID!

  """The date and time that the fundamentals were retrieved."""
  asOfTime: String

  """The market capitalization, calculated using a recent share price."""
  marketCap: Float

  """
  Display shortened market capitalization, calculated using a recent share price.
  """
  marketCapShort: String

  """The number of shares outstanding."""
  sharesOutstanding: Float

  """Shortened number of shares outstanding."""
  sharesOutstandingShort: String

  """The earnings per share for the latest fiscal period earnings."""
  eps: Float

  """The current price divided by the latest earnings per share."""
  peRatio: Float

  """A numeric grading of the P/E ratio, from 1-5 (from low to high)."""
  peRatioGrade: Float

  """The P/E ratio bucketized into five levels, from low to high."""
  peRatioLevel: PeRatioLevelEnum

  """The date on which the 52-week high price occurred."""
  week52HighDate: String

  """The 52-week high price."""
  week52HighPrice: Float

  """The date on which the 52-week low price occurred."""
  week52LowDate: String

  """The 52-week low price."""
  week52LowPrice: Float

  """The 52-week range"""
  week52range: Float

  """The forward annual dividend rate amount."""
  dividendRate: Float

  """The dividend yield, expressed as a percentage."""
  dividendYield: Float

  """The dividend frequency."""
  dividendFrequency: DividendFrequencyEnum

  """The price to sales ratio."""
  priceToSales: Float

  """The 5 year beta - the security risk vs market risk"""
  beta: Float

  """Display shortened average daily volume"""
  averageDailyVolumeShort: String
}

"""A historical quote time period."""
enum HistoricalQuotePeriodEnum {
  """5 years"""
  FIVE_YEARS

  """1 month"""
  ONE_MONTH

  """1 week"""
  ONE_WEEK

  """1 year"""
  ONE_YEAR

  """6 months"""
  SIX_MONTHS

  """3 months"""
  THREE_MONTHS

  """3 years"""
  THREE_YEARS @deprecated(reason: "No longer supported by new upstream data source. Use `TWO_YEARS` instead.")

  """2 years"""
  TWO_YEARS

  """Year to date"""
  YEAR_TO_DATE

  """All ~ Max is 10 years"""
  ALL
}

"""An intraday quote period."""
enum IntradayQuotePeriodEnum {
  """Latest day"""
  LATEST_DAY

  """Latest week"""
  LATEST_WEEK

  """One week"""
  ONE_WEEK @deprecated(reason: "Now means the same thing as `LATEST_WEEK`. Use that instead.")

  """Today"""
  TODAY @deprecated(reason: "Now means the same thing as `LATEST_DAY`. Use that instead.")
}

"""An intraday quote interval."""
enum IntradayQuoteIntervalEnum {
  """Five minute intervals"""
  FIVE_MINUTE

  """One hour intervals"""
  ONE_HOUR

  """One minute intervals"""
  ONE_MINUTE

  """Ten minute intervals"""
  TEN_MINUTE

  """Thirty minute intervals"""
  THIRTY_MINUTE

  """Two minute intervals"""
  TWO_MINUTE
}

"""Represents an equity security."""
type Equity implements ChartableSlice & Node & Security & Sliceable {
  """
  The category path for this secuirty in the category hierarchy. An empty list means that the security is currently uncategorized.
  """
  category: [String!]!

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is one month."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 10, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """
  Fundamentals data for the security. Value is null when data is unavailable.
  """
  fundamentals: Fundamentals

  """
  A time-series of historical quote data for the security. Value is null when market data is unavailable.
  """
  historicalQuotes(
    """
    This flag exists to correct a legacy issue. By default, for daily intervals only, data will be returned in reverse chronological order (which is inconsistent with the rest of the API). Clients should opt-in to receiving daily data in chronological order by setting this argument to true. This argument will eventually be removed once all clients are corrected to expect daily data in chronological order.
    """
    dailyInChronologicalOrder: Boolean = false

    """
    An interval length over which to aggregate the quote data. Default is days. Dividend and split data is not aggregated if an interval longer than days is selected.
    """
    interval: TimeIntervalEnum = DAY

    """A preset time range option. Supercedes `range` if both are specified."""
    period: HistoricalQuotePeriodEnum

    """
    A time range over which to retrieve historical quotes. Default is one month.
    """
    range: TimeRangeInput = {inclusive: true, length: {amount: 1, unit: MONTHS}}
  ): [HistoricalQuote!]

  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  A time-series of quote data with intraday resolution. Value is null when data is unavailable.
  """
  intradayQuotes(
    """
    An interval length over which to aggregate the quote data. Default is one hour.
    """
    interval: IntradayQuoteIntervalEnum = ONE_HOUR

    """Whether or not the security is a crypto currency."""
    isCrypto: Boolean = false

    """
    A time period over which to retrieve intraday quotes. Default is today.
    """
    period: IntradayQuotePeriodEnum = LATEST_DAY
  ): IntradayQuoteTimeSeries

  """
  Indicates if this security is currently active and available to be added to pies. True when the `status` is `ACTIVE`, false otherwise.
  """
  isActive: Boolean!

  """True IF the security is marginable"""
  isMarginable: Boolean!

  """
  Latest-available delayed market quote data for the security. Value is null when data is unavailable.
  """
  latestQuote: Quote

  """The maintenance margin requirement for a given security"""
  maintenanceMargin: Float

  """tooltip to display margin requirement content"""
  marginEligibileTooltip: SecurityMarginTooltip!

  """Icon representing mergin eligibility"""
  marginEligibleIcon: AppImage

  """tooltip to display margin requirement content"""
  marginRequirementTooltip: SecurityMarginTooltip!

  """
  The name of the market or exchange on which the security is listed. Value is null when data is unavailable.
  """
  market: String

  """The name of the security."""
  name: String!

  """
  A list of news stories related to this security, sorted in reverse chronological order.
  """
  news(after: String, first: Int): NewsConnection! @deprecated(reason: "Moving to a new nullable field in case of timeouts.")

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(
    """
    When provided, filter for portfolio locations only within the specified account.
    """
    onlyAccountId: ID
  ): [PortfolioSlice!]!

  """
  The percent difference in price compared to a historical point. Value is null when data is unavailable.
  """
  priceChange(
    """A preset time range option."""
    period: HistoricalQuotePeriodEnum!
  ): PriceChange

  """
  Profile information for the security. Value is null when data is unavailable.
  """
  profile: SecurityProfile

  """
  Latest-available delayed market quote data for the security. Value is null when data is unavailable.
  """
  quote: Quote

  """
  A list of news stories related to this security, sorted in reverse chronological order.
  """
  securityNews(after: String, first: Int): NewsConnection

  """App Pill to be displayed for the security"""
  securityPill: AppPill

  """The current status of the security."""
  status: SecurityStatusEnum!

  """The ticker symbol for this security."""
  symbol: String!

  """The type of the sliceable."""
  type: SliceableTypeEnum!
}

"""Information about invest product"""
type InvestMarketing implements Node {
  """The ID of this node."""
  id: ID!

  """Header content"""
  headerContent: InvestMarketingContent

  """invest marketing disclaimer"""
  disclaimer: InvestMarketingContent

  """A collection of disclosures to display on the screen."""
  disclosures: InvestMarketingDisclosures!

  """invest account checklist"""
  checklist: InvestMarketingChecklist

  """invest account details"""
  details: InvestMarketingDetails

  """call to action for invest marketing content"""
  openAccountCta: AppLink @deprecated(reason: "This is the old deprecated open account cta. Clients should use the new openAccountCtaLinks instead.")

  """
  A collection of open account cta links to be displayed on the invest marketing page.
  """
  openAccountCtaLinks: [AppLink!]!

  """Set of available product options for onboarding to invest."""
  products: [OnboardingProduct!]!
}

"""Invest account marketing details"""
type InvestMarketingDetails {
  """how invest works"""
  howItWorks: InvestMarketingContent

  """invest account benefits"""
  benefits: [InvestMarketingContent]
}

"""Invest marketing content"""
type InvestMarketingContent {
  """invest marketing content title"""
  title: String

  """invest marketing image"""
  image: AppImage

  """invest marketing description"""
  description: String

  """invest marketing tooltip"""
  tooltipCopy: String @deprecated(reason: "use `marketingTooltipCopy` that supports an array of strings")

  """
  Invest marketing tooltip as an array of strings rendered as paragraphs in the tooltip
  """
  marketingTooltipCopy: [String]
}

"""Invest account access"""
type InvestMarketingChecklist {
  """checklist title"""
  title: String

  """invest checklist content"""
  checklistContent: [InvestMarketingContent]
}

"""
Contains information for the Disclosures Link and modal content for invest marketing.
"""
type InvestMarketingDisclosures {
  """The title for the disclosures Link"""
  title: String!

  """The contents for the disclosures modal that the link opens."""
  contents: [String!]!
}

"""
New Invest Marketing Screen content. Will replace the above types once clients are using it.
"""
type InvestMarketingScreen implements Node & MarketingScreen {
  """The ID of this node."""
  id: ID!

  """The header for the invest marketing screen."""
  header: String

  """The footer for the invest marketing screen."""
  footer: [String]

  """An array of the content cards for the invest marketing screen."""
  productMarketingCards: [ProductMarketingCard]

  """An array of the disclosures for the invest marketing screen."""
  disclosures: [AppRichTextDisclosureLink]
}

type InvestProductLandingPage implements ProductAccountLandingPage {
  """Unimplemented"""
  title: String

  """Unimplemented"""
  header: ProductAccountLandingPageHeader

  """Unimplemented"""
  accountDetails: [TabularDataItem]

  """Unimplemented"""
  banners: [InformationBanner]

  """Unimplemented"""
  disclosures: [AppRichTextDisclosureLink]

  """Unimplemented"""
  floatingActionButton: AppNavigationItem

  """Unimplemented"""
  transactions(first: Int, after: String): CommonTransactionEntryConnection

  """Unimplemented"""
  transactionsEmptyState: CommonTransactionsEmptyState

  """
  Card(s) to be shown for promotions that may require additional action or just be less important
  """
  promotionCards: [AppCard!]

  """
  Card(s) to be shown in a more prominent location (such as closer to the top of the page) for active or more important promotions, these may or may not require additional actions
  """
  priorityPromotionCards: [AppCard!]
}

type InvestFullyPaidLendingDisclosure {
  """Security lending disclosure introduction"""
  introduction: [String]!

  """Security lending disclosure review title"""
  reviewTitle: String!

  """Security lending disclosure review body"""
  reviewBody: [String]!

  """Security lending disclosure body"""
  disclosureBody: [String]!

  """Security lending disclosure title"""
  disclosureTitle: String!

  """Security lending disclosure opt in text"""
  optInText: String!

  """Security lending disclosure opt in default value"""
  optInDefault: Boolean!
}

type PortfolioSlicePendingCashFlow {
  """The time when the pending cash flow estimate was calculated."""
  asOfTime: String!

  """
  The cash flow dollar amount. Negative values indicate outflows, positive
  values indicate inflows.
  """
  cashFlow: Float!

  """
  When true, the estimated amount is uncertain, and the value indicates
  direction only.
  """
  directionOnly: Boolean!
}

type PortfolioSliceInvestments {
  """List of positions allocated to a portfolio slice."""
  allocatedPositions(after: String, first: Int): AllocatedPositionConnection!

  """
  This is a temporary workaround for Relay. Returns the same data as the
  `allocatedPositions` connection, but as a plain list.
  """
  allocatedPositionsList: [AllocatedPosition!]! @deprecated(reason: "This is a temporary workaround for Relay. It will be removed when it is no longer needed. Clients should use `allocatedPositions` instead if possible.")

  """
  The summarized total cost basis of the investment assets. Value is null if
  cost information is unavailable.
  """
  totalCost: TotalInvestmentsCost

  """
  The summarized total value of the investment assets. Value is null if price
  information is temporarily unavailable.
  """
  totalValue: TotalInvestmentsValue

  """
  The summarized total unrealized gain of the investment assets. Value is null
  if total cost or total value information is unavailable.
  """
  totalUnrealizedGain: TotalInvestmentsGain
}

type AllocatedPositionConnection {
  pageInfo: PageInfo!
  edges: [AllocatedPositionEdge]
  total: Int!
}

type AllocatedPositionEdge {
  cursor: String!
  node: AllocatedPosition
}

"""A position with a fraction that is allocated to a portfolio slice."""
type AllocatedPosition {
  """
  The portion of the full position that is allocated to a portfolio slice.
  """
  allocation: Float!

  """
  The portion of the full position that is allocated to a portfolio slice,
  represented as a percentage. Rounded to two decimal places. Zero indicates
  that the allocation portion is less than 0.01%.
  """
  allocationPercent: Float!

  """The full position."""
  position: Position!
}

type PortfolioSliceOrderStatus implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  True when the current order status is locked, and changes are not permitted.
  If and only if the value is true, the `lockReason` will be `UNLOCKED`.
  """
  isLocked: Boolean!

  """The specific order status lock reason."""
  lockReason: PortfolioSliceOrderLockReasonEnum!

  """True when this portfolio slice has an order set."""
  isSetOnSelf: Boolean!

  """True when a descendant of this portfolio slice has an order set."""
  isSetInDescendants: Boolean!

  """Equal to `isSetOnSelf || isSetInDescendants`."""
  isSetOnSelfOrInDescendants: Boolean!

  """
  The signed total of all buy orders existing in descendants. Value will always
  be either zero or positive. Does not include any order set on this slice.
  """
  netDescendantBuyOrderAmount: Float!

  """
  The signed total of all sell orders existing in descendants. Value will always
  be either zero or negative. Does not include any order set on this slice.
  """
  netDescendantSellOrderAmount: Float!

  """
  The sum of the signed values `netDescendantBuyOrderAmount` and
  `netDescendantSellOrderAmount`.
  """
  netDescendantOrderAmount: Float!

  """
  Details about the portfolio slice order set on this slice, when present. Value
  is null when there is no portfolio slice order set on this slice.
  """
  order: PortfolioSliceOrder
}

"""Information about a trading order for a portfolio slice."""
type PortfolioSliceOrder {
  """
  The signed cash flow requested by this order. Positive values indicate buys
  and negative values indicate sells. Value will not be zero.
  """
  cashFlow: Float!
}

"""A portfolio slice order lock reason."""
enum PortfolioSliceOrderLockReasonEnum {
  """Unlocked"""
  UNLOCKED

  """Locked by rebalance"""
  LOCKED_BY_REBALANCE

  """Locked by trading"""
  LOCKED_BY_TRADING

  """Locked by liquidation"""
  LOCKED_BY_LIQUIDATION
}

type PortfolioSlicePerformance {
  """The time span over which the performance data is calculated."""
  timeSpan: PerformanceTimeSpan! @deprecated(reason: "Now redundant. Use the dates associated with `startValue` and `endValue` instead.")

  """
  The value at the start of the time period over which performance is
  calculated.
  """
  startValue: PerformancePointValue!

  """
  The value at the end of the time period over which performance is calculated.
  """
  endValue: PerformancePointValue!

  """
  The money-weighted rate of return for this portfolio slice for the time
  period, as a percentage.
  """
  moneyWeightedRateOfReturn: Float

  """
  The total gain for the portfolio slice, caluclated by summing the capital gain
  and the earned dividends.
  """
  totalGain: Float

  """The capital gain for this portfolio slice over the time period."""
  capitalGain: Float

  """
  The total amount of dividends earned by this portfolio slice over the time
  period. Dividends are earned on the ex-date.
  """
  cumulativeDividends: Float @deprecated(reason: "Renamed for clarity. Use `earnedDividends` instead.")

  """
  The total amount of dividends earned by this portfolio slice over the time
  period. Dividends are earned on the ex-date.
  """
  earnedDividends: Float

  """
  The net total cash flow into or out-of this portfolio slice over the time
  period.
  """
  netCashFlow: Float

  """
  The number of earned dividends associated with this portfolio slice over the
  time period.
  """
  earnedDividendCount: Int

  """
  The number of cash flows associated with this portfolio slice over the time
  period.
  """
  cashFlowCount: Int
}

"""Information about the time span over which performance is calculated."""
type PerformanceTimeSpan {
  """The start time of the span."""
  start: String!

  """The end time of the span."""
  end: String!
}

"""The value of a portfolio slice at a specific point in time."""
type PerformancePointValue {
  """The date associated with the value."""
  date: String!

  """The value. Value is null when unavailable."""
  value: Float
}

type PortfolioSliceRebalanceStatus implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  True when the current rebalance status is locked, and changes are not
  permitted. If and only if the value is true, the `lockReason` will be
  `UNLOCKED`.
  """
  isLocked: Boolean!

  """The specific rebalance status lock reason."""
  lockReason: PortfolioSliceRebalanceLockReasonEnum!

  """True when this portfolio slice has a rebalance set."""
  isSetOnSelf: Boolean!

  """True when a descendant of this portfolio slice has a rebalance set."""
  isSetInDescendants: Boolean!

  """Equal to `isSetOnSelf || isSetInDescendants`."""
  isSetOnSelfOrInDescendants: Boolean!
}

"""A portfolio slice rebalance lock reason."""
enum PortfolioSliceRebalanceLockReasonEnum {
  """Unlocked"""
  UNLOCKED

  """Locked by allocation"""
  LOCKED_BY_ALLOCATION

  """Locked by order"""
  LOCKED_BY_ORDER

  """Locked by trading"""
  LOCKED_BY_TRADING

  """Locked by liquidation"""
  LOCKED_BY_LIQUIDATION
}

"""A connection of brokarage account positions."""
type PositionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PositionEdge]

  """The total number of positions in the connection."""
  total: Int!
}

"""The position edge."""
type PositionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The node at the end of the edge."""
  node: Position
}

"""An investment in a single security."""
type Position implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Dividend Information for the position."""
  dividends: PositionDividends!

  """The Invest account that owns this position."""
  investAccount: Account

  """The account that owns this position."""
  account: Account! @deprecated(reason: "Use `investAccount` instead.")

  """The security that is held."""
  positionSecurity: PositionSecurityReference!

  """Fully paid lending program entry from the position ledger."""
  fullyPaidLending: PositionFullyPaidLending

  """The security that is held."""
  security: Security @deprecated(reason: "Use `positionSecurity` instead.")

  """The share quantity currently held."""
  quantity: Float!

  """The cost basis of this position, if available."""
  cost: PositionCost

  """
  The value of this postion. Value is null when price information is
  unavailable.
  """
  value: PositionValue

  """
  The unrealized gain from this position. Value is null when cost or value are
  unavailable.
  """
  unrealizedGain: PositionGain

  """Marginability information for this position."""
  marginability: PositionMarginability
}

"""An estimated trade amount sort type."""
enum PositionSortTypeEnum {
  """Symbol"""
  SYMBOL

  """Value"""
  VALUE

  """Cost"""
  COST

  """Unrealized gain percent"""
  UNREALIZED_GAIN_PERCENT

  """Maintenance equity requirement percent"""
  MAINTENANCE_EQUITY_REQUIREMENT_PERCENT

  """Number of shares"""
  QUANTITY

  """Average share price"""
  AVERAGE_SHARE_PRICE
}

"""A sort option."""
input PositionSortOptionInput {
  """A sort type."""
  type: PositionSortTypeEnum!

  """A sort direction."""
  direction: SortDirectionEnum!
}

type PositionDividends {
  """
  The amount earned from dividends in the last 12 months returned as a formatted string.
  """
  lastTwelveMonthsPaid: String!

  """The average cost per share returned as a formatted string."""
  averageCost: String!

  """The dividend yield of the position."""
  dividendYield: Float

  """The frequency with which dividends are disbursed."""
  dividendFrequency: DividendFrequencyEnum

  """The yield on cost for the dividend position."""
  yieldOnCost: Float
}

"""The possible actions a user can perform on a Position."""
enum UserActionOnPositionEnum {
  """Move the position somewhere within the user's account."""
  MOVE

  """Liquidate the position."""
  LIQUIDATE

  """Contact Support to perform an acction on the Position."""
  CONTACT
}

"""Information about a security that may or may not be supported."""
type PositionSecurityReference {
  """The best-available descriptor for the security."""
  descriptor: String!

  """The symbol of the security, if known."""
  symbol: String

  """The security, if available."""
  security: Security
}

"""Fully paid lending program from position ledger."""
type PositionFullyPaidLending {
  """The quantity of the stock loan."""
  quantity: Float
}

"""The cost basis of a position."""
type PositionCost {
  """The cost basis."""
  cost: Float!

  """The cost divided by the total quanity."""
  averageSharePrice: Float!

  """
  Indicates if this cost basis is currently an estimation due to recent trades.
  """
  isEstimated: Boolean! @deprecated(reason: "Defunct, always returns false.")
}

"""The value of a position."""
type PositionValue {
  """The value."""
  value: Float!

  """The timestamp of the price used to calculate the position value."""
  priceDate: String!

  """
  The portion of overall investment asset value that this position represents,
  as a percentage. Value is null when the total investment value is unavailable.
  """
  percentOfTotal: Float
}

"""The unrealized gain from a position."""
type PositionGain {
  """The difference between the current value and the cost basis."""
  gain: Float!

  """The percent difference between the current value and the cost basis."""
  gainPercent: Float!
}

"""Marginability information for a postion."""
type PositionMarginability {
  """True if the position is marginable."""
  isMarginable: Boolean!

  """The maintenance equity percentage that this position requires."""
  maintenanceEquityRequirementPercent: Float!

  """The dollar amount this position contributes to total required equity."""
  maintenanceEquityRequirement: Float

  """
  If the indicated dollar amount were sold, the amount by which the maintenance
  equity requirement would be reduced.
  """
  maintenanceEquityRequirementReductionBySelling(
    """The sell amount."""
    sellAmount: Float!
  ): Float

  """The valuation as-of date for the equity requirement amount."""
  asOfDate: String
}

"""Information about a security."""
type SecurityReference implements Node {
  """The ID of the node."""
  id: ID!

  """The best-available descriptor for the security."""
  descriptor: String!

  """The symbol of the security, if known."""
  symbol: String

  """The security, if available."""
  security: Security
}

type MarginHealth {
  id: ID!

  """Margin health title."""
  title: String

  """The information banner for the margin health"""
  banner: InformationBanner

  """Current health score."""
  currentScore: MarginDetail

  """An array of health thresholds."""
  thresholds: [MarginHealthThreshold!]

  """
  Button to take users to view account holdings. Intended for use by web clients.
  """
  viewHoldingsButton: AppButton

  """
  Link to take users to view account holdings. Intended for use by mobile clients.
  """
  viewHoldingsLink: AppLink

  """Link to help center article with more information about health score."""
  learnMoreLink: AppLink

  """Breakdown of margin balance and distance to margin call."""
  breakdown: [RichTextContent!]
}

type MarginAvailableToBorrow {
  """Available to borrow title."""
  title: String

  """Details of available to borrow - withdrawal and reinvest."""
  additionalDetails: AvailableToBorrowDetails

  """Current margin loan balance detail."""
  currentBalanceDetail: MarginDetail

  """Withdrawable limit details"""
  withdrawableMaxDetail: MarginDetail

  """Reinvest limit details"""
  investableMaxDetail: MarginDetail

  """Breakdown of margin balance and impact of available to borrow."""
  breakdown: [RichTextContent!]
}

type MarginHealthThreshold {
  """Maximum threshold for the health score band."""
  thresholdMax: Float!

  """
  Minimum threshold for the health score band. Clients may only need thresholdMax to create bands.
  """
  thresholdMin: Float!

  """Health score text color - liquid semantic color naming used."""
  color: String!
}

type MarginProductLandingPage implements ProductAccountLandingPage {
  """The title for the Margin Product Landing Page"""
  title: String

  """The header for the Margin Product Landing Page"""
  header: ProductAccountLandingPageHeader

  """The account details for the Margin Product Landing Page"""
  accountDetails: [TabularDataItem]

  """An array of informational banners for the Margin Product Landing Page"""
  banners: [InformationBanner]

  """An array of the disclosures for the Margin Product Landing Page"""
  disclosures: [AppRichTextDisclosureLink]

  """
  The floating action button details for the Margin Product Landing Page (mobile only)
  """
  floatingActionButton: AppNavigationItem

  """Margin transactions for the Margin Product Landing Page"""
  transactions(first: Int, after: String): CommonTransactionEntryConnection

  """
  Copy to be displayed when there are no transactions on the Margin Product Landing Page
  """
  transactionsEmptyState: CommonTransactionsEmptyState

  """Margin landing page primary CTA (web only)"""
  primaryCta: AppNavigationItem

  """Margin landing page secondary CTA"""
  secondaryCta: AppLink

  """Margin Health section."""
  health: MarginHealth

  """Available to borrow section."""
  availableToBorrow: MarginAvailableToBorrow

  """Margin loan interest."""
  loanInterest: MarginLoanInterest

  """Text for how billing works."""
  howBillingWorks: MarginDetail

  """CTA to view activity. (web only)"""
  activityCta: AppButton

  """CTA to view statements. (web only)"""
  statementsCta: AppButton

  """A list of Borrow bills. Sorted in reverse chronological order."""
  statements(after: String, first: Int): BorrowBillConnection

  """A history of Borrow activity. Sorted in reverse chronological order."""
  activity(first: Int, after: String): BorrowActivityEntryConnection

  """
  Card(s) to be shown for promotions that may require additional action or just be less important
  """
  promotionCards: [AppCard!]

  """
  Card(s) to be shown in a more prominent location (such as closer to the top of the page) for active or more important promotions, these may or may not require additional actions
  """
  priorityPromotionCards: [AppCard!]
}

type MarginDetail {
  """Label for the value."""
  label: String!

  """Formatted value of the label."""
  labelValue: String!

  """Numeric value of the label."""
  numericValue: Float

  """
  Primary or background color of the label, if applicable - liquid semantic color naming used.
  """
  backgroundColor: String

  """
  Secondary or foreground color of the label, if applicable - liquid semantic color naming used.
  """
  foregroundColor: String

  """Tooltip to include additional context."""
  tooltip: AppTooltip
}

type MarginLoanInterest {
  """Title of the interest rate section."""
  title: String

  """A list of interest rate and billing details."""
  listItems: [ListItem!]
}

type AvailableToBorrowDetails {
  """Title of available to borrow details."""
  title: String

  """Description of available to borrow details."""
  description: [RichTextContent!]

  """Reinvest limit detail."""
  investableMaxDetail: MarginDetail

  """Withdrawable limit as a detail."""
  withdrawableMaxDetail: MarginDetail
}

type NetWorth implements Node & ChartableSlice {
  """The ID of this node"""
  id: ID!

  """Chartable data for the net worth over time"""
  chartData(
    range: TimeRangeInput

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """Chartable data for the live, most up-to-date, net worth"""
  liveNetWorth: ChartableSliceDatum

  """Tooltip for more info about net worth"""
  disclosuresTooltip: AppTooltip
}

"""Represents a sliceable or portfolio slice that has chartable data."""
interface ChartableSlice {
  """A time-series of chart data for the sliceable or portfolio slice."""
  chartData(
    """A time range over which to retrieve chart data. Default is 5 years."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 5, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float = 100
  ): ChartableSliceData!

  """The ID of this node."""
  id: ID!
}

type ChildPortfolioSlice implements ChartableSlice & Node & PortfolioSlice {
  """The account that owns this portfolio slice."""
  account: Account!

  """Child portfolio slice landing page content"""
  investProductLandingPage: InvestProductLandingPage

  """
  Information about manual orders for this slice - buying power, slice value and trade window. Value is null when manual order information is unavailable.
  """
  manualOrderBreakdown(orderDirection: ManualPortfolioSliceOrderTypeEnum): ManualOrderBreakdown

  """
  The buying power for this portfolio slice - cash, margin & total. Value is null when the balance breakdown is temporarily unavailable.
  """
  buyingPower: PortfolioSliceBuyingPower!

  """The portfolio slices in the ancestry path for this slice."""
  ancestors: [PortfolioSlice]!

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is 10 years."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 10, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """Children slices of this slice."""
  children: [ChildPortfolioSlice]!

  """
  Former children slices of this slice. Upon next trading window, the holdings allocated to each former slice will be reallocated.
  """
  deallocatedChildren: [DeallocatedChild!]!

  """
  The estimated change in value that will occur at the next trading window, due to deposits, withdrawals, rebalances, or allocation changes. Postive value indicates buy, negative value indicates sell, and zero indicates no trades. Value is null when no estimate is available.
  """
  estimatedValueChange: Float

  """The ID of this node."""
  id: ID!

  """
  Information about the investments allocated to this portfolio slice. Value is null when allocated position information is unavailable.
  """
  investments: PortfolioSliceInvestments

  """True if this is the root portfolio slice for an account."""
  isRootSlice: Boolean!

  """
  A historical time-series of market value snapshots for this portfolio slice.
  """
  netCashFlows(
    """the type of cash flows for a portfolio slice"""
    filter: NetCashFlowFilterEnum

    """
    The historical time period over which to retrieve values, anchored by the present.
    """
    period: ValueHistoryPeriodEnum
  ): [ValueSnapshot]

  """
  The current trade order status for this portfolio slice. Value is null when the status is temporarily unavilable.
  """
  orderStatus: PortfolioSliceOrderStatus

  """
  Information about a pending cash flow for this slice, if there is one. Value is null when there are no pending cash flows.
  """
  pendingCashFlow: PortfolioSlicePendingCashFlow @deprecated(reason: "Functionality has been removed. Will be removed in the future.")

  """
  The percent allocation of this slice, as an integer between 0-100 inclusive.
  """
  percentage: Int!

  """
  Performance information for this portfolio slice. Value is null when performance information is unavailable. The period must be large enough to accomodate the start and end dates provided, any range ending over a year ago will require a period of MAX.
  """
  performance(
    """The final date included in performance calculations."""
    endDate: String

    """
    The time period over which to calculate performance, anchored by the present.
    """
    period: PortfolioSlicePerformancePeriodEnum!

    """
    The first date included in performance calculations, an `endDate` is also required. Note: the `period` should be large enough to encompass the start and end dates.
    """
    startDate: String
  ): PortfolioSlicePerformance

  """
  The percent portion of value this slice represents relative to all investment holdings. Value is null when market data is unavailable.
  """
  portionOfAllValuePercent: Float

  """
  The percent portion of value this slice represents relative to the parent pie value. Value is null when the parent pie value is zero, the parent pie is unallocated, or when market data is unavailable.
  """
  portionOfParentValuePercent: Float

  """
  The current trade order status for this portfolio slice. Value is null when the status is temporarily unavilable.
  """
  rebalanceStatus: PortfolioSliceRebalanceStatus

  """
  The root portfolio slice at the top of the ancestry path for this slice.
  """
  rootAncestor: RootPortfolioSlice!

  """
  The target percent portion of value this slice represents relative to all investment holdings. Value is null when market data is unavailable.
  """
  targetPortionOfAllValuePercent: Float

  """
  The target value for this slice, equal to the total parent pie value times the slice percentage. Value is null when the parent pie is unallocated, or when market data is unavailable.
  """
  targetValue: Float

  """
  The difference between the current value and the target value. Positive numbers are overweight, and negative numbers are underweight. Value is null when the parent pie is unallocated, or when market data is unavailable.
  """
  targetValueDiff: Float

  """
  The actual value of this slice divided by its target value. Value is null when the parent pie is unallocated, or when market data is unavailable.
  """
  targetValuePercent: Float

  """
  Points to the composition of the slice (either a `Security` or a `Pie`).
  """
  to: Sliceable!

  """
  Value information for this portfolio slice. Value is null when price information is unavilable.
  """
  value: PortfolioSliceValue

  """
  A historical time-series of market value snapshots for this portfolio slice.
  """
  valueHistory(
    """
    The historical time period over which to retrieve values, anchored by the present.
    """
    period: ValueHistoryPeriodEnum!
  ): [ValueSnapshot!]! @deprecated(reason: "Use `chartData` instead")

  """
  If true, this slice is currently marked for rebalancing at the next trade window.
  """
  willRebalance: Boolean! @deprecated(reason: "Superceded by `rebalanceStatus`, use that field instead.")
}

"""Represents a former child of a portfolio slice."""
type DeallocatedChild {
  """
  The percent portion of value this slice represents relative to all investment holdings. Value is null when market data is unavailable.
  """
  portionOfAllValuePercent: Float

  """
  The percent portion of value this slice represents relative to the parent pie value. Value is null when the parent pie value is zero, or when market data is unavailable.
  """
  portionOfParentValuePercent: Float

  """
  Points to the composition of the slice (either a `Security` or a `Pie`).
  """
  to: Sliceable!

  """
  Value information for this portfolio slice. Value is null when price information is unavilable.
  """
  value: PortfolioSliceValue
}

"""cash flow types"""
enum NetCashFlowFilterEnum {
  """all cash in or out of portfolio slice"""
  ALL

  """corporate action cash in or out of portfolio slice"""
  CORPORATE_ACTION

  """crypto trade cash in or out of portfolio slice"""
  CRYPTO_TRADE

  """dividend cash in or out of portfolio slice"""
  DIVIDEND

  """slice movement cash in or out of portfolio slice"""
  SLICE_MOVEMENT

  """equity or fund trade cash in or out of portfolio slice"""
  TRADE

  """transfer cash in or out of portfolio slice"""
  TRANSFER
}

interface Pie {
  """
  Analysis on the composition of this pie. Value is null if the pie has greater than 500 securities, or when analysis is unavilable.
  """
  analysis: PieAnalysis

  """
  A time-series of backtested performance for the pie. Value is null if no backtested performance is available.
  """
  backtestedPerformance(
    """A preset time range option."""
    period: PieHistoricalPeriodEnum!
  ): [BacktestedPiePerformance!] @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is one month."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 10, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """Indicates if this pie contains crypto."""
  containsCrypto: Boolean!

  """The time that this node was created in ISO 8601 format."""
  created: String

  """The description of this pie."""
  description: String

  """A disclosure statement for this pie."""
  disclosure: String

  """Experimental. Generates an edit model representation of the pie."""
  editModel(
    """An output mode for the edit model. Default value is `NO_CLONE`."""
    mode: PieEditModelModeEnum = NO_CLONE
  ): String!

  """
  Aggregated fundamentals data for the pie. Value is null when fundamentals data is unavailable.
  """
  fundamentals: PieFundamentals @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  Indicates if this pie is currently active and available to be added to other pies.
  """
  isActive: Boolean!

  """True if the pie belongs to the viewing user."""
  isOwnPie: Boolean!

  """The time that this node was last modified in ISO 8601 format."""
  modified: String

  """The name of this pie."""
  name: String!

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(
    """
    When provided, filter for portfolio locations only within the specified account.
    """
    onlyAccountId: ID
  ): [PortfolioSlice!]!

  """The list of slices that belong to this pie."""
  slices: [Slice!]!

  """A summary description of the slices in this pie."""
  summary(
    """
    When provided and true, the string will include Markdown formatting. Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): String

  """The type of the sliceable."""
  type: SliceableTypeEnum!
}

enum PieEditModelModeEnum {
  """The edit model will output all pies as `"type": "new_pie"`."""
  CLONE_ALL

  """
  The edit model will output own pies as `"type": "new_pie"`, and all others as `"type": "old_pie"`.
  """
  CLONE_OWN

  """The edit model will output all pies as `"type": "old_pie"`."""
  NO_CLONE

  """
  The edit model will output all pies as `"type": "old_pie"`, and include full depth of the edit pie.
  """
  NO_CLONE_FULL_DEPTH
}

"""A historical pie performance time period."""
enum PieHistoricalPeriodEnum {
  """5 years"""
  FIVE_YEARS

  """1 month"""
  ONE_MONTH

  """1 year"""
  ONE_YEAR

  """3 years"""
  THREE_YEARS

  """Year to date"""
  YEAR_TO_DATE @deprecated(reason: "No longer supported.")
}

"""A portfolio slice performance period."""
enum PortfolioSlicePerformancePeriodEnum {
  """Max"""
  MAX

  """1 day"""
  ONE_DAY

  """1 week"""
  ONE_WEEK

  """1 month"""
  ONE_MONTH

  """1 quarter"""
  ONE_QUARTER

  """1 year"""
  ONE_YEAR

  """YTD"""
  YTD
}

type RootPortfolioSlice implements ChartableSlice & Node & PortfolioSlice {
  """The account that owns this portfolio slice."""
  account: Account!

  """Root portfolio slice landing page content"""
  investProductLandingPage: InvestProductLandingPage

  """
  Information about manual orders for this slice - buying power, slice value and trade window. Value is null when manual order information is unavailable.
  """
  manualOrderBreakdown(orderDirection: ManualPortfolioSliceOrderTypeEnum): ManualOrderBreakdown

  """
  The buying power for this portfolio slice - cash, margin & total. Value is null when the balance breakdown is temporarily unavailable.
  """
  buyingPower: PortfolioSliceBuyingPower!

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is 10 years."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 10, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """Children slices of this slice."""
  children: [ChildPortfolioSlice]!

  """
  Former children slices of this slice. Upon next trading window, the holdings allocated to each former slice will be reallocated.
  """
  deallocatedChildren: [DeallocatedChild!]!

  """The ID of this node."""
  id: ID!

  """
  Information about the investments allocated to this portfolio slice. Value is null when allocated position information is unavailable.
  """
  investments: PortfolioSliceInvestments

  """True if this is the root portfolio slice for an account."""
  isRootSlice: Boolean!

  """A historical time-series of portfolio slice cash flows"""
  netCashFlows(
    """the type of cash flows for a portfolio slice"""
    filter: NetCashFlowFilterEnum

    """
    The historical time period over which to retrieve values, anchored by the present.
    """
    period: ValueHistoryPeriodEnum
  ): [ValueSnapshot]

  """
  The current trade order status for this portfolio slice. Value is null when the status is temporarily unavilable.
  """
  orderStatus: PortfolioSliceOrderStatus

  """
  Information about a pending cash flow for this slice, if there is one. Value is null when there are no pending cash flows.
  """
  pendingCashFlow: PortfolioSlicePendingCashFlow @deprecated(reason: "Functionality has been removed. Will be removed in the future.")

  """
  Performance information for this portfolio slice. Value is null when performance information is unavailable. The period must be large enough to accomodate the start and end dates provided, any range ending over a year ago will require a period of MAX.
  """
  performance(
    """The final date included in performance calculations."""
    endDate: String

    """
    The time period over which to calculate performance, anchored by the present.
    """
    period: PortfolioSlicePerformancePeriodEnum!

    """
    The first date included in performance calculations, an `endDate` is also required. Note: the `period` should be large enough to encompass the start and end dates.
    """
    startDate: String
  ): PortfolioSlicePerformance

  """
  The current trade order status for this portfolio slice. Value is null when the status is temporarily unavilable.
  """
  rebalanceStatus: PortfolioSliceRebalanceStatus

  """Points to the pie that composes this slice."""
  to: UserPie!

  """
  Value information for this portfolio slice. Value is null when price information is unavilable.
  """
  value: PortfolioSliceValue

  """
  A historical time-series of market value snapshots for this portfolio slice.
  """
  valueHistory(
    """
    The historical time period over which to retrieve values, anchored by the present.
    """
    period: ValueHistoryPeriodEnum!
  ): [ValueSnapshot!]! @deprecated(reason: "Use `chartData` instead")

  """
  If true, this slice is currently marked for rebalancing at the next trade window.
  """
  willRebalance: Boolean! @deprecated(reason: "Superceded by `rebalanceStatus`, use that field instead.")

  """The stringified model for the slice"""
  stringifiedModel: String!
}

type SharedPie implements ChartableSlice & Node & Pie & Sliceable {
  """
  Analysis on the composition of this pie. Value is null if the pie has greater than 500 securities, or when analysis is unavilable.
  """
  analysis: PieAnalysis

  """
  A time-series of backtested performance for the pie. Value is null if no backtested performance is available.
  """
  backtestedPerformance(
    """A preset time range option."""
    period: PieHistoricalPeriodEnum!
  ): [BacktestedPiePerformance!] @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is one month."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 5, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """Indicates if this pie contains crypto."""
  containsCrypto: Boolean!

  """The time that this node was created in ISO 8601 format."""
  created: String

  """The description of this pie."""
  description: String

  """A disclosure statement for this pie."""
  disclosure: String

  """Experimental. Generates an edit model representation of the pie."""
  editModel(
    """An output mode for the edit model. Default value is `NO_CLONE`."""
    mode: PieEditModelModeEnum = NO_CLONE
  ): String!

  """
  Aggregated fundamentals data for the pie. Value is null when fundamentals data is unavailable.
  """
  fundamentals: PieFundamentals @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  Indicates if the sliceable is currently active and available to be added to pies, and does not contain any delisted or inactive securities.
  """
  isActive: Boolean!

  """True if the pie belongs to the viewing user."""
  isOwnPie: Boolean!

  """The time that this node was last modified in ISO 8601 format."""
  modified: String

  """The name of the sliceable."""
  name: String!

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(
    """
    When provided, filter for portfolio locations only within the specified account.
    """
    onlyAccountId: ID
  ): [PortfolioSlice!]!

  """The type of the sliceable."""
  type: SliceableTypeEnum!

  """The list of slices that belong to this pie."""
  slices: [Slice!]!

  """A summary description of the slices in this pie."""
  summary(
    """
    When provided and true, the string will include Markdown formatting. Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): String
}

type Slice {
  """
  The percent allocation of this slice, as an integer between 0-100 inclusive.
  """
  percentage: Int!

  """
  Points to the composition of the slice (either a `Security` or a `Pie`).
  """
  to: Sliceable!
}

interface Sliceable {
  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  Indicates if the sliceable is currently active and available to be added to pies.
  """
  isActive: Boolean!

  """The name of the sliceable."""
  name: String!

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(
    """
    When provided, filter for portfolio locations only within the specified account.
    """
    onlyAccountId: ID
  ): [PortfolioSlice!]!

  """The type of the sliceable."""
  type: SliceableTypeEnum!
}

"""A sliceable status."""
enum SliceableStatusEnum {
  """Active"""
  ACTIVE

  """Inactive"""
  INACTIVE

  """Delisted"""
  DELISTED
}

"""A sliceable type."""
enum SliceableTypeEnum {
  """Crypto Security"""
  CRYPTO

  """Crypto System Pie"""
  CRYPTO_SYSTEM_PIE

  """Equity Security"""
  EQUITY_SECURITY

  """Fund Security"""
  FUND_SECURITY

  """System Pie"""
  SYSTEM_PIE

  """User Pie"""
  USER_PIE

  """Shared Pie"""
  SHARED_PIE
}

type SliceableConnection {
  """A list of edges."""
  edges: [SliceableEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The approximate total number of edges in the connection."""
  total: Int!
}

"""An edge in a connection."""
type SliceableEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """A list of search match highlights."""
  highlights: [SliceableSearchHighlight!]!

  """The item at the end of the edge"""
  node: Sliceable
}

type SystemPie implements ChartableSlice & Node & Pie & Sliceable {
  """
  Analysis on the composition of this pie. Value is null if the pie has greater than 500 securities, or when analysis is unavilable.
  """
  analysis: PieAnalysis

  """
  A time-series of backtested performance for the pie. Value is null if no backtested performance is available.
  """
  backtestedPerformance(
    """A preset time range option."""
    period: PieHistoricalPeriodEnum!
  ): [BacktestedPiePerformance!] @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """
  The category path for this system pie in the category hierarchy. An empty list means that the system pie is currently uncategorized.
  """
  categorization: [String!]!

  """Details about each category in the category path."""
  categorizationDetails: [SystemPieCategoryDetails!]!

  """The categorization of this pie."""
  category: PieCategoryEnumType! @deprecated(reason: "Obsolete and will eventually be removed. Use the hierarchical `categorization` field instead.")

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is one month."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 10, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """Indicates if this pie contains crypto."""
  containsCrypto: Boolean!

  """The time that this node was created in ISO 8601 format."""
  created: String

  """The description of this pie."""
  description: String

  """A disclosure statement for this pie."""
  disclosure: String

  """Experimental. Generates an edit model representation of the pie."""
  editModel(
    """An output mode for the edit model. Default value is `NO_CLONE`."""
    mode: PieEditModelModeEnum = NO_CLONE
  ): String!

  """
  If available, a URL to a feature image that represents the pie. The best-fitting image to the requested width/height constraints will be returned, but specific dimensions are not guaranteed.
  """
  featureUrl(
    """Requested minimum height for the image. Default is `200`."""
    height: Int = 200

    """Requested minimum width for the image. Default is `500`."""
    width: Int = 500
  ): String

  """
  Aggregated fundamentals data for the pie. Value is null when fundamentals data is unavailable.
  """
  fundamentals: PieFundamentals @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """A time-series of historical performance for the system pie."""
  historicalPerformance(
    """
    An interval length over which to aggregate the performance data. Default is days.
    """
    interval: TimeIntervalEnum = DAY

    """A preset time range option. Supercedes `range` if both are specified."""
    period: PieHistoricalPeriodEnum

    """
    A time range over which to retrieve historical performance. Default is one month.
    """
    range: TimeRangeInput = {inclusive: true, length: {amount: 1, unit: MONTHS}}
  ): [HistoricalPiePerformance!] @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  Indicates if this pie is currently active and available to be added to other pies.
  """
  isActive: Boolean!

  """True if the pie belongs to the viewing user."""
  isOwnPie: Boolean!

  """
  An identifier for this system pie that is stable across development environments.
  """
  key: String!

  """If available, a URL to a logo image that represents the pie."""
  logoUrl: String

  """
  A list of methodology details used to create this pie. Value will be null when no information is available.
  """
  methodology: [String!]

  """The time that this node was last modified in ISO 8601 format."""
  modified: String

  """The name of this pie."""
  name: String!

  """Performance information for the system pie."""
  performance: PiePerformance

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(
    """
    When provided, filter for portfolio locations only within the specified account.
    """
    onlyAccountId: ID
  ): [PortfolioSlice!]!

  """
  A numeric risk grading for this pie, from 1-5 (from least to most risky). Value will be null if unavailble.
  """
  riskGrade: Float @deprecated(reason: "Superceded by the `riskGrade` field on `PiePerformance`. This value will always be null.")

  """The list of slices that belong to this pie."""
  slices: [Slice!]!

  """The current status of the system pie."""
  status: SystemPieStatusEnum!

  """A summary description of the slices in this pie."""
  summary(
    """
    When provided and true, the string will include Markdown formatting. Currently only includes `**`.
    """
    includeMarkdown: Boolean
    includeHtml: Boolean
  ): String

  """The type of the sliceable."""
  type: SliceableTypeEnum!

  """
  A description of the frequency at which the composition of this pie is updated. Value will be null when no information is available.
  """
  updateFrequency: String
}

"""A pie categorization."""
enum PieCategoryEnumType {
  """Fixed Income"""
  FIXED_INCOME

  """Hedge Fund Replication"""
  HEDGE_FUND_REPLICATION

  """Index"""
  INDEX

  """Industries"""
  INDUSTRIES

  """Simple"""
  SIMPLE

  """Target Date"""
  TARGET_DATE

  """M1 Total Portfolios"""
  TOTAL_PORTFOLIOS

  """Uncategorized"""
  UNCATEGORIZED
}

type SystemPieScreenerConnection {
  """The current hierarchical category level."""
  currentCategory: SystemPieSubCategory!

  """A list of edges."""
  edges: [SystemPieScreenerEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The next hierarchical level of sub-categories."""
  subCategories: [SystemPieSubCategory!]!

  """The approximate total number of edges in the connection."""
  total: Int!
}

"""An edge in a connection."""
type SystemPieScreenerEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: SystemPie
}

"""A connection sub-category."""
type SystemPieSubCategory {
  """The category path in the category hierarchy."""
  category: [String!]!

  """Details about the system pie sub-category."""
  categoryDetails: [SystemPieCategoryDetails!]!

  """The approximate total number of edges within the sub-category."""
  count: Int!
}

"""A sort option."""
input SystemPieSortOptionInput {
  """A sort direction."""
  direction: SortDirectionEnum!

  """A sort type."""
  type: SystemPieSortTypeEnum!
}

"""A system pie status."""
enum SystemPieStatusEnum {
  """Active"""
  ACTIVE

  """Inactive"""
  INACTIVE
}

"""A limit option."""
input SystemPieLimitOptionInput {
  """
  Whether the limit should be inclusive of the minimum and/or maximum values. Default is true.
  """
  inclusive: Boolean = true

  """A maximum limit."""
  max: Float

  """A minimum limit."""
  min: Float

  """A limit type."""
  type: SystemPieLimitTypeEnum!
}

"""A system pie sort type."""
enum SystemPieLimitTypeEnum {
  """Return 1M"""
  PERFORMANCE_1M

  """Return 1Y"""
  PERFORMANCE_1Y

  """Return 3Y"""
  PERFORMANCE_3Y

  """Return 5Y"""
  PERFORMANCE_5Y

  """Return year-to-date"""
  PERFORMANCE_YTD

  """Risk grade"""
  RISK_GRADE

  """Volatility"""
  VOLATILITY
}

"""A system pie sort type."""
enum SystemPieSortTypeEnum {
  """Category"""
  CATEGORY

  """Name"""
  NAME

  """Return 1M"""
  PERFORMANCE_1M

  """Return 1Y"""
  PERFORMANCE_1Y

  """Return 3Y"""
  PERFORMANCE_3Y

  """Return 5Y"""
  PERFORMANCE_5Y

  """Return year-to-date"""
  PERFORMANCE_YTD

  """Risk grade"""
  RISK_GRADE

  """Volatility"""
  VOLATILITY
}

"""A time length."""
input TimeLengthInput {
  """An amount of time in the unit specified."""
  amount: Int!

  """A time length unit."""
  unit: TimeLengthUnitEnum!
}

"""A time length unit."""
enum TimeLengthUnitEnum {
  """Days"""
  DAYS

  """Months"""
  MONTHS

  """Weeks"""
  WEEKS

  """Years"""
  YEARS
}

"""A time range."""
input TimeRangeInput {
  """
  An end date to anchor the end of the range. Must be in the format `YYYY-MM-DD`.
  """
  end: String

  """
  Whether the range should be inclusive of the start/end dates. Default is true.
  """
  inclusive: Boolean = true

  """
  A fixed length of time for the range. Ignored if both `start` and `end` are also specified.
  """
  length: TimeLengthInput

  """
  A start date to anchor the beginning of the range. Must be in the format `YYYY-MM-DD`.
  """
  start: String
}

type UserPie implements ChartableSlice & Node & Pie & Sliceable {
  """
  Analysis on the composition of this pie. Value is null if the pie has greater than 500 securities, or when analysis is unavilable.
  """
  analysis: PieAnalysis

  """A list of ancestry paths for this pie."""
  ancestors: [[UserPie!]!]!

  """
  A time-series of backtested performance for the pie. Value is null if no backtested performance is available.
  """
  backtestedPerformance(
    """A preset time range option."""
    period: PieHistoricalPeriodEnum!
  ): [BacktestedPiePerformance!] @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is one month."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 10, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """Indicates if this pie contains crypto."""
  containsCrypto: Boolean!

  """The time that this node was created in ISO 8601 format."""
  created: String

  """The description of this pie."""
  description: String

  """A disclosure statement for this pie."""
  disclosure: String

  """Experimental. Generates an edit model representation of the pie."""
  editModel(
    """An output mode for the edit model. Default value is `NO_CLONE`."""
    mode: PieEditModelModeEnum = NO_CLONE
  ): String!

  """
  Aggregated fundamentals data for the pie. Value is null when fundamentals data is unavailable.
  """
  fundamentals: PieFundamentals @deprecated(reason: "Superceded by the `analysis` field, use that instead.")

  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  Indicates if this pie is currently active and available to be added to other pies.
  """
  isActive: Boolean!

  """True if the pie is currently archived."""
  isArchived: Boolean! @deprecated(reason: "Deprecated in favor of `isActive`. Use that field instead.")

  """True if the pie belongs to the viewing user."""
  isOwnPie: Boolean!

  """The time that this node was last modified in ISO 8601 format."""
  modified: String

  """The name of this pie."""
  name: String!

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(
    """
    When provided, filter for portfolio locations only within the specified account.
    """
    onlyAccountId: ID
  ): [PortfolioSlice!]!

  """
  Experimental. Generates an share token to be used for cloning this pie to another user. Descriptions are not included. Value is null when the pie is not eligable for tokenization.
  """
  shareToken: String

  """The list of slices that belong to this pie."""
  slices: [Slice!]!

  """A summary description of the slices in this pie."""
  summary(
    """
    When provided and true, the string will include Markdown formatting. Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): String

  """The type of the sliceable."""
  type: SliceableTypeEnum!
}

type UserPieConnection {
  """A list of edges."""
  edges: [UserPieEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type UserPieEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: UserPie
}

"""A value history time period."""
enum ValueHistoryPeriodEnum {
  """Max"""
  MAX

  """1 day"""
  ONE_DAY

  """1 month"""
  ONE_MONTH

  """1 quarter"""
  ONE_QUARTER

  """1 week"""
  ONE_WEEK

  """1 year"""
  ONE_YEAR

  """ytd"""
  YTD
}

type PiePerformance {
  """The date on which the performance figures were calculated."""
  asOfDate: String!

  """The five-year total return."""
  returnFiveYearPercent: Float

  """The one-month total return."""
  returnOneMonthPercent: Float

  """The one-year total return."""
  returnOneYearPercent: Float

  """The three-year total return."""
  returnThreeYearPercent: Float

  """The year-to-date total return."""
  returnYearToDatePercent: Float

  """
  A numeric risk grading for this pie, from 1-5 (from least to most risky). Value will be null if unavailble.
  """
  riskGrade: Float

  """
  A risk level value for this pie, which corresponds to the numeric risk grade. Value will be null if unavailble.
  """
  riskLevel: PieRiskLevelEnum

  """The volatility of the pie."""
  volatility: Float
}

"""A pie risk level."""
enum PieRiskLevelEnum {
  """High"""
  HIGH

  """Low"""
  LOW

  """Medium"""
  MEDIUM

  """Medium-High"""
  MEDIUM_HIGH

  """Medium-Low"""
  MEDIUM_LOW
}

type Plus implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """UI Information for Plus specific pages"""
  pages: PlusPages

  """True if a user is eligible to activate a Plus trial membership."""
  isEligibleForPlusTrial: Boolean

  """When `hasPlus` is true, information about the user's membership."""
  membershipStatus: PlusMembershipStatus

  """The Plus benefits that the user has taken advantage of"""
  benefitsUsed: PlusBenefitsUsed

  """
  The plus benefits that the user has taken advantage of. To be displayed on renewal intercept page.
  """
  benefitsUsedIntercept: PlusBenefitsUsedForIntercept

  """The current list of all plus benefits."""
  benefitsAll: PlusBenefitsAll

  """A list of highlighted plus benefits."""
  highlightedBenefits: [PlusBenefitStandard]

  """Details about the user's Plus billing information."""
  billing: PlusBilling

  """Plus information for use during onboarding."""
  onboarding: PlusOnboarding

  """
  Borrow rate discount percent. Difference between Plus and Basic borrow rate percents
  """
  borrowRateDiscountPercent: Float

  """Spend Checking interest rate percent description."""
  spendInterestRatePercentShortDescription: String

  """Spend Checking cash back rate percent."""
  spendCashBackRatePercent: Float

  """Information about pricing for new Plus members."""
  newMembershipPricing: PlusNewMembershipPricing

  """Information about renewal pricing for exisiting Plus members."""
  renewalMembershipPricing: PlusMembershipRenewalPricing

  """True if the user has M1 Plus benefits. Value is null when unknown."""
  hasPlus: Boolean

  """The content for the upsell page"""
  upsellPage(product: TransferParticipantTypeEnum): PlusUpsellPage @deprecated(reason: "Use `PlusPages.upsellPage` instead")

  """True if the user has previously had M1 Plus benefits."""
  hasExpiredPlusSubscription: Boolean @deprecated(reason: "Not used in clients")

  """
  True if the user has an active Plus membership or has previously had M1 Plus benefits.
  """
  hasActiveOrExpiredPlusSubscription: Boolean @deprecated(reason: "Not used in clients")

  """
  True if the user is currently in the grace period after Plus membership has expired.
  """
  isInPlusRenewalGracePeriod: Boolean @deprecated(reason: "Grace Period is being removed")

  """The current list of all plus benefits."""
  basicBenefitsAll: BasicBenefitsAll @deprecated(reason: "Should not be used in clients - may have been used for 5/23/23 Plus Pricing Changes release")

  """The minimum account value required for trading in multiple windows."""
  investMinAccountValueForMultipleDailyWindows: Float @deprecated(reason: "Not used in clients")

  """Spend Checking interest rate percent disclaimer."""
  spendInterestRatePercentDisclaimer: String @deprecated(reason: "Not used in clients")

  """Spend Checking interest rate percent."""
  spendInterestRatePercent: Float @deprecated(reason: "Not used in clients (kinda hard to tell but it's not actually used in web, just the description)")

  """Spend Checking interest rate percent disclaimer tooltip."""
  spendInterestRatePercentDisclaimerTooltipCopy: [String] @deprecated(reason: "Not used in clients")

  """Spend Checking cash back rate percent description."""
  spendCashBackRatePercentShortDescription: String @deprecated(reason: "Not used in clients")

  """Spend Checking cash back rate percent disclaimer."""
  spendCashBackRatePercentDisclaimer: String @deprecated(reason: "Not used in clients")

  """Multiplier for our Spend Checking interest rate vs national average."""
  spendInterestRateNationalAverageMultiplier: Float @deprecated(reason: "Not used in clients")

  """Initial state for the Plus benefit calculator."""
  benefitCalculatorInitialState: PlusBenefitCalculatorInitialState @deprecated(reason: "Not used in clients")

  """
  An optional Plus promotional message for Plus Marketing screen placement.
  """
  plusPromotionForScreen: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No additional plus data should be rendered in the UI.")

  """An optional Plus promotional message for Plus Billing screen."""
  plusPromotionForBillingScreen: PlusPromotionalMessage @deprecated(reason: "Not used in clients")

  """An optional Plus promotional message for Plus Membershipscreen."""
  plusPromotionForMembershipScreen: PlusPromotionalMessage @deprecated(reason: "Not used in clients")
}

type PlusPages {
  """Plus information for the edit payment method screen"""
  editPaymentMethodPage: PlusEditPaymentMethodPage

  """The content for the upsell page"""
  upsellPage(product: TransferParticipantTypeEnum): PlusUpsellPage @deprecated(reason: "Plus has been sunsetted and upsells removed")

  """The main plus membership page with information about Plus"""
  plusMembershipPage: PlusMembershipPage

  """The confirmation page for joining Plus"""
  trialConfirmationPage: PlusTrialConfirmationPage

  """The view all benefits screen"""
  viewAllBenefitsScreen: PlusViewAllBenefitsScreen
}

type PlusTrialConfirmationPage {
  """The page title of the join Plus page"""
  pageTitle: String!

  """The icon to be displayed at top of the join confirmation"""
  icon: AppImage

  """The title of subscription amount"""
  title: String!

  """The subtitle of renewal duration"""
  subtitle: String

  """The disclaimer explaining plus billing"""
  disclaimer: String!

  """The cta for confirming the Plus memebership"""
  cta: String!
}

type PlusMembershipPage {
  """The header of the membership page for non-plus users"""
  marketingHeader: PlusMembershipPageMarketingHeader

  """The header of the membership page for plus users"""
  header: PlusMembershipPageHeader

  """The section with the options for payment for plus"""
  paymentOptionsSection: PlusMembershipPagePaymentOptionsSection!

  """The section of the Plus Membership Page with membership details"""
  membershipDetailsSection: PlusMembershipPageMembershipDetailsSection!

  """The section of Plus Membership that lists the plus billing activity"""
  billingHistorySection: PlusMembershipPageBillingHistorySection

  """The section of the plus membership page that lists benefits"""
  benefitsSection: PlusMembershipPageBenefitsSection

  """A testimonial about plus"""
  testimonial: Testimonial

  """View referrals terms link"""
  termsLink: AppLink
}

type Testimonial {
  """A quote by the person giving the testimonial"""
  quote: [String!]

  """The name or description of the person giving the testimonial"""
  witness: String

  """An optional disclaimer to accompany the testimonial"""
  disclaimer: String
}

type PlusMembershipPageMarketingHeader {
  """The title for the marketing header"""
  title: String!

  """The illustration to be displayed in the header"""
  illustration: AppImage

  """cta button text"""
  ctaLabel: String!

  """Disclosure text for the m1 plus terms"""
  disclosureText: RichTextContent!

  """The upsell for why the user should sign up for plus"""
  membershipUpsell: PlusMembershipDetailsUpsell
}

type PlusMembershipPageHeader {
  """Title copy"""
  title: String!

  """Header icon"""
  icon: AppImage

  """Header subtitles"""
  subtitle: [String]
}

type PlusMembershipPagePaymentOptionsSection {
  """Header for flexible payment options"""
  header: String!

  """Options for plus payment on the plus membership page"""
  options: [PlusMembershipPagePaymentOption!]
}

type PlusMembershipPagePaymentOption {
  """primary string of the payment option"""
  primary: String!

  """optional additional string of payment option"""
  secondary: String
}

type PlusMembershipPageMembershipDetailsSection {
  """The header of the Plus Membership Details Section"""
  header: String!

  """An array of details about the user's plus membership"""
  details: [PlusMembershipPageMembershipDetail!]

  """A link to the edit payment method page"""
  editLink: AppLink

  """The icon for the edit link"""
  editLinkIcon: AppImage

  """
  The label for the auto-renew toggle - clients should not show the label OR switch if this is null
  """
  autoRenewLabel: String

  """
  A paragraph of content that can provide context to the user's plus membership
  """
  content: String

  """A list of disclosures for Plus"""
  disclosures: [AppDisclosureLink!]

  """A list of links for Plus"""
  links: [AppLink]
}

type PlusMembershipPageMembershipDetail {
  """The label for the detail"""
  label: String!

  """The value for the detail"""
  value: String!
}

type PlusMembershipPageBillingHistorySection {
  """Billing history table title"""
  title: String!

  """Information about the user's Plus membership billing activity."""
  billingActivity(first: Int, after: String): PlusBillHistoryEntryConnection
}

type PlusMembershipPageBenefitsSection {
  """The optional icon for the benefits section"""
  icon: AppImage

  """The title of the benefits section"""
  title: String!

  """The optional subtitle of the benefits section"""
  subtitle: String

  """Copy for the button that routes to view all benefits screen"""
  buttonCopy: String!

  """
  The list of benefits for plus depending on the plus status of the user and what benefits they've used
  """
  benefitsList: [PlusMembershipPageBenefit!]
}

type PlusViewAllBenefitsScreen {
  """The title of the view all benefits screen"""
  title: String!

  """An array of subtitles"""
  subtitle: [String]

  """Icon shown above the subtitles"""
  icon: AppImage

  """Copy for the button that routes back to plus details page"""
  buttonCopy: String

  """The list of the 4 standard/core plus benefits"""
  benefitsList: [PlusMembershipPageBenefit!]
}

type PlusMembershipPageBenefit {
  """The title of the benefit"""
  title: String

  """The optional subtitle of the benefit"""
  subtitle: String

  """The optional icon for the benefit"""
  icon: AppImage

  """The description of the benefit"""
  description: String

  """The optional tooltip of the benefit shown beside the title"""
  tooltip: AppTooltip
}

type PlusEditPaymentMethodPage {
  """The header at top of edit payment method screen"""
  header: String

  """The title for the edit payment method screen"""
  title: String

  """The subtitle of the edit payment method screen"""
  subtitle: String

  """The available billing cycles for the user"""
  billingCycles: PlusEditPaymentMethodPageBillingCycles

  """
  The payment methods section with content describing the payment methods available to the user
  """
  paymentMethods: PlusEditPaymentMethodPagePaymentMethods

  """
  The pill next to the default payment method on the edit payment method screen
  """
  selectedPaymentMethodPill: AppPill

  """The disclosures for the edit payment method screen"""
  disclosures: [AppDisclosureLink!]!

  """
  The confimation cta on the submit button for edit payment method screen
  """
  confirmationCta: String!
}

type PlusEditPaymentMethodPageBillingCycles {
  """The header of the billing cycle options"""
  header: String!

  """The options of the billing cycle"""
  cycles: [PlusEditPaymentMethodPageBillingCycle!]
}

type PlusEditPaymentMethodPageBillingCycle {
  """The title of the billing cycle"""
  title: String!

  """The subtitle of the billing cycle"""
  subtitle: String!

  """The pill text for the billing cycle"""
  pill: AppPill

  """Whether the billing cycle is default or not"""
  isDefault: Boolean!

  """The enum type for the billing cycle"""
  type: PlusBillingCycleSubscriptionType!
}

"""Plus billing cycle subscription types."""
enum PlusBillingCycleSubscriptionType {
  """Annual plus subscription."""
  ANNUAL

  """Monthly plus subscription."""
  MONTHLY
}

type PlusEditPaymentMethodPagePaymentMethods {
  """The header for the payment methods section"""
  header: String!

  """The payment methods for the user"""
  methods: [PlusEditPaymentMethodPagePaymentMethod!]
}

type PlusEditPaymentMethodPagePaymentMethod implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The title of the payment method"""
  title: String!

  """The subtitle of the payment method"""
  subtitle: String

  """The icon for the payment method"""
  icon: AppImage

  """Whether the payment method is default or not"""
  isDefault: Boolean!

  """The enum type for the payment method"""
  type: PlusPaymentMethodType!
}

"""Plus membership payment method types."""
enum PlusPaymentMethodType {
  """Spend Checking account"""
  SPEND @deprecated(reason: "Spend is being deprecated")

  """Credit Card"""
  CARD @deprecated(reason: "Credit Card no longer allowed")

  """Invest account"""
  INVEST

  """High-Yield Savings account"""
  SAVE
}

type PlusUpsellPage {
  """The title of the upsell page"""
  title: String!

  """Terms for plus"""
  terms: [RichTextContent!]!

  """The experience choices for plus"""
  experiences: [PlusUpsellExperience!]!

  """The label for the CTA button"""
  ctaLabel: String!

  """The illustration for the page"""
  illustration: AppImage
}

type PlusUpsellExperience {
  """An enum indicating the type of experience"""
  type: PlusUpsellExperienceTypeEnum!

  """The name that describes the plus experience"""
  title: String!

  """The icon for the title of the plus experience"""
  titleIcon: AppImage

  """The subtitle for the plus experience"""
  subtitle: String

  """The tooltip for the subtitle"""
  subtitleTooltip: String @deprecated(reason: "use `subtitleTooltipV2` instead")

  """The tooltip for the subtitle - uses the new tooltip component"""
  subtitleTooltipV2: AppTooltip

  """The title for the list of benefits for the plus experience"""
  benefitsTitle: String

  """The list of benefits for the plus experience"""
  benefits: [PlusBenefitStandard!]

  """A link to more information about the plus benefits"""
  benefitsLink: AppLink
}

enum PlusUpsellExperienceTypeEnum {
  STANDARD
  PLUS
}

"""Information about billing for Plus memberships."""
type PlusBilling implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Information about the user's Plus membership billing activity."""
  billingActivity(first: Int, after: String): PlusBillHistoryEntryConnection

  """Information about all payment methods for on platform billing."""
  paymentMethodOptionsOnPlatform: PlusBillingPaymentMethodOptions

  """The disclaimer for plus payment option to auto-renew."""
  disclaimer: PlusBillingDisclaimer

  """An array of AppLinks with links for support articles."""
  supportLinks: [AppLink]

  """A string to display auto renewal disclaimer text on clients"""
  autoRenewalDisclaimerSubHeader: String

  """A string to display one time payment disclaimer text on clients"""
  oneTimePaymentDisclaimer: String

  """a string to display one time payment cta text on clients"""
  oneTimePaymentCTAText: String

  """Information about all payment methods."""
  paymentMethodOptions: PlusPaymentMethodOptions @deprecated(reason: "This is from before we could handle on platform billing. Use `PlusBilling.paymentMethodOptionsOnPlatform` instead")
}

"""Information about Plus for use during the onboarding funnel."""
type PlusOnboarding {
  """A list of Plus only benefits."""
  plusBenefitsList: [PlusBenefitForOnboarding] @deprecated(reason: "Not used in clients, use `Plus.benefitsAll` instead")

  """Invest product plus upsell"""
  investPlusUpsell: PlusOnboardingUpsell

  """Invest product plus upsell"""
  spendPlusUpsell: PlusOnboardingUpsell @deprecated(reason: "Spend is being deprecated")
}

type PlusOnboardingUpsell {
  """Plus Upsell Header"""
  plusUpsellHeader: PlusUpsellHeader

  """Plus Upsell Title"""
  plusUpsellTitle: PlusUpsellTitle

  """List of Plus product benefits"""
  plusUpsellBenefits: [PlusUpsellBenefit]

  """Upsell disclaimer"""
  plusUpsellDisclaimer: String

  """Plus Trial Disclaimer"""
  plusUpsellTrialDisclaimer: PlusUpsellTrialDisclaimer

  """Plus Trial link"""
  plusTrialEnrollmentText: String

  """Plus skip trial link"""
  skipPlusTrialEnrollmentText: String
}

"""Plus Upsell Header text and tooltip"""
type PlusUpsellHeader {
  header: String
  tooltip: PlusBenefitTooltip
}

"""Plus Upsell title and icon"""
type PlusUpsellTitle {
  title: String
  icon: AppImage
}

"""A list of product benefits to be shown during Plus onboarding."""
type PlusUpsellBenefit {
  """A description of product plus benenfit"""
  description: String

  """Benefit available without M1 Plus"""
  standardBenefit: String

  """Benefit available with M1 Plus"""
  plusBenefit: String

  """Benefit accessibility text available without M1 Plus"""
  standardBenefitLabel: String

  """Benefit accessibility text available with M1 Plus"""
  plusBenefitLabel: String

  """Benefit Tooltip"""
  tooltip: PlusBenefitTooltip
}

"""Trial disclaimer with link"""
type PlusUpsellTrialDisclaimer {
  """Trial disclaimer text"""
  text: String

  """Trial disclaimer link"""
  link: AppLink
}

"""Payment method for new on platform billing."""
type PlusBillingPaymentMethod implements Node {
  """The id for this node."""
  id: ID!

  """Label describing the payment method."""
  label: String!

  """Account value or account information depending on the type."""
  description: String

  """AppPill that displays for user to easily see the account's status."""
  status: AppPill

  """The icon that will be rendered on the clients."""
  icon: AppImage

  """value for clients to check if payment method is Braintree"""
  isBraintreePayment: Boolean @deprecated(reason: "Credit Card payments are no longer supported. Will return false")

  """A warning message that shows up on the confirm payment screen."""
  warning: AppInformationalMessageCard

  """
  When false, the account balance / cash balance are below the price to renew Plus
  """
  isOneTimePaymentMethodValid: Boolean! @deprecated(reason: "One Time payments are no longer supported. Will return false")
}

"""Information about the various on platform billing options"""
type PlusBillingPaymentMethodOptions {
  """Returns the current payment method for the plus subscription."""
  currentPaymentMethod: PlusBillingPaymentMethod

  """Returns all available payment methods for plus subscription."""
  allPaymentOptions: [PlusBillingPaymentMethod]

  """Message to show if the user has no available payment methods"""
  paymentOptionsUnavailableMessage: AppInformationalMessageCard
}

"""The disclaimer and tooltip for auto-renew plus payment."""
type PlusBillingDisclaimer {
  """The message shown to the user for the disclaimer."""
  text: String!

  """The tooltip for the disclaimer to display."""
  tooltip: PlusBillingDisclaimerTooltip
}

type PlusBillingDisclaimerTooltip {
  """The icon entry point to the disclaimer tooltip."""
  icon: AppImage!

  """An array of strings to be parsed by the client"""
  text: [String]!
}

type PlusBillHistoryEntryConnection {
  pageInfo: PageInfo!
  edges: [PlusBillHistoryEntryEdge]
}

type PlusBillHistoryEntryEdge {
  cursor: String!
  node: PlusBillHistoryEntry
}

"""Information about a Plus billing period that has ended."""
type PlusBillHistoryEntry {
  """A description about the bill."""
  title: String

  """Information about the payment method that was charged."""
  subTitle: String

  """A "pill" communicating payment status for this entry."""
  statusPill: AppPill

  """The date on which the transaction was executed."""
  chargeDate: String

  """The total amount charged."""
  amountDescription: String
}

"""
A set of copy and tooltip explaining the free trial period and membership details.
"""
type PlusMembershipDetailsUpsell {
  """Copy for the title."""
  title: String

  """A tooltip description of plus membership."""
  tooltip: PlusBenefitTooltip @deprecated(reason: "use `tooltipV2` instead")

  """
  The tooltip description of plus membership - uses the new AppTooltip component
  """
  tooltipV2: AppTooltip

  """Copy for the subtitle."""
  subtitle: String
}

"""An Array to render a list of all plus benefits"""
type PlusBenefitsAll {
  """An Array of PlusBenefitStandard objects."""
  benefits: [PlusBenefitStandard]

  """One plus benefit to be highlighted in designs."""
  highlightedBenefit(
    """
    When provided and true, the string will include Markdown formatting.
    Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): PlusBenefitStandard
}

"""An object to render a list of the plus benefits used by the user"""
type PlusBenefitsUsed {
  """The title text for container showing benefits."""
  title: String!

  """The text for the button to view all plus benefits."""
  viewAllButton: String

  """An Array of PlusBenefit objects."""
  benefits: [PlusBenefit]
}

"""
An object showing plus benefits used to be displayed when a user is turning off auto-renew.
"""
type PlusBenefitsUsedForIntercept {
  """The title for the modal showing the benefits."""
  title: String!

  """The text for the modal showing all benefits."""
  ctaText: String!

  """The subtitle with a link for the modal showing the benefits."""
  subtitle: AppLink @deprecated(reason: "Use `ctaText` instead.")

  """An array of PlusBenefits that the user has taken advantage of."""
  benefits: [PlusBenefit]

  """The text to be rendered on the primary action button."""
  primaryButton: String

  """The text to be rendered on the secondary action button."""
  secondaryButton: String
}

"""Benefits of plus membership to display on renewals page"""
type PlusBenefit {
  """The plus benefit title"""
  title: String!

  """The benefit offered"""
  benefit: String

  """The name of the benefit being used"""
  icon: AppImage

  """The subtext displayed for this PlusBenefit"""
  subtext: String
}

"""Standard Benefits of plus membership to display"""
type PlusBenefitStandard {
  """The plus benefit title"""
  title: String!

  """The benefit offered"""
  benefit: String!

  """The icon of the standard benefit"""
  icon: AppImage

  """The tooltip of the standard benefit"""
  tooltip: PlusBenefitTooltip @deprecated(reason: "use `tooltipV2` instead")

  """
  The tooltip of the standard benefit - uses the new AppTooltip component
  """
  tooltipV2: AppTooltip
}

"""A reference to a tooltip for display on a plus benefit."""
type PlusBenefitTooltip {
  """The icon entry point to the plus benefit tooltip"""
  icon: AppImage!

  """An array of strings to be parsed by the client"""
  text: [String]!

  """An link to display as the tooltip CTA"""
  appLink: AppLink
}

"""Information about pricing for Plus renewals."""
type PlusMembershipRenewalPricing {
  """A description of the membership price billing agreement."""
  priceAgreement: String @deprecated(reason: "Credit card payments are deprecated.")

  """A description of the membership price."""
  priceTeaser: String

  """A long description of the membership price."""
  priceDescription: String

  """A long description of the renewal date/price."""
  renewalDescription: String

  """An itemized summary for payment confirmation. Required for iOS."""
  paymentSummary: PlusMembershipPaymentSummary @deprecated(reason: "Should not be used by clients (for credit card payments which are deprecated)")

  """A "pill" communicating promotional pricing for plus renewal pricing."""
  priceHighlightPill: AppPill @deprecated(reason: "Not used in clients")

  """
  A boolean that lets the client know if this is promotional renewal pricing.
  """
  isPromotional: Boolean!

  """The default price without promotional discounts."""
  defaultPricingText: String!
}

"""Information about Plus membership pricing."""
type PlusNewMembershipPricing {
  """A short description for the standard, full-cost membership price."""
  standardPriceShortDescription: String @deprecated(reason: "Leftover from 5/23 release by Plus Pricing project, clients should not use this anymore")

  """A short description for the standard free trial duration."""
  standardFreeTrialDurationDescription: String

  """A description of the membership price billing agreement."""
  priceAgreement: String @deprecated(reason: "Only used for Braintree, which is deprecated")

  """A short summary of the membership price."""
  priceTeaser: String

  """A long description of the membership price."""
  priceDescription: String @deprecated(reason: "Not used in clients")

  """A short summary of the renewal date/price."""
  renewalTeaser: String @deprecated(reason: "Not used in clients")

  """A long description of the renewal date/price."""
  renewalDescription: String

  """
  Copy describing additional details about renewals and managing membership.
  """
  renewalAdditionalDetailsCopy: String

  """An itemized summary for payment confirmation."""
  paymentSummary: PlusMembershipPaymentSummary @deprecated(reason: "Should not be used by clients (for credit card payments which are deprecated)")

  """A set of copy + tooltip to explain plus membership details."""
  membershipDetailsUpsell: PlusMembershipDetailsUpsell
}

"""Status infomration about a Plus membership."""
type PlusMembershipStatus {
  """The date the membership started."""
  memberSince: String

  """The next renewal date."""
  nextRenewal: String

  """
  The next bill date, which may be the same as the renewal date, or 7 days after if the user is in the grace period after Plus membership expiration.
  """
  nextBillDate: String

  """
  True when the user has autorenewal turned on for their Plus membership.
  """
  hasAutoRenewalEnabled: Boolean

  """The next plus year from current plus expiration"""
  nextPlusYear: String

  """
  True when user auto renew is off and if date is within 14 days of renewal date. Or within 30 of lapsed plus subscription.
  """
  showRenewPlusNowCta: Boolean!
}

"""Deprecated. Information about the various payment types."""
type PlusPaymentMethodOptions {
  """Information about the card payment method option."""
  cardPaymentOption: PlusPaymentMethod @deprecated(reason: "Credit card as a payment option is deprecated. This will return null.")

  """Information about Spend Checking as a payment method option."""
  spendPaymentOption: PlusPaymentMethod @deprecated(reason: "This is from before we could handle on platform billing. Moving forward use paymentMethodOptionsOnPlatform")

  """Information about the currently active payment method."""
  activePaymentMethod: PlusPaymentMethod @deprecated(reason: "This is from before we could handle on platform billing. Moving forward use paymentMethodOptionsOnPlatform")
}

"""Deprecated. Information about the Plus payment method."""
type PlusPaymentMethod {
  """The payment type."""
  paymentMethodType: PlusPaymentMethodType! @deprecated(reason: "Use `paymentMethodOptionsOnPlatform` instead")

  """Label describing the payment method."""
  label: String! @deprecated(reason: "Use `paymentMethodOptionsOnPlatform` instead")

  """Extended version of the label describing the payment method."""
  extendedLabel: String! @deprecated(reason: "Use `paymentMethodOptionsOnPlatform` instead")

  """Label describing the payment method."""
  description: String @deprecated(reason: "Use `paymentMethodOptionsOnPlatform` instead")

  """If Spend Checking is unavailable, a message about why."""
  spendUnavailableMessage: PlusSpendPaymentUnavailableMessage @deprecated(reason: "Use `paymentMethodOptionsOnPlatform` instead")

  """
  Information about whether or not this payment option is eligible as a payment option.
  """
  isAvailablePaymentOption: Boolean! @deprecated(reason: "Use `paymentMethodOptionsOnPlatform` instead")

  """
  Information about whether or not this payment option is available as a new payment method.
  """
  isNewPaymentOption: Boolean! @deprecated(reason: "Use `paymentMethodOptionsOnPlatform` instead")
}

"""Deprecated. A list of Plus benefits to be shown during onboarding."""
type PlusBenefitForOnboarding {
  """An icon that corresponds with the benefit."""
  icon: AppImage!

  """A description of the Plus benefit."""
  description: String!

  """The tooltip for the Plus benefit."""
  tooltip: PlusBenefitTooltip!
}

"""Deprecated. Initial state for the Plus benefit calculator."""
type PlusBenefitCalculatorInitialState implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Initial value for average yearly checking balance."""
  avgYearlyCheckingBalance: Float

  """Initial value for average monthly card purchases."""
  avgMonthlyCardPurchases: Float

  """Initial value for average yearly borrow balance."""
  avgYearlyBorrowBalance: Float

  """True when the initial values are based on current user balances."""
  isBasedOnViewingUserUsage: Boolean

  """True when the initial values are based on common user balances."""
  isBasedOnCommonUserUsage: Boolean
}

"""
Deprecated. Messaging to display if Spend Checking is ineligible as a Plus Membership payment.
"""
type PlusSpendPaymentUnavailableMessage {
  """An optional message description."""
  description(
    """
    When provided and true, the string will include Markdown formatting.
    Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): String

  """Optional title."""
  title: String

  """Optional link."""
  link: AppLink
}

"""Deprecated. An itemized summary for Plus membership payments."""
type PlusMembershipPaymentSummary {
  """A list of payment items."""
  items: [PlusMembershipPaymentSummaryItem!]!

  """The total payment dollar amount: a sum of all payment item amounts."""
  total: Float!

  """The name of the payee."""
  payeeName: String!
}

"""Deprecated. A Plus membership payment summary item."""
type PlusMembershipPaymentSummaryItem {
  """The title of the payment item."""
  title: String!

  """The signed dollar amount of the payment item."""
  amount: Float!
}

"""Deprecated. An array to render a list of all basic benefits"""
type BasicBenefitsAll {
  """An Array of PlusBenefit objects."""
  benefits: [BasicBenefitStandard]
}

"""Deprecated. A benefit for basic memberships"""
type BasicBenefitStandard {
  """The benefit title"""
  title: String!

  """A description of the benefit"""
  description: String

  """A link for the benefit"""
  appLink: AppLink
}

interface ProductAccountLandingPage {
  """The title for a Product Account Landing Page"""
  title: String

  """The header for a Product Account Landing Page"""
  header: ProductAccountLandingPageHeader

  """The account details for a Product Account Landing Page"""
  accountDetails: [TabularDataItem]

  """An array of informational banners for a Product Account Landing Page"""
  banners: [InformationBanner]

  """An array of the disclosures for a Product Account Landing Page"""
  disclosures: [AppRichTextDisclosureLink]

  """
  The mobile floating action button details for a Product Account Landing Page (mobile only)
  """
  floatingActionButton: AppNavigationItem

  """Common transactions to be displayed on a Product Account Landing Page"""
  transactions(first: Int, after: String): CommonTransactionEntryConnection

  """
  Copy to be displayed when there are no transactions on a Product Account Landing Page
  """
  transactionsEmptyState: CommonTransactionsEmptyState

  """
  Card(s) to be shown for promotions that may require additional action or just be less important
  """
  promotionCards: [AppCard!]

  """
  Card(s) to be shown in a more prominent location (such as closer to the top of the page) for active or more important promotions, these may or may not require additional actions
  """
  priorityPromotionCards: [AppCard!]
}

type ProductAccountLandingPageHeader {
  """The value for a Product Account Landing Page Header"""
  value: String

  """The title for a Product Account Landing Page Header"""
  title: String

  """The icon for a Product Account Landing Page Header"""
  icon: AppImage

  """The tooltip for a Product Account Landing Page Header"""
  tooltip: AppTooltip
}

type Promotions {
  campaign(
    """Promotion key"""
    promotionKey: PromotionCampaignKey!
  ): PromotionCampaign

  """
  Returns a promotional document bundle specific to the user and the documents they have agreed to.
  """
  promotionsAgreements: RequiredDocumentsBundle

  """Sign up page content"""
  signUpPage: PromotionSignUpPage
}

type PromotionCampaign {
  """Promotion acceptance screen"""
  acceptanceScreen: AppInfoPage

  """
  Promotion campaign ID - if the promotion key doesn't include the campaign ID, lens will fetch from promotions service.
  """
  campaignId: String

  """Document bundle associated with the campaign"""
  documentBundle: RequiredDocumentsBundle
}

type SecurityDetails {
  """Current Qoute"""
  currentQuote: CurrentQuote

  """M1 value prop Card"""
  marketingCard: ProductMarketingCard

  """A time-series of historical quote chart data."""
  historicalQuotes(
    """
    An interval length over which to aggregate the quote data. Default is days.
    """
    interval: TimeIntervalEnum = DAY

    """
    A preset time range option. Supercedes `range` if both are specified.
    Default is 5 years.
    """
    period: HistoricalQuotePeriodEnum = FIVE_YEARS
  ): [ChartableSliceDatum!]

  """A time-series of chart data for the security."""
  intradayQuotes(
    """
    An interval length over which to aggregate the quote data.
    Default is 5 minutes.
    """
    interval: IntradayQuoteIntervalEnum

    """Whether or not the security is a crypto currency."""
    isCrypto: Boolean = false

    """
    A time period over which to retrieve intraday quotes.
    Default is latest week.
    """
    period: IntradayQuotePeriodEnum = LATEST_WEEK
  ): [ChartableSliceDatum!]

  """Key Data"""
  keyData: TabularDataSection

  """
  Popular comparisons for the security. Based on security type, industry & sector.
  """
  popularSecurities(limit: Float = 5): PopularSecurities

  """Price"""
  price: TabularDataSection

  """Profile"""
  profile: SecurityDetailsProfile

  """Related categories"""
  relatedCategories: TabularDataSection

  """Market News"""
  marketNews(after: String, first: Int): SecurityMarketNews

  """Fund Allocation - breakdown of fund's asset allocation"""
  allocation: TabularDataSection

  """Top holdings"""
  topHoldings: SecurityTopHoldings
}

type CurrentQuote {
  """Current quote price change in dollars, percentage & timestamp"""
  changeText: Text

  """Delayed Quote Text"""
  delayedQuoteText: String

  """Logo URL"""
  logoUrl: String

  """Security name"""
  name: String

  """Current Price"""
  price: String
}

type PopularSecurities {
  """Popular securities section title"""
  title: String

  """Popular securities"""
  securities: [PopularSecurity]
}

type PopularSecurity {
  """Logo URL"""
  logoUrl: String

  """Security name"""
  name: String

  """Security symbol"""
  symbol: String
}

type SecurityDetailsProfile {
  """Security profile Description"""
  description: String

  """Security tabular data"""
  tabularData: TabularDataSection

  """Security profile sec website link"""
  secLink: AppLink

  """
  Security profile website url - each is different and unable to use AppLinkUrl type
  """
  websiteUrl: String
}

type SecurityTopHoldings {
  """Top holdings title"""
  title: String

  """Top holdings information"""
  topHoldings: [FundHoldingInfo]
}

type SecurityMarketNews {
  """Security news section title"""
  title: String

  """Security news articles"""
  articles: NewsConnection
}

type Save implements Node {
  """The ID of this node."""
  id: ID!

  """Returns true if the user has the feature flag for savings enabled."""
  isSavingsEnabled: Boolean

  """Deprecated, no longer in use."""
  hasDirectToHYSA: Boolean @deprecated(reason: "This flag is no longer in use.")

  """B2 Savings Accounts"""
  savings: Savings

  """
  Whether the user is eligible to open more than one individual high-yield savings accounts
  """
  isMultipleAccountsEligible: Boolean!

  """
  Whether the user is eligible to open a joint high-yield savings account
  """
  isJointAccountsEligible: Boolean!

  """Whether the user is eligible to open an individual cash account"""
  isCashAccountsEligible: Boolean!

  """Whether the user is eligible to open a joint high-yield cash account"""
  isJointCashAccountsEligible: Boolean!

  """
  Whether the user is eligible to onboard to any type of Save account; This field checks a combination
  of feature flags and eligibility fields to determine if a user should have access to Save onboarding
  """
  isEligibleToOnboard: Boolean!

  """
  The CTA displayed when a user is eligible to onboard to any type of Save account; A `null` response
  indicates that the user is not eligible to add any Save products
  """
  addSaveAccountCta: AppNavigationItem
}

type Savings implements Node {
  """The ID of this node."""
  id: ID!

  """A list of available Savings accounts"""
  savingsAccounts: SavingsAccountConnection

  """Whether the user has a Savings account or not"""
  hasSavingsAccounts: Boolean

  """Whether the user currently has a funded savings account"""
  hasFundedSavingsAccount: Boolean!

  """
  Whether the user has a Joint HYSA Invitation or not, i.e. is an invitee/recipient
  """
  hasJointAccountInvitation: Boolean!

  """
  Whether the user has external funding source links to use for a Savings account
  """
  hasExternalFundingSourceLink: Boolean! @deprecated(reason: "use SavingsAccount.hasExternalFundingSourceLink instead")

  """Returns content for savings onboarding."""
  onboarding: SavingsOnboarding

  """The plus APY for plus users"""
  plusAnnualPercentageYield: String!

  """The standard APY for non-plus users"""
  annualPercentageYield: String!

  """
  Agreements for all `Save` products; agreements will default to HYSA unless otherwise specified
  """
  savingsAgreements(
    """
    The Save onboarding value used to denote which onboarding flow the user is in (e.g. `IndividualSave`, `JointSaveInitiate`, `IndividualCash`)
    """
    onboardingValue: String

    """The type of account (e.g. `type: SAVE` or `type: CASH`)"""
    accountType: SaveAccountTypeEnum
  ): SavingsAgreements

  """Disclosure for the Savings account"""
  disclosure: SavingsDisclosure!

  """FDIC Insurance Amount"""
  fdicInsuranceAmount: Float @deprecated(reason: "no fixed value for all accounts.")

  """
  The Joint HYSA Invitations for the user, if applicable. If no invitations, this returns null
  """
  jointAccountInvitationsList: SavingsJointAccountInvitationConnection
}

type SavingsJointAccountInvitationConnection {
  pageInfo: PageInfo!
  edges: [SavingsJointAccountInvitationEdge]
}

type SavingsJointAccountInvitationEdge {
  cursor: String!
  node: SavingsJointAccountInvitation
}

type SavingsJointAccountInvitation implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The first name of the user who sent the invitation"""
  firstName: String!

  """The last name of the user who sent the invitation"""
  lastName: String!

  """The email of the user who sent the invitation"""
  email: String!

  """The phone number of the user who sent the invitation"""
  phoneNumber: String!

  """The name of the account that the user was invited to join"""
  accountName: String!

  """The expiration date of the invitation as an ISO String"""
  expirationDate: String!
}

type SavingsAgreements implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Savings e-sign agreement to be shown to users."""
  eSignAgreement: AgreementDocument!

  """The bundle of agreements for Savings."""
  agreements: AgreementBundle!

  """The required agreements for a savings account."""
  requiredAgreements: RequiredDocumentsBundle!
}

type SavingsAccountConnection {
  pageInfo: PageInfo!
  edges: [SavingsAccountEdge]
}

type SavingsAccountEdge {
  cursor: String!
  node: SavingsAccount
}

type SavingsAccount implements Node & ListableAccount & TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The account category."""
  accountCategory: AccountCategoryEnum!

  """The name of the account."""
  name: String!

  """A descriptor for the account, for help identifying in a list."""
  descriptor: String

  """The status of the Savings account"""
  status: SavingsAccountStatus

  """The type of account (i.e. "SAVE")"""
  accountType: SaveAccountTypeEnum!

  """The account number of the Savings account"""
  accountNumber: String

  """The routing number of the Savings account"""
  routingNumber: String

  """The annual percentage yield of this specific Savings account"""
  annualPercentageYield: String

  """Whether the account is funded or not"""
  isFunded: Boolean!

  """The balances of the Savings account"""
  balances: SavingsAccountBalances

  """The interest values of the Savings account"""
  interest: SavingsAccountInterest

  """The transfer values of the Savings account"""
  transfers: SavingsAccountTransfers

  """
  The minimum deposit amount for the initial deposit into this Savings account
  """
  minimumInitialDeposit: Float

  """
  The maximum deposit amount for the initial deposit into this Savings account
  """
  maximumInitialDeposit: Float

  """
  The funding source from which the Savings account should transfer money for the first time
  """
  initialTransferParticipant: TransferParticipant

  """The transactions for the Savings account"""
  transactions(
    first: Int
    after: String

    """A filter mode for the transactions. Default is `ALL`."""
    mode: SavingsTransactionModeEnum = ALL
  ): SavingsTransactionConnection

  """
  Returns true if the user has an external funding source linked to their Savings account
  """
  hasExternalFundingSourceLink: Boolean!

  """Returns the account ownership type - JOINT or INDIVIDUAL"""
  ownershipType: String!

  """
  The expiration date for an account in a pending state, the owner(s) must complete the necessary steps to activate the account or the account will expire
  """
  expirationDate: String

  """Details for the Earn Product Landing Page"""
  earnProductLandingPage: EarnProductLandingPage

  """The header information of the account for client UI"""
  header: SavingsAccountHeader

  """The details of the account for client UI"""
  accountDetails: SavingsAccountDetails

  """
  If applicable, a checklist of steps for the user to complete for product onboarding.
  """
  setupChecklist: SetupChecklist

  """The link for funding the Savings account - null if already funded"""
  fundAccountLink: AppLink

  """A banner for identity verification information"""
  docUploadBanner: InformationBanner @deprecated(reason: "Field consolidated, use pendingActionsBanners instead")

  """
  A banner for transfer status information, such as a pending transfer that is not showing from Bank Teller yet
  """
  transferStatusBanner: InformationBanner @deprecated(reason: "Field consolidated, use pendingActionsBanners instead")

  """
  An array of informational banners notifying the user of pending actions (i.e. identity verification, pending joint account, transfer status)
  """
  banners: [InformationBanner!]

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String

  """
  The Spend promotional message to be displayed on the Savings transactions screen.
  """
  marketingCard: SpendPromotionalMessage

  """Copy to be displayed when there are no transactions."""
  transactionsEmptyState: TransactionsEmptyState!
}

type TransactionsEmptyState {
  """The title of the empty state"""
  title: String!

  """The subtitle of the empty state"""
  subtitle: String
}

enum SavingsTransactionModeEnum {
  """Only display pending (non-final) transactions."""
  ONLY_PENDING

  """Only display final (non-pending) transactions."""
  ONLY_FINAL

  """Display all transactions."""
  ALL
}

enum SaveAccountTypeEnum {
  SAVE
  CASH
}

enum SavingsAccountStatusEnum {
  PENDING
  ACTIVE
}

type SavingsAccountStatus {
  """The status code."""
  code: SavingsAccountStatusEnum!

  """A friendly description of the account status."""
  description: String!
}

type SavingsAccountBalances {
  """The pending balance for the Savings account"""
  pendingBalance: String!

  """The available balance for the Savings account"""
  availableBalance: String!

  """The sum value of the available and pending balances"""
  currentBalance: String!
}

type SavingsAccountInterest {
  """The year to date interest earned for the Savings account"""
  yearToDateEarned: String!

  """The total interest earned for the Savings account"""
  totalEarned: String!
}

type SavingsAccountTransfers {
  """The transfer limits for the Savings account"""
  limits: SavingsAccountTransferLimits!
}

type SavingsAccountTransferLimits {
  """The monthly transfer limit for the Savings account"""
  monthlyLimit: String!

  """The daily incoming cash transfer limit for the Savings account"""
  dailyIncomingCashLimit: String!

  """The daily outgoing cash transfer limit for the Savings account"""
  dailyOutgoingCashLimit: String!
}

type SavingsAccountHeader {
  """The name of the Savings account"""
  name: String

  """The balance information for the balance section in the UI"""
  balanceSection: SavingsBalanceSection!

  """The interest information for the interest section in the UI"""
  interestSection: SavingsInterestSection
}

type SavingsBalanceSection {
  """The label of the available Savings balance"""
  label: String!

  """The label of the current Savings balance"""
  currentBalanceLabel: String!

  """The value of the available Savings balance"""
  balance: String!

  """The sum value of the available and pending balances"""
  currentBalance: String!

  """An explainer tooltop for the available balance value"""
  balanceTooltip: [String!]

  """An explainer tooltip for the current balance value"""
  currentBalanceTooltip: [String!]
}

type SavingsInterestSection {
  """The total interest earned for the Savings account"""
  interestEarned: String!

  """The associated icon with the interest earned copy"""
  interestEarnedIcon: AppImage

  """The plus upsell link for non-plus users"""
  plusLink: AppLink

  """The plus upsell icon for non-plus users"""
  plusLinkIcon: AppImage
}

type SavingsAccountDetails {
  """The UI sections of the account details for the Savings account"""
  sections: [SavingsAccountDetailSection!]

  """Additional information for the savings account"""
  additionalInfo: [String!]

  """Disclosure for the Savings account"""
  disclosure: SavingsDisclosure
}

type SavingsAccountDetailSection {
  """The header text for the account detail section"""
  header: String!

  """The optional AppLink for the account detail section"""
  link: AppLink

  """The optional icon for the link in the account detail section"""
  linkIcon: AppImage

  """The rows of details for the account detail section"""
  details: [SavingsAccountDetail!]
}

type SavingsAccountDetail {
  """The label of the account detail"""
  label: String!

  """The value of the account detail"""
  value: String!

  """
  A boolean denoting if the value is copyable. If this is true, the clients should render a copy button.
  """
  copyable: Boolean!
}

type SavingsDisclosure {
  """The text for the disclosure link modal/dialogue"""
  text: String @deprecated(reason: "Use `SavingsDisclosure.paragraphs` instead")

  """The link text for the disclosure link"""
  linkText: String

  """
  The text for the disclosure link modal/dialogue as an array of paragraphs
  """
  paragraphs: [String!]!
}

type SavingsOnboarding {
  """The joint account invitation page"""
  accountInvitationPage: JointAccountInvitationPage

  """The account naming page"""
  nameAccountPage: SavingsNameAccountPage

  """Returns Customer Due Diligence questions and answers."""
  customerDueDiligenceQuestions(
    """
    The Earn onboarding value is used to denote which onboarding flow the user is in (e.g. `IndividualSave`, `JointSaveInitiate`, `IndividualCash`)
    Returns customized set of CDD questions based on the onboarding value & Invest status. Default returns Banking CDD only.
    """
    onboardingValue: String
  ): SavingsCustomerDueDiligenceQuestions

  """The page for selecting the type of HYSA to open"""
  accountTypePage: SavingsAccountTypePage

  """The page that informs the user they've been invited to a joint HYSA"""
  jointInvitedPage: AppInfoPage

  """
  A field that returns the joint invitation onboarding value, JointSaveCoOwner or JointCashCoOwner, depending on whether the account type is Cash or Save
  """
  jointInvitedPageOnboardingValue: String

  """
  The page that informs the user they've almost completed creating joint HYSA pending other user acceptance
  """
  jointInitiatorSuccessPage: AppInfoPage @deprecated(reason: "Deprecated due to changes in design")

  """The page that informs the user they've completed creating joint HYSA"""
  jointInvitedSuccessPage: AppInfoPage @deprecated(reason: "Deprecated due to changes in design")

  """
  The page shown after the confirmation screen when a user needs to connect a bank. If no accountId is passed, this default to HYSA-centric copy, disclosures etc.
  """
  connectBankPage(accountId: ID): AppInfoPage

  """
  The page that informs the user they've completed funding or skipped funding for individual or joint accounts
  """
  fundingCompletePage(accountId: ID!): AppInfoPage

  """Security lending disclosures"""
  fullyPaidLendingDisclosure(onboardingValue: String): InvestFullyPaidLendingDisclosure
}

type SavingsAccountTypePage {
  """The title of the Savings account type page"""
  title: String

  """The list of account types from which to choose"""
  accountTypes: [ListItem!]
}

type JointAccountInvitationPage {
  """Title text for the joint account invitation screen"""
  title: String

  """Subtitle text for the joint account invitation screen"""
  subtitle: String

  """CTA label copy for the joint account invitation screen"""
  primaryCtaLabel: String @deprecated(reason: "Use primaryCtaButton")

  """CTA button for joint account invitation screen"""
  primaryCtaButton: AppButton
}

type SavingsNameAccountPage {
  """Title text of the account naming screen"""
  title: String

  """Subtitle text of the account naming screen"""
  subtitle: String

  """Primary cta label text of the account naming screen"""
  primaryCtaLabel: String @deprecated(reason: "Use primaryCtaButton instead")

  """Secondary cta label text of the account naming screen"""
  secondaryCtaLabel: String @deprecated(reason: "Use secondaryCtaButton instead")

  """Primary CTA Button with label text and analytics"""
  primaryCtaButton: AppButton

  """Secondary CTA Button with label text and analytics"""
  secondaryCtaButton: AppButton

  """Placeholder text for name account input"""
  inputPlaceholder: String

  """Name of the input field for name account input"""
  inputFieldName: String
}

type SavingsCustomerDueDiligenceQuestions implements Node {
  """The ID of this node."""
  id: ID!

  """Returns CDD questions and answers required by B2 for user onboarding."""
  questions: [SavingsDueDiligenceQuestion]
}

type SavingsDueDiligenceQuestion {
  """The question id for an instance of a CDD question."""
  questionId: String

  """The question label for an instance of a CDD question."""
  questionLabel: String

  """The answer type for an instance of a CDD question."""
  answerType: SavingsCustomerDueDiligenceQuestionType

  """The acceptable answers for an instance of a CDD question."""
  answers: [SavingsCustomerDueDiligenceAnswer]
}

enum SavingsCustomerDueDiligenceQuestionType {
  SINGLE_SELECT
}

type SavingsCustomerDueDiligenceAnswer {
  """The answer id for an answer of a CDD question."""
  answerId: String

  """The answer label for an answer of a CDD question."""
  answerLabel: String
}

type SavingsTransactionConnection {
  pageInfo: PageInfo!
  edges: [SavingsTransactionEdge]
}

type SavingsTransactionEdge {
  cursor: String!
  node: SavingsTransaction
}

type SavingsTransaction implements Node & SpendActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A status AppPill for this transaction."""
  status: AppPill

  """The date this transaction was created."""
  date: String!

  """The activity date for this transaction."""
  activityDate: String!

  """The Savings icon for this transaction."""
  icon: AppImage

  """A short summary description for this transaction."""
  summary: String!

  """
  A friendly description for this transaction which must be displayed to users.
  """
  description: String!

  """The merchant name where the activity entry occured."""
  merchant: String

  """The category label for this transaction."""
  categoryLabel: String!

  """A boolean to indicate whether this transaction is voided or not."""
  isVoided: Boolean

  """
  The signed dollar amount associated with this transaction. Postive amounts are
  cash flows into a Savings account, and negative amounts are cash flows out.
  """
  amount: Float

  """Further details for this activity entry."""
  details: SpendActivityEntryDetails

  """The date this transaction was settled, if applicable."""
  settledDate: String @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")
  transactionDate: String! @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")
}

type EarnProductLandingPage implements ProductAccountLandingPage {
  """The title for the Earn Product Landing Page"""
  title: String

  """The header for the Earn Product Landing Page"""
  header: ProductAccountLandingPageHeader

  """The account details for the Earn Product Landing Page"""
  accountDetails: [TabularDataItem]

  """An array of informational banners for the Earn Product Landing Page"""
  banners: [InformationBanner]

  """
  A card with a value prop display and related details for the Earn Product Landing Page
  """
  valuePropCard: ValuePropCard

  """
  A card with details about the user's Earn account for the Earn Product Landing Page
  """
  accountDetailsCard: EarnAccountDetailsCard

  """
  Disclaimers to be displayed below the value prop card for the Earn Product Landing Page
  """
  disclaimers: [String]

  """An array of the disclosures for the Earn Product Landing Page"""
  disclosures: [AppRichTextDisclosureLink]

  """
  The mobile floating action button details for a Product Account Landing Page
  """
  floatingActionButton: AppNavigationItem

  """Account transactions for the Earn Product Landing Page"""
  transactions(first: Int, after: String): CommonTransactionEntryConnection

  """
  Copy to be displayed when there are no transactions on the Earn Product Landing Page
  """
  transactionsEmptyState: CommonTransactionsEmptyState

  """
  Card(s) to be shown for promotions that may require additional action or just be less important
  """
  promotionCards: [AppCard!]

  """
  Card(s) to be shown in a more prominent location (such as closer to the top of the page) for active or more important promotions, these may or may not require additional actions
  """
  priorityPromotionCards: [AppCard!]
}

type EarnAccountDetailsCard {
  """Title for the card"""
  title: String

  """Details for the card"""
  details: [DetailsGroup!]
}

type DetailsGroup {
  """Header for the group of details"""
  header: String

  """Rows of details for the group"""
  rows: [DetailRow!]
}

type DetailRow {
  """The label that defines the row"""
  label: String

  """The tooltip for the label"""
  tooltip: AppTooltip

  """A static string value to provide detail for the row"""
  value: String

  """Option to provide a masked value"""
  valueMasked: String

  """An icon for the row"""
  icon: AppImage

  """
  Option to provide a clicked state icon, option to provide a clicked value
  """
  iconClicked: AppImage
}

interface Security {
  """
  The category path for this security in the category hierarchy. An empty list means that the security is currently uncategorized.
  """
  category: [String!]!

  """A time-series of chart data for the security."""
  chartData(
    """A time range over which to retrieve chart data. Default is one month."""
    range: TimeRangeInput = {inclusive: true, length: {amount: 10, unit: YEARS}}

    """
    The initial amount invested value to use for backtesting. If not provided, the initial value will be 100.
    """
    initialValueForBacktesting: Float
  ): ChartableSliceData!

  """
  Fundamentals data for the security. Value is null when data is unavailable.
  """
  fundamentals: Fundamentals

  """
  A time-series of historical quote data for the security. Value is null when market data is unavailable.
  """
  historicalQuotes(
    """
    This flag exists to correct a legacy issue. By default, for daily intervals only, data will be returned in reverse chronological order (which is inconsistent with the rest of the API). Clients should opt-in to receiving daily data in chronological order by setting this argument to true. This argument will eventually be removed once all clients are corrected to expect daily data in chronological order.
    """
    dailyInChronologicalOrder: Boolean = false

    """
    An interval length over which to aggregate the quote data. Default is days. Dividend and split data is not aggregated if an interval longer than days is selected.
    """
    interval: TimeIntervalEnum = DAY

    """A preset time range option. Supercedes `range` if both are specified."""
    period: HistoricalQuotePeriodEnum

    """
    A time range over which to retrieve historical quotes. Default is one month.
    """
    range: TimeRangeInput = {inclusive: true, length: {amount: 1, unit: MONTHS}}
  ): [HistoricalQuote!]

  """The ID of this node."""
  id: ID!

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  A time-series of quote data with intraday resolution. Value is null when data is unavailable.
  """
  intradayQuotes(
    """
    An interval length over which to aggregate the quote data. Default is one hour.
    """
    interval: IntradayQuoteIntervalEnum = ONE_HOUR

    """Whether or not the security is a crypto currency."""
    isCrypto: Boolean = false

    """
    A time period over which to retrieve intraday quotes. Default is today.
    """
    period: IntradayQuotePeriodEnum = LATEST_DAY
  ): IntradayQuoteTimeSeries

  """
  Indicates if this security is currently active and available to be added to pies. True when the `status` is `ACTIVE`, false otherwise.
  """
  isActive: Boolean!

  """True IF the security is marginable"""
  isMarginable: Boolean!

  """
  Latest-available delayed market quote data for the security. Value is null when data is unavailable.
  """
  latestQuote: Quote

  """The maintenance margin requirement for a given security"""
  maintenanceMargin: Float

  """tooltip to display margin requirement content"""
  marginEligibileTooltip: SecurityMarginTooltip!

  """Icon representing mergin eligibility"""
  marginEligibleIcon: AppImage

  """tooltip to display margin requirement content"""
  marginRequirementTooltip: SecurityMarginTooltip!

  """
  The name of the market or exchange on which the security is listed. Value is null when data is unavailable.
  """
  market: String

  """The name of the security."""
  name: String!

  """
  A list of news stories related to this security, sorted in reverse chronological order.
  """
  news(after: String, first: Int): NewsConnection! @deprecated(reason: "Moving to a new nullable field in case of timeouts.")

  """A list of portfolio locations where this sliceable appears."""
  portfolioLinks(
    """
    When provided, filter for portfolio locations only within the specified account.
    """
    onlyAccountId: ID
  ): [PortfolioSlice!]!

  """
  The percent difference in price compared to a historical point. Value is null when data is unavailable.
  """
  priceChange(
    """A preset time range option."""
    period: HistoricalQuotePeriodEnum!
  ): PriceChange

  """
  Profile information for the security. Value is null when data is unavailable.
  """
  profile: SecurityProfile

  """
  Latest-available delayed market quote data for the security. Value is null when data is unavailable.
  """
  quote: Quote

  """
  A list of news stories related to this security, sorted in reverse chronological order.
  """
  securityNews(after: String, first: Int): NewsConnection

  """App Pill to be displayed for the security"""
  securityPill: AppPill

  """The current status of the security."""
  status: SecurityStatusEnum!

  """The ticker symbol for this security."""
  symbol: String!

  """The type of the sliceable."""
  type: SliceableTypeEnum!
}

"""A time interval."""
enum TimeIntervalEnum {
  """Day"""
  DAY

  """Month"""
  MONTH

  """Quarter"""
  QUARTER

  """Week"""
  WEEK

  """Year"""
  YEAR
}

"""A security status."""
enum SecurityStatusEnum {
  """Active"""
  ACTIVE

  """Delisted"""
  DELISTED

  """Inactive"""
  INACTIVE
}

"""A security type."""
enum SecurityTypeEnum {
  """Equity"""
  EQUITY

  """Fund"""
  FUND
}

type SecurityScreenerConnection {
  """The current hierarchical category level."""
  currentCategory: SecuritySubCategory!

  """A list of edges."""
  edges: [SecurityScreenerEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The next hierarchical level of sub-categories."""
  subCategories: [SecuritySubCategory!]!

  """The approximate total number of edges in the connection."""
  total: Int!
}

"""An edge in a connection."""
type SecurityScreenerEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Security
}

"""A connection sub-category."""
type SecuritySubCategory {
  """The category path in the category hierarchy."""
  category: [String!]!

  """The approximate total number of edges within the sub-category."""
  count: Int!
}

"""A limit option."""
input SecurityLimitOptionInput {
  """
  Whether the limit should be inclusive of the minimum and/or maximum values. Default is true.
  """
  inclusive: Boolean = true

  """A maximum limit."""
  max: Float

  """A minimum limit."""
  min: Float

  """A limit type."""
  type: SecurityLimitTypeEnum!
}

"""A sort option."""
input SecuritySortOptionInput {
  """A sort direction."""
  direction: SortDirectionEnum!

  """A sort type."""
  type: SecuritySortTypeEnum!
}

"""A security sort type."""
enum SecuritySortTypeEnum {
  """Category"""
  CATEGORY

  """Dividend yield"""
  DIVIDEND_YIELD

  """Market capitalization"""
  MARKET_CAP

  """Name"""
  NAME

  """P/E ratio"""
  PE_RATIO

  """Price percent change 1M"""
  PRICE_CHANGE_1M

  """Price percent change 1W"""
  PRICE_CHANGE_1W

  """Price percent change 1Y"""
  PRICE_CHANGE_1Y

  """Price percent change 2Y"""
  PRICE_CHANGE_2Y

  """Price percent change 3M"""
  PRICE_CHANGE_3M

  """Price percent change 3Y"""
  PRICE_CHANGE_3Y @deprecated(reason: "No longer supported by new upstream data source. Use `PRICE_CHANGE_2Y` instead.")

  """Price percent change 5Y"""
  PRICE_CHANGE_5Y

  """Price percent change 6M"""
  PRICE_CHANGE_6M

  """Annualized price percent change 1Y"""
  PRICE_CHANGE_ANNUALIZED_1Y

  """Annualized price percent change 2Y"""
  PRICE_CHANGE_ANNUALIZED_2Y

  """Annualized price percent change 3Y"""
  PRICE_CHANGE_ANNUALIZED_3Y @deprecated(reason: "No longer supported by new upstream data source. Use `PRICE_CHANGE_ANNUALIZED_2Y` instead.")

  """Annualized price percent change 5Y"""
  PRICE_CHANGE_ANNUALIZED_5Y

  """Price percent change YTD"""
  PRICE_CHANGE_YTD

  """Symbol"""
  SYMBOL
}

"""A security limit type."""
enum SecurityLimitTypeEnum {
  """Dividend yield"""
  DIVIDEND_YIELD

  """Market capitalization"""
  MARKET_CAP

  """P/E ratio"""
  PE_RATIO
}

type SliceableSearchHighlight {
  """The type of highlight match."""
  match: SliceableMatchTypeEnum!

  """
  The full text of the matching field, with the highlight locations indicated. The highlights will be delimeted by the starting token `<em>` and the ending token `</em>`. There will be at least one highlight.
  """
  snippet: String!

  """
  A list of highlight locations specified as substring indices within the full text of the matching field. (Note that these are NOT indices within the `snippet` string.)
  """
  substrings: [SearchHighlightSubstring!]!
}

"""A sliceable search match type."""
enum SliceableMatchTypeEnum {
  """Matched on name."""
  NAME

  """Matched on symbol."""
  SYMBOL
}

"""A highlight substring location."""
type SearchHighlightSubstring {
  """The zero-based beginning index of the highlight within the full text."""
  beginIndex: Int!

  """
  The zero-based index BEFORE which the highlight ends within the full text.
  """
  endIndex: Int!
}

"""A sort direction."""
enum SortDirectionEnum {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

type SpendMarketingScreen implements Node & MarketingScreen {
  """The ID of this node."""
  id: ID!

  """The header for the Spend marketing screen."""
  header: String

  """An array of the content cards for the Spend marketing screen."""
  productMarketingCards: [ProductMarketingCard]

  """The link to the cardholder terms page for the Spend marketing screen."""
  cardholderTermsLink: AppLink @deprecated(reason: "Use the `disclosureLinks` field instead.")

  """An array of disclosure links for Spend marketing screen footer."""
  disclosureLinks: [AppLink]

  """An array of the disclosures for the Spend marketing screen."""
  disclosures: [AppRichTextDisclosureLink]
}

type HistoricalPiePerformance {
  """The date for the historical value."""
  date: String!

  """The return at that point in the chosen period."""
  value: Float!
}

type BacktestedPiePerformance {
  """The date for the historical value."""
  date: String!

  """The return at that point in the chosen period."""
  value: Float!
}

type SystemPieCategoryDetails {
  """A description of the category."""
  description: String!

  """A disclosure for the category."""
  disclosure: String!

  """
  If available, a URL to a feature image that represents the category. The best-fitting image to the requested width/height constraints will be returned, but specific dimensions are not guaranteed.
  """
  featureUrl(
    """Requested minimum height for the image. Default is `200`."""
    height: Int = 200

    """Requested minimum width for the image. Default is `500`."""
    width: Int = 500
  ): String

  """The key for the category."""
  key: String!

  """If available, a URL to a logo image that represents the category."""
  logoUrl: String

  """The name for the category."""
  name: String!

  """
  A list of suitability suggestions for this category. Value will be null when no information is available.
  """
  suitability: [String!]
}

type Transfers implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """True if the user is eligible to use smart transfers."""
  isEligibleForSmartTransfers: Boolean

  """
  True if the onboarding material for Smart Transfers is available to the user.
  """
  isOnboardingForSmartTransfersAvailable: Boolean

  """
  True if the user is both eligible and ready to use smart transfers.
  To be ready, users must have Plus and either a Checking or Savings account.
  """
  isReadyForSmartTransfers: Boolean

  """A set of options for choosing the focal point of a new smart transfer."""
  newSmartTransferFocusOptionSet: NewSmartTransferFocusOptionSet

  """Returns information about available transfer participants."""
  participants(
    """Filter for participants allowed in the provided type of transfer."""
    transferType: TransferTypeEnum

    """Filter for participants allowed to be on the provided side."""
    forSide: TransferParticipantSideEnum

    """Filter for participants allowed to be opposite the provided one."""
    withOppositeParticipantId: ID

    """
    Deprecated. Use `transferType`, `forSide`, and `withOppositeParticipantId`
    instead.
    """
    withContraParticipant: ContraTransferParticipantInput
  ): TransferParticipantList

  """Valid transfer participant groups for a user."""
  participantGroups(
    """
    Scenario type filters out participants that are not valid.
    Note that as of 01-24-2024, only PAYMENT + MOVE_MONEY_TRANSFER are
    supported by this field resolver.
    """
    transferScenario: TransferScenarioTypeEnum
  ): TransferParticipantGroups

  """Fetch transfer details for the user to review before confirming."""
  transferValidation(input: TransferValidationInput!): TransferValidation

  """An array of default amounts to use for transfers."""
  defaultAmounts: [Int!] @deprecated(reason: "Use defaultAmountPills instead")

  """
  The default amounts for the initial funding screen for an Invest account.
  """
  investInitialDepositDefaultAmounts: [Int!] @deprecated(reason: "Use defaultAmountPills instead")

  """The default amounts for the initial funding screen for a Save account."""
  saveInitialDepositDefaultAmounts: [Int!] @deprecated(reason: "Use defaultAmountPills instead")

  """
  The default amount pills for the various create transfer and initial deposit screens.
  """
  defaultAmountPills(transferScenario: TransferScenarioTypeEnum!): [AppPill]!

  """The promotional text for the initial deposit screen."""
  investInitialDepositPromotionalText: InvestInitialDepositPromotionalText!

  """A set of requirements specific to some specified transfer information."""
  requirements(
    """The type of transfer."""
    transferType: TransferTypeEnum

    """The participant money is flowing from."""
    fromParticipantId: ID

    """The participant money is flowing to."""
    toParticipantId: ID

    """The requested transfer amount. Optional."""
    amount: Float

    """The Transfer scenario"""
    scenario: TransferScenarioTypeEnum
  ): TransferRequirements

  """Details about a proposed recurrence schedule."""
  scheduleDetails(
    """The proposed recurrence schedule parameters."""
    schedule: RecurrenceScheduleInput
  ): RecurrenceSchedule

  """The list of all ACAT transfer instances matching the given arguments."""
  acatInstances(accountId: ID, accountNumber: String, type: AcatTransferInstanceTypeEnum): [AcatTransferInstance]

  """The list of all transfer instances."""
  allInstances(first: Int, after: String): TransferInstanceConnection

  """The list of past, non-pending transfer instances."""
  pastInstances(first: Int, after: String): TransferInstanceConnection

  """The list of currently-pending transfer instances."""
  pendingInstances(
    """Filter for only pending instances created manually (vs by a rule)."""
    onlyManuallyCreated: Boolean = true
  ): [TransferInstance]

  """The list of transfer rules."""
  rules: [TransferRule] @deprecated(reason: "Use `smartTransferRules` and `scheduledTransferRules` instead.")

  """A list of smart transfer rules."""
  smartTransferRules: [SmartTransferRule]

  """A list of scheduled transfer rules."""
  scheduledTransferRules(
    """
    Optional filter that returns scheduled transfers to/from the given account. Default returns all scheduled transfer rules for user.
    """
    accountId: ID

    """
    Optional filter that returns only enabled transfer rules if true. Default returns ENABLED and DISABLED statuses of scheduled transfer rules. ARCHIVED status is not returned.
    """
    enabledOnly: Boolean
  ): [ScheduledTransferRule]

  """
  Given an ISO 8601 timestamp, returns whether it occurs in an even week or an
  odd week. If a timezone offset is not specified, it is assumed to be UTC. For
  assistance in creating biweekly scheduled transfer rules.
  """
  isEvenWeek(date: String!): Boolean

  """Information about rollovers into Invest accounts."""
  rollovers: InvestRollovers

  """An optional Plus promotional message for the Move Money screen."""
  plusPromotionForMoveMoneyScreen: PlusPromotionalMessage @deprecated(reason: "Use `MoveMoney.plusPromotion` instead")

  """
  Transfers form links - takes two optional arguments - source participant id & transfer scenario
  """
  formLinks(scenario: TransferScenarioTypeEnum, fromParticipantId: ID, toParticipantId: ID): [AppLink]

  """
  An AppLink that directs the user to more information about which distribution
  reasons they can choose. TODO - deprecate once payment work is complete.
  """
  iraDistributionReasonFAQ: AppLink

  """
  An AppLink that directs the user to more information about what an overcontribution
  means. TODO - deprecate once payment work is complete.
  """
  iraOvercontributionFAQ: AppLink

  """
  An AppLink that directs the user to learn more about Net Income Attributable. TODO - deprecate once payment work is complete.
  """
  niaLearnMore: AppLink

  """
  A disclaimer shown to users explaining what nia (Net Income Attributable) is
  and how to calculate it.
  """
  niaDisclaimer: TransfersDisclaimer

  """
  A disclaimer shown to users explaining what nia withholding is and how it
  """
  niaWithholdingDisclaimer: TransfersDisclaimer

  """Feature flag for enhanced IRA distributions"""
  enhancedIraDistribution: Boolean!

  """
  Active funding source - "one to rule them all" connected external bank account
  """
  activeFundingSource: FundingSourceAccount

  """
  Returns true if the user is eligible to update their funding source connection
  """
  isEligibleForFundingSourceUpdate: Boolean!

  """
  Returns data associated with the initial funding onboarding flow for an account.
  """
  initialFunding: InitialFunding!

  """
  The contents of the Move Money screen
  
  `previousRouteName` is a web construct that is used for a few pieces of logic
  * Appended to the link in the MoveMoneyOption so web knows where to return the user
  * `previousRouteName`s that include `borrow` OR `transfers` with an active Personal Loan will include a MoveMoneyOption for loan payments
  * `backButtonLabel` has some logic to determine what to display based on the `previousRouteName`
    * For now, this is only needed on web
  """
  moveMoney(type: MoveMoneyType!, previousRouteName: String): MoveMoney @deprecated(reason: "Use `MoveMoneyV2` instead.")
  moveMoneyV2: MoveMoneyV2
}

enum TransferScenarioTypeEnum {
  INVEST_INITIAL_DEPOSIT
  SAVINGS_INITIAL_DEPOSIT
  SCHEDULED_TRANSFER_FOR_REBALANCE
  MOVE_MONEY_TRANSFER
  PAYMENT
  IRA_CONVERSION
  IRA_RECHARACTERIZATION
}

enum MoveMoneyType {
  SAVE
  SPEND
  TRANSFERS
  DIRECT_DEPOSIT
}

"""
A disclaimer shown on the transfers page. Includes disclaimer text and an
optional tooltip.
"""
type TransfersDisclaimer {
  """The message shown to the user for the disclaimer."""
  text: String!

  """The tooltip for the disclaimer to display."""
  tooltip: TransfersDisclaimerTooltip
}

"""
The tooltip displayed on the TransfersDisclaimer object. Adds context to the
disclaimer text.
"""
type TransfersDisclaimerTooltip {
  """The icon entry point to the disclaimer tooltip."""
  icon: AppImage!

  """An array of strings to be parsed by the client"""
  text: [String]!
}

type MoveMoneyV2 implements Node {
  """The ID of this node"""
  id: ID!

  """Participants eligible to receive a wire transfer."""
  wireTransferParticipants: TransferParticipantList

  """Wire instructions for a user to follow for a given account."""
  wireInstructions(accountId: ID!): MoveMoneyWireInstructions

  """Simple options for moving money"""
  listItems: MoveMoneyListItems

  """Call to action for moving money"""
  callToAction: MoveMoneyCallToAction
}

type MoveMoneyCallToAction {
  """Call to action title"""
  title: String

  """Call to action icon"""
  icon: AppImage

  """Call to action link"""
  link: AppLink

  """Call to action - action type"""
  action: AppAction
}

type MoveMoney implements Node {
  """The ID of this node"""
  id: ID!

  """The internal key of this node"""
  key: String

  """Screen title copy."""
  title: String!

  """Subtitle for the Move Money screen"""
  subtitle: String

  """The label for the back button if the client requires it"""
  backButtonLabel: String!

  """Categories of options for moving money"""
  categories: [MoveMoneyCategory!]!

  """An optional Plus promotional message for the Move Money screen"""
  plusPromotion: PlusPromotionalMessage

  """Participants eligible to receive a wire transfer."""
  wireTransferParticipants: TransferParticipantList @deprecated(reason: "Use `MoveMoneyV2` field instead.")

  """Wire instructions for a user to follow for a given account."""
  wireInstructions(accountId: ID!): MoveMoneyWireInstructions @deprecated(reason: "Use `MoveMoneyV2` field instead.")
}

type MoveMoneyListItems {
  """Primary options for moving money"""
  primaryOptions: [ListItem!]!

  """Secondary options for moving money"""
  secondaryOptions: [ListItem!]!

  """Direct Deposit options"""
  directDepositOptions: [ListItem!]!
}

type MoveMoneyCategory {
  """Category label"""
  label: String!

  """List of options for a Move Money category"""
  options: [MoveMoneyOption!]!
}

type MoveMoneyOption {
  """Move Money Option icon"""
  icon: AppImage!

  """Move Money Option title"""
  title: String!

  """Optional `AppPill` to display for the move money option"""
  pill: AppPill

  """Move Money Option subtitle"""
  subtitle: String!

  """The link to go to when clicking the option"""
  link: AppLink

  """The user data to be saved for the user on click"""
  userDataEntries: [UserDataEntry!]
}

type MoveMoneyWireInstructions {
  """Title for the Move Money wire instructions screen."""
  title: String!

  """Subtitle for the Move Money wire instructions screen."""
  subtitle: String!

  """Header for the account info."""
  accountHeader: String

  """Label for the user's account."""
  accountLabel: String

  """Illustration to display on the page."""
  illustration: AppImage

  """Informational values for the Move Money wire instructions screen."""
  wireInstructionValues: [WireInstructionField!]!

  """Helpful tips for the Move Money wire instructions screen."""
  helpfulTips: [String!]!

  """Contact us link for the Move Money wire instructions screen."""
  contactUsLink: AppLink

  """Wire Transfer FAQ link for the Move Money wire instructions screen."""
  wireTransferFAQLink: AppLink
}

type WireInstructionField {
  """Title for the wire instruction field."""
  title: String

  """Value for the wire instruction field."""
  value: String

  """Optional array of values for line formatting on mobile clients."""
  optionalValues: [String!]
}

"""
A set of requirements for transfers between a particular participant pair.
"""
type TransferRequirements {
  """True when the transfer destination requires a special initial deposit."""
  requiresInitialDeposit: Boolean

  """The minimum transfer amount. When there is no minimum, value is null."""
  minTransferAmount: Float

  """
  The minimum transfer error message to be displayed when the transfer amount is less than the minimum.
  """
  minTransferAmountErrorMessage: String!

  """The maximum transfer amount. When there is no maximum, value is null."""
  maxTransferAmount: Float

  """
  The maximum transfer error message to be displayed when the transfer amount is greater than the maximum.
  """
  maxTransferAmountErrorMessage: String!

  """
  A link that accompanies maximum transfer error messaging, if applicable for the transfer participant(s). Clients should show this if the maximum transfer amount is exceeded and it is not null.
  """
  maxTransferAmountErrorLink: AppLink

  """
  Message to display for the AutoPay view if the user's statement date is today.
  """
  autoPayDueDateMessage: String

  """True when the prior-year IRA contribution option should be presented."""
  isIraContributionYearRequired: Boolean!

  """True when an IRA distribution reason must be specified."""
  isIraDistributionReasonRequired: Boolean!

  """True when an IRA contribution year must be specified."""
  isIraRolloverOptionRequired: Boolean!

  """True when an IRS contribution limit must be specified."""
  isIraContributionLimitRequired: Boolean!

  """True when the transfer will depend on sells completing first."""
  dependsOnSells: Boolean

  """
  True when the transfer amount is greater than cash available for withdrawal (CAFW).
  """
  amountIsGreaterThanCashAvailable: Boolean

  """True when the transfer will depend on holds expiring first."""
  dependsOnHolds: Boolean

  """A description of the projected timing for the transfer, if available."""
  timingDescription: String

  """
  A link to be displayed on the transfer overview screen before submission.
  """
  transferOverviewLink: AppLink

  """A short summary message regarding the proposed transfer."""
  summaryMessage: String

  """A flexible message regarding the details of the proposed transfer."""
  detailsMessage: TransferDetailsMessage

  """True if the transfer can be set as a scheduled rule."""
  canBeScheduledRule: Boolean

  """The due date for the payment account, if applicable."""
  transferDueDateLabel: String

  """A list of potential amounts to be selected for a payment transfer."""
  transferAmountPresets: [TransferAmountPresetOption]

  """Returns true if the destination for the transfer is a loan."""
  isLoanPaymentTransfer: Boolean

  """
  Returns true if the destination account for the transfer is a Credit Card account.
  """
  isCreditCardPaymentTransfer: Boolean

  """Informational content relating to AutoPay for Credit Card."""
  autoPayInformationContent: String

  """Returns if the user current has AutoPay enabled for Credit Card."""
  hasAutoPayEnabled: Boolean

  """Amount preset options available for scheduled transfers."""
  scheduledTransferAmountPresets: [ScheduledTransferPresetOption]
}

type TransferAmountPresetOption {
  """A label for the transfer amount preset option."""
  label: String

  """A value for the transfer amount preset option."""
  value: Float

  """A description of the transfer amount preset option."""
  description(
    """
    When provided and true, the string will include Markdown formatting.
    Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): String
}

type ScheduledTransferPresetOption {
  """A label for the scheduled transfer preset option."""
  label: String

  """A value for the scheduled transfer preset option."""
  value: String

  """A payment indicator for the scheduled transfer preset option."""
  indicator: ScheduledTransferIndicatorEnum

  """A description of the scheduled transfer preset option."""
  description: String
}

enum ScheduledTransferIndicatorEnum {
  """MINIMUM_PAYMENT"""
  MINIMUM_PAYMENT

  """STATEMENT_BALANCE"""
  STATEMENT_BALANCE

  """MONTHLY_PAYMENT"""
  MONTHLY_PAYMENT

  """FIXED_AMOUNT"""
  FIXED_AMOUNT
}

"""A transfer details message."""
type TransferDetailsMessage {
  """An optional icon for the message."""
  icon: AppImage

  """An optional title for the message."""
  title: String

  """An optional tag for the title."""
  titleTag: String

  """An optional description tooltip relevant to the transfer."""
  descriptionTooltip: TransferDetailsMessageTooltip

  """An optional list of named value items."""
  items: [TransferDetailsMessageItem!]

  """An optional message description."""
  description: String

  """An optional link related to the message."""
  link: AppLink

  """An analytics event to be recorded upon viewing the message."""
  displayAnalyticsEvent: AppAnalyticsEvent

  """A transfer suggestion link related to the message."""
  transferSuggestionLink: TransferSuggestionLink

  """True if the message relates to Plus."""
  isPlusRelated: Boolean
}

"""Represents a link to a suggested set of transfer inputs."""
type TransferSuggestionLink implements Linkable {
  """The title to display for the link."""
  title: String!

  """The suggested set of transfer inputs."""
  suggestion: TransferSuggestion!

  """An analytics event for following the link."""
  analyticsEvent: AppAnalyticsEvent
}

"""A suggested set of transfer inputs."""
type TransferSuggestion {
  """The type of transfer."""
  transferType: TransferTypeEnum

  """The participant money is flowing from."""
  fromParticipant: TransferParticipant

  """The participant money is flowing to."""
  toParticipant: TransferParticipant

  """The transfer amount."""
  amount: Float
}

"""A transfer details message item."""
type TransferDetailsMessageItem {
  """A title for the value."""
  title: String!

  """The value."""
  value: String!

  """An optional description of the item."""
  description: String
}

type TransferDetailsMessageTooltip {
  """Tooltip trigger."""
  icon: AppImage

  """Content body for the tooltip."""
  tooltipBody: [TransferDetailsMessageTooltipBody]
}

type TransferDetailsMessageTooltipBody {
  """A title for the tooltip content."""
  title: String

  """A subtitle for the tooltip content."""
  subtitle: String

  """A numbered list for the tooltip content."""
  numberedList: [String]
}

type TransferInstanceConnection {
  pageInfo: PageInfo!
  edges: [TransferInstanceEdge]
}

type TransferInstanceEdge {
  cursor: String!
  node: TransferInstance
}

type TransferInstanceDetails implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Transfer Instance Details Screen title."""
  title: String!

  """Transfer Instance amount label."""
  amountLabel: String!

  """Formatted transfer instance amount."""
  amount: String!

  """Transfer Instance Details Screen pill."""
  pill: AppPill

  """
  Timestamps corresponding to the active transfer instance. Can be one or many. Typically correspond to date and time of transfer events.
  """
  timeStamps: [TransferInstanceDetailAdditionalDetail] @deprecated(reason: "Use `additionalDetails` instead.")

  """
  Additional details are any combination of label and content that provides additional context for the active transfer instance.
  """
  additionalDetails: [TransferInstanceDetailAdditionalDetail]

  """Steps for the Transfer Instance."""
  steps: TransferInstanceSteps

  """
  Transfer Instance Details Screen special message. Appears at the bottom of the Transfer Details Screen and typically provides color on timing, cancelation status, lack of email verification, etc.
  """
  transferSpecificMessage: TransferInstanceDetailsMessage

  """
  Transfer Instance Details Screen messaging and link that direct a user to a support article that answers some common transfers questions.
  """
  transferTimingMessage: TransferInstanceTimingMessage

  """
  When returned, this indicates that the transfer instance is cancelable and provides the copy and additional details needed for the Cancel Transfer CTA.
  """
  ifCancelable: TransferInstanceDetailsCancelTransfer

  """
  When returned, this is a disclaimer to display below the trasnfer instance details.
  """
  disclaimer: TransferInstanceDetailsDisclaimer

  """
  An array of objects containing information on partially applied transfer credits. This
  comes up for transfers where we don't credit the user 100% of the transfer.
  """
  outstandingTransferCredits: [OutstandingTransferCredits]
}

type TransferInstanceDetailAdditionalDetail {
  """Label for a transfer instance additional detail."""
  label: String!

  """Additional detail related to the transfer instance."""
  value1: String!

  """Additional detail related to the transfer instance."""
  value2: String

  """Additional detail related to the transfer instance."""
  value3: String

  """Additional detail related to the transfer instance."""
  value4: String
}

type TransferInstanceSteps {
  """Label to display above Transfer Instance Steps."""
  label: String!

  """Source of the transfer, to be shown as the first step."""
  from: TransferParticipant

  """Chronological steps for the given transfer."""
  steps: [TransferInstanceStep!]
}

type TransferInstanceDetailsMessage {
  """Icon to display for the transfer detail message."""
  icon: AppImage

  """Transfer detail message title."""
  title: String

  """Transfer detail message description."""
  description: String

  """Link for the transfer detail message."""
  link: AppLink

  """Link copy for verify email CTA."""
  verifyEmailCta: String
}

type TransferInstanceTimingMessage {
  """Icon to display for the transfer detail message."""
  icon: AppImage

  """Link for the transfer timing CTA."""
  link: AppLink
}

type TransferInstanceDetailsCancelTransfer {
  """Copy for the Cancel Transfer CTA."""
  cancelCtaCopy: String!

  """Copy for the Confirm Cancel Transfer dialog."""
  cancelDialogCopy: String!

  """Copy for the Confirm option on the Confirm Cancel Transfer dialog."""
  cancelDialogConfirmCtaCopy: String!

  """Copy for the Cancel option on the Confirm Cancel Transfer dialog."""
  cancelDialogCancelCtaCopy: String!
}

type TransferInstanceDetailsDisclaimer {
  """Copy to display for the disclaimer."""
  disclaimerCopy: String!

  """Phone number to be linked to in disclaimerCopy"""
  phoneNumber: String

  """Optional `AppLink` to be included with the disclaimer."""
  link: AppLink
}

"""A set of options for choosing the focal point of a new smart transfer."""
type NewSmartTransferFocusOptionSet {
  """The list of options."""
  options: [NewSmartTransferFocusOption]!

  """The options footer."""
  optionsFooter: String
}

"""
An option for choosing the focal point and trigger of a smart transfer.
"""
type NewSmartTransferFocusOption implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The name of the option."""
  name: String!

  """An optional description of the option."""
  description: String

  """True if the option is enabled for the user."""
  isEnabled: Boolean!

  """When `isEnabled` is false, an optional reason description."""
  disabledReasonDescription: String

  """A summary of how many available participants remain."""
  utilizationSummary: String

  """A list of available focus participants for this option."""
  focusParticipants: TransferParticipantList

  """Requirements for editing a smart transfer created with this option."""
  editRequirements(
    """The selected focus participant."""
    focusParticipantId: ID!
  ): SmartTransferRuleEditRequirements
}

"""Requirements for editing a smart transfer."""
type SmartTransferRuleEditRequirements implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The focus option informing these edit requirements."""
  focusOption: NewSmartTransferFocusOption

  """The focus participant informing these edit requirements."""
  focusParticipant: TransferParticipant

  """Descriptive preamble text setting up the trigger threshold input."""
  balanceThresholdPreamble: String!

  """
  A short, descriptive label describing the "add new contra participant entry" action.
  """
  contraParticipantEntryAdditionLabel: String!

  """
  Descriptive preamble text setting up the contra participant list input.
  """
  contraParticipantListPreamble: String!

  """Requirements for editing the trigger applied to this smart transfer."""
  balanceTriggerEditRequirements: SmartTransferBalanceTriggerEditRequirements!

  """Indicate whether the option to add an entry should be shown."""
  shouldShowContraParticipantEntryAddition(contraParticipantEntries: [SmartTransferContraParticipantEntryInput!]!): Boolean

  """Indicate whether the option to reorder entries should be shown."""
  shouldShowContraParticipantEntryReordering(contraParticipantEntries: [SmartTransferContraParticipantEntryInput!]!): Boolean

  """Options for choosing an additional contra participant entry."""
  newContraParticipantEntryOptionSet(
    """The insertion context, if there is an existing list."""
    insertionContext: SmartTransferContraParticipantEntryInsertionContextInput
  ): NewSmartTransferContraParticipantEntryOptionSet
}

"""Requirements for editing a smart transfer balance trigger."""
type SmartTransferBalanceTriggerEditRequirements {
  """The type of balance trigger."""
  balanceTriggerType: SmartTransferBalanceTriggerTypeEnum!

  """The lowest option for trigger balance threshold, if any."""
  minBalanceTriggerThreshold: Float

  """The highest option for trigger balance threshold, if any."""
  maxBalanceTriggerThreshold: Float

  """An optional description about when the trigger will take action."""
  timingMessage(
    """The balance trigger input from the user, if present."""
    balanceTrigger: SmartTransferBalanceTriggerInput
  ): SmartTransferTriggerTimingMessage
}

"""A message about when a smart transfer will trigger."""
type SmartTransferTriggerTimingMessage {
  """The message description."""
  description: String!

  """An optional link related to the message."""
  link: AppLink

  """The type of the message."""
  messageType: SmartTransferTriggerTimingMessageTypeEnum
}

"""A smart transfer trigger timing message type."""
enum SmartTransferTriggerTimingMessageTypeEnum {
  """Informational"""
  INFO

  """Alert"""
  ALERT
}

"""The insertion context for a new contra participant entry."""
input SmartTransferContraParticipantEntryInsertionContextInput {
  """The existing ordered list of contra participant entries."""
  contraParticipantEntries: [SmartTransferContraParticipantEntryInput!]!

  """The zero-based index at which a new participant is being inserted."""
  newEntryInsertionIndex: Int!
}

"""A set of options for choosing an additional contra participant entry."""
type NewSmartTransferContraParticipantEntryOptionSet {
  """The list of options."""
  options: [NewSmartTransferContraParticipantEntryOption]!

  """A specific singular option. Temporary for Phase 1."""
  singularOption: NewSmartTransferContraParticipantEntryOption
}

"""A contra participant option."""
type NewSmartTransferContraParticipantEntryOption implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The name of the option."""
  name: String!

  """An optional description of the option."""
  description: String

  """A list of available contra participants for this option."""
  contraParticipants: TransferParticipantList

  """
  Requirements for editing the contra participant entry. While "contraParticipantId" is optional to allow for easier query patterns, resolving the field requires passing an ID.
  """
  editRequirements(
    """The selected contra participant."""
    contraParticipantId: ID
  ): SmartTransferContraParticipantEntryEditRequirements

  """The title of the option."""
  title: String!
}

"""Requirements for editing a contra participant entry."""
type SmartTransferContraParticipantEntryEditRequirements implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The TransferParticipant for this contra participant entry."""
  contraParticipant: TransferParticipant!

  """
  A short label describing the direction of funds through on the contra participant.
  """
  contraParticipantLabel: String!

  """A flexible message regarding the details of the potential transfer."""
  detailsMessage: TransferDetailsMessage

  """Descriptive preamble text setting up the fulfillment condition input."""
  fulfillmentConditionOptionSetPreamble: String!

  """The option title text for display when none is selected."""
  fulfillmentConditionOptionEmptyTitle: String!

  """The option description text for display when none is selected."""
  fulfillmentConditionOptionEmptyDescription: String!

  """Descriptive preamble text setting up the fulfillment condition list."""
  fulfillmentConditionOptionSetListingPreamble: String!

  """Options for choosing a fulfillment condition for this entry."""
  fulfillmentConditionOptionSet: SmartTransferFulfillmentConditionOptionSet

  """A short title describing the edit requirements."""
  title: String!
}

"""A set of fulfillment condition options."""
type SmartTransferFulfillmentConditionOptionSet {
  """The list of options."""
  options: [SmartTransferFulfillmentConditionOption]!
}

"""A fulfillment condition option."""
type SmartTransferFulfillmentConditionOption implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The title of the option."""
  title: String!

  """An optional description of the option."""
  description: String

  """Requirements for editing the fulfillment condition with this option."""
  fulfillmentConditionRequirements: SmartTransferFulfillmentConditionEditRequirements
}

enum SmartTransferFulfillmentConditionTypeEnum {
  """Indefinite"""
  INDEFINITE

  """Cash balance cap"""
  CASH_BALANCE_CAP

  """Funding per period"""
  FUNDING_PER_PERIOD

  """Same as INDEFINITE, but limits to the yearly IRA"""
  IRA_YEARLY_FUNDING

  """Same as FUNDING_PER_PERIOD, but weekly limits into IRA"""
  IRA_WEEKLY_FUNDING_PER_PERIOD

  """Same as FUNDING_PER_PERIOD, but monthly limits into IRA"""
  IRA_MONTHLY_FUNDING_PER_PERIOD

  """Same as FUNDING_PER_PERIOD, but quarterly limits into IRA"""
  IRA_QUARTERLY_FUNDING_PER_PERIOD

  """Until a target dollar amount is borrowed"""
  CREDIT_BORROWED_CAP

  """Until a target utilization percent is reached on the Borrow account"""
  CREDIT_UTILIZATION_CAP
}

"""Requirements for editing a smart transfer fulfillment condition."""
interface SmartTransferFulfillmentConditionEditRequirements {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A description suitable for including within a descriptive sentence."""
  inlineDescription: String! @deprecated(reason: "Unnecessary. Do not use.")
}

"""Configurator for an indefinite fulfillment condition."""
type SmartTransferIndefiniteFulfillmentConditionEditRequirements implements SmartTransferFulfillmentConditionEditRequirements {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A description suitable for including within a descriptive sentence."""
  inlineDescription: String! @deprecated(reason: "Unnecessary. Do not use.")
}

"""Configurator for a cash balance cap fulfillment condition."""
type SmartTransferCashBalanceCapFulfillmentConditionEditRequirements implements SmartTransferFulfillmentConditionEditRequirements {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A description suitable for including within a descriptive sentence."""
  inlineDescription: String! @deprecated(reason: "Unnecessary. Do not use.")

  """The lowest option for cap amount, if any."""
  minCapAmount: Float

  """The highest option for cap amount, if any."""
  maxCapAmount: Float
}

"""Configurator for a funding per period fulfillment condition."""
type SmartTransferFundingPerPeriodFulfillmentConditionEditRequirements implements SmartTransferFulfillmentConditionEditRequirements {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A description suitable for including within a descriptive sentence."""
  inlineDescription: String! @deprecated(reason: "Unnecessary. Do not use.")

  """List of funding period options for this fulfillment condition."""
  fundingPeriods: [SmartTransferFundingPerPeriodFulfillmentConditionEditRequirementsPeriodOption!]!

  """The lowest option for balance threshold, if any."""
  minFundingAmount: Float

  """The highest option for balance threshold, if any."""
  maxFundingAmount: Float
}

type SmartTransferFundingPerPeriodFulfillmentConditionEditRequirementsPeriodOption {
  """User-facing label for the option."""
  label: String!

  """API-facing value for the option."""
  value: SmartTransferFundingTimePeriodEnum!
}

"""Configurator for an IRA yearly contribution max fulfillment condition."""
type SmartTransferIraYearlyFundingFulfillmentConditionEditRequirements implements SmartTransferFulfillmentConditionEditRequirements {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A description suitable for including within a descriptive sentence."""
  inlineDescription: String! @deprecated(reason: "Unnecessary. Do not use.")
}

"""Configurator for an IRA funding per period max fulfillment condition."""
type SmartTransferIraFundingPerPeriodFulfillmentConditionEditRequirements implements SmartTransferFulfillmentConditionEditRequirements {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A description suitable for including within a descriptive sentence."""
  inlineDescription: String! @deprecated(reason: "Unnecessary. Do not use.")

  """The lowest option for balance threshold, if any."""
  minFundingAmount: Float

  """The highest option for balance threshold, if any."""
  maxFundingAmount: Float
}

"""Configurator for an credit borrowed fulfillment condition."""
type SmartTransferCreditBorrowedCapFulfillmentConditionEditRequirements implements SmartTransferFulfillmentConditionEditRequirements {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A description suitable for including within a descriptive sentence."""
  inlineDescription: String! @deprecated(reason: "Unnecessary. Do not use.")

  """Minimum Borrow account amount condition should run to."""
  minBorrowedAmount: Int

  """Maximum Borrow account amount condition should run to."""
  maxBorrowedAmount: Int
}

"""Configurator for a credit utilization cap fulfillment condition."""
type SmartTransferCreditUtilizationCapFulfillmentConditionEditRequirements implements SmartTransferFulfillmentConditionEditRequirements {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A description suitable for including within a descriptive sentence."""
  inlineDescription: String! @deprecated(reason: "Unnecessary. Do not use.")

  """Minimum Borrow account utilization condition should run to."""
  minUtilization: Int

  """Maximum Borrow account utilization condition should run to."""
  maxUtilization: Int
}

"""Specification of one side of a transfer participant pair."""
input ContraTransferParticipantInput {
  """The side of the transaction that the participant exists on."""
  side: TransferParticipantSideEnum!

  """The ID of the transfer participant."""
  participantId: ID!
}

enum TransferTypeEnum {
  """Transfer instance"""
  TRANSFER_INSTANCE

  """Scheduled transfer rule"""
  SCHEDULED_TRANSFER_RULE
}

"""A transfer participant side."""
enum TransferParticipantSideEnum {
  """From"""
  FROM

  """To"""
  TO
}

"""Information about a list of transfer participants."""
type TransferParticipantList {
  """True if the list has zero participants."""
  isEmpty: Boolean!

  """True if the list has exactly one participant."""
  isSingle: Boolean!

  """The list of transfer participants."""
  list: [TransferParticipant!]
}

"""
Transfer groups are separated by transfer type.
ie: one-time or scheduled (AKA recurring)
"""
type TransferParticipantGroups {
  """Eligible transfer participant pairs for one-time transfers."""
  oneTime: TransferParticipantGroup

  """
  Eligible transfer participant pairs for scheduled (AKA recurring) transfers.
  """
  scheduled: TransferParticipantGroup
}

"""A transfer participant group contains eligible transfer pairs."""
type TransferParticipantGroup {
  """The list of eligible source transfer participants + pairs."""
  sourceParticipants: [TransferParticipantDetails!]

  """The list of eligible destination transfer participants + pairs."""
  destinationParticipants: [TransferParticipantDetails!]
}

type TransferParticipantDetails {
  """
  The account that is fetched by a composite key of
  participantType and transferParticipantId.
  """
  account: TransferParticipant

  """The registration account type"""
  registration: OnlineAccountRegistrationEnum @deprecated(reason: "Access the registration from the above account sibling resolver instead.")

  """The list of eligible relationship pairs."""
  relationships: [TransferParticipantRelationship!]
  iraWithholding: IraWithholding
}

"""
An eligible transfer participant pair and details relevant to that pair
(ie: min/max, timing message, etc)
"""
type TransferParticipantRelationship {
  """Minimum amount required for transfer"""
  min: Float

  """Minimum amount error message"""
  minErrorMessage: String!

  """Maximum amount required for transfer"""
  max: Float

  """Maximum amount error message"""
  maxErrorMessage: String!

  """The default amount pills for the various create transfer screens."""
  amountPills: [AppPill]!

  """The source transfer participant."""
  source: TransferParticipant

  """The list of eligible relationship pairs."""
  destination: TransferParticipant

  """Whether the relationship is eligible for a scheduled transfer"""
  isScheduledTransferSupported: Boolean
}

"""A participant in a transfer of money."""
interface TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String
}

"""A type categorization of transfer participants."""
enum TransferParticipantTypeEnum {
  """Invest"""
  INVEST

  """Spend"""
  SPEND

  """Borrow"""
  BORROW

  """Loan"""
  LOAN

  """External"""
  EXTERNAL

  """Physical Check"""
  PHYSICAL_CHECK

  """Credit Card"""
  CREDIT_CARD

  """Rewards"""
  REWARDS

  """Crypto"""
  CRYPTO

  """Crypto External"""
  CRYPTO_EXTERNAL

  """Savings account"""
  SAVE

  """Funding Source"""
  FUNDING_SOURCE
}

enum AcatTransferInstanceTypeEnum {
  """INCOMPLETE"""
  INCOMPLETE

  """COMPLETED"""
  COMPLETED

  """ALL"""
  ALL
}

type AcatTransferInstanceDetailsMessage {
  """Icon to display for the transfer detail message."""
  icon: AppImage

  """Transfer detail message title."""
  title: String

  """Transfer detail message description."""
  description: String

  """Link for the transfer detail message."""
  link: AppLink
}

type AcatTransferInstanceDetails {
  """The title for the ACAT transfer instance details screen."""
  title: String

  """The status AppPill for the ACAT transfer instance details."""
  pill: AppPill

  """The account steps for the user's specific ACAT transfer."""
  steps: [AcatTransferInstanceStep]

  """The optional transfer specific message for an ACAT transfer."""
  transferSpecificMessage: AcatTransferInstanceDetailsMessage

  """The ticket number for the ACAT transfer."""
  zendeskTicketNumber: String @deprecated(reason: "Use `supportTicketNumber` instead.")

  """The ticket number for the ACAT transfer."""
  supportTicketNumber: String

  """An explainer for what happens next for the ACAT transfer."""
  nextSteps: AcatTransferInstanceDetailsExplainer
}

type AcatTransferInstanceDetailsExplainer {
  """The title for the ACAT transfer instance details explainer."""
  title: String

  """The next steps for the ACAT transfer instance details explainer."""
  steps: [String!]
}

type AcatTransferInstanceStep {
  """The title for the ACAT transfer instance step."""
  title: String

  """The subtitle for the ACAT transfer instance step."""
  subtitle: String
}

enum AcatTransferInstanceStatusCodeEnum {
  INITIATE_REQUEST
  REQUEST
  MATURING
  NEW
  SUBMITTED
  REQUEST_ADJUST
  REQUEST_PAST
  REQUEST_REJECT
  INTERNAL_REVIEW
  INTERNAL_REJECT_ADJUST
  INTERNAL_REJECT
  INTERNAL_ACCEPT
  INTERNAL_AWAITING_NSCC_SUBMISSION
  REVIEW
  REVIEW_ADJUST_DELIVERER
  REVIEW_ERROR
  REVIEW_ACCELERATE
  REVIEW_AS_JUST_RECEIVER_ACCELERATE
  SETTLE_PREP
  SETTLE_CLOSE
  MEMO_PURGE_PARTIAL_TRANSFER_REQUEST_RECEIVER
  REJECT
  SYSTEM_PURGE
  ERROR
  INTERNAL_ERROR
  UNKNOWN
  CLOSE_PURGE
  TRANSFER_COMPLETE
}

type AcatTransferInstanceStatus {
  """The code for this status."""
  code: AcatTransferInstanceStatusCodeEnum

  """Whether the transfer instance is pending or not."""
  isPending: Boolean

  """Whether the transfer instance is completed or not."""
  isCompleted: Boolean

  """Whether the transfer instance is failed or not."""
  isFailed: Boolean

  """Whether the transfer instance needs more information or not."""
  isNeedingInformation: Boolean
}

"""A discrete instance of an internal ACAT transfer."""
type AcatTransferInstance implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The formatted start date for this ACAT transfer."""
  startDate: String

  """The formatted end date for this ACAT transfer."""
  endDate: String

  """The source account for this ACAT transfer."""
  source: String

  """The destination account for this ACAT transfer."""
  destination: Account

  """Designation of either full or partial for this ACAT transfer."""
  type: String

  """The total amount value for this ACAT transfer."""
  amount: Float

  """Additional details for this ACAT transfer."""
  details: AcatTransferInstanceDetails

  """The status of this ACAT transfer."""
  status: AcatTransferInstanceStatus
}

"""A discrete instance of a transfer of money between two participants."""
type TransferInstance implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The transfer instance status."""
  status: TransferInstanceStatus!

  """The title for this transfer instance."""
  title: String!

  """An optional description for this transfer instance."""
  description: String

  """The time when the transfer instance was started."""
  startDate: String!

  """
  The time when the transfer instance ended. When the instance has not yet
  ended, the value is null.
  """
  endDate: String

  """
  The amount of money being transferred. When the exact amount is currently
  unknown, the value is null.
  """
  amount: Float

  """
  True when the origin of the money being transferred is the liquidation of an
  Invest account.
  """
  isLiquidation: Boolean

  """True when the transfer is a sent check from Spend Checking."""
  isCheck: Boolean!

  """True when the transfer is a Credit Card payment."""
  isCreditCardPayment: Boolean!

  """True when the transfer is a Personal Loan payment."""
  isPersonalLoanPayment: Boolean!

  """True when the transfer is a Credit Card AutoPay payment."""
  isCreditCardAutoPayInstance: Boolean!

  """A card with additional important transfer information, if available."""
  additionalInfoCard: AppInformationalMessageCard

  """True when the transfer is a Personal Loan AutoPay payment."""
  isPersonalLoanAutoPayInstance: Boolean!

  """
  When the destination participant is an Invest IRA, the contribution year
  option that was specified for the transfer by the user. Value could be null
  when the transfer is an IRA contribution but the year option is unknown.
  """
  iraContributionYear: IraContributionYearEnum

  """
  When the source participant is an Invest IRA, the distribution reason that was
  was specified for the transfer by the user. Value could be null when the
  transfer is an IRA distribution but the distribution reason is unknown.
  """
  iraDistributionReason: IraDistributionReasonEnum

  """
  True when the IRA distribution reason requires verification to be completed
  before the transfer can be completed.
  """
  iraDistributionReasonRequiresVerification: Boolean

  """True when the transfer currently depends on sells completing first."""
  dependsOnSells: Boolean

  """
  True when the transfer amount is greater than cash available for withdrawal (CAFW).
  """
  amountIsGreaterThanCashAvailable: Boolean

  """True when the transfer currently depends on holds expiring first."""
  dependsOnHolds: Boolean

  """A description of the projected timing for the transfer, if available."""
  timingDescription: String

  """The location that money is being transferred from."""
  from: TransferParticipant

  """The location that money is being transferred to."""
  to: TransferParticipant

  """
  In some cases, the movement of money from one participant to another involves
  moving the money through other intermediary accounts first. This is an ordered
  list of steps that comprise the overall transfer. Only available when the
  instance is loaded independently, outside of a list.
  """
  steps: [TransferInstanceStep!] @deprecated(reason: "Deprecated on `TransferInstance` and now lives on `TransferInstanceDetails`.")

  """Content and necessary variables for the Transfer Details screen."""
  details: TransferInstanceDetails
}

"""A transfer instance status."""
type TransferInstanceStatus {
  """The status code."""
  code: TransferInstanceStatusCodeEnum

  """True when it is possible to cancel the transfer."""
  isCancelable: Boolean!

  """True when the transfer is pending (not in any terminal state)."""
  isPending: Boolean!

  """True when the transfer has completed successfully."""
  isComplete: Boolean!

  """True when the transfer has been canceled."""
  isCanceled: Boolean!

  """True when the transfer has failed."""
  isFailed: Boolean!

  """True when the transfer is in any terminal state."""
  isEnded: Boolean!
}

"""A transfer instance status code."""
enum TransferInstanceStatusCodeEnum {
  """The transfer instance has been created and is awaiting processing."""
  INITIATED

  """The transfer instance has started processing."""
  STARTED

  """The transfer instance has fully completed."""
  COMPLETED

  """The transfer instance is in the process of being canceled."""
  PENDING_CANCELLATION

  """The transfer instance was canceled, and no money was moved."""
  CANCELED

  """
  The transfer instance was canceled, but some money was already moved to an
  intermediate location and remained there.
  """
  CANCELED_PARTIALLY_COMPLETED

  """The transfer instance failed, and no money was moved."""
  FAILED

  """
  The transfer instance failed, but some money was already moved to an
  intermediate location and remained there.
  """
  FAILED_PARTIALLY_COMPLETED
}

"""An IRA contribution year option."""
enum IraContributionYearEnum {
  """Current year"""
  CURRENT_YEAR

  """Prior year"""
  PRIOR_YEAR
}

"""An IRA distribution reason."""
enum IraDistributionReasonEnum {
  """Premature"""
  PREMATURE

  """Normal"""
  NORMAL

  """Disability"""
  DISABILITY

  """Death"""
  DEATH

  """Rollover to qualified plan"""
  ROLLOVER_TO_QUALIFIED_PLAN

  """Normal Roth IRA greater than 5 years"""
  NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS

  """Excess contribution removal before tax deadline"""
  EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE

  """Excess contribution removal after tax deadline"""
  EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE

  """IRA conversion"""
  CONVERSION

  """
  IRA recharacterization - distribution reason used when creating a transfer - year handled by iraContributionYear
  """
  RECHARACTERIZATION
}

"""A transfer instance step."""
type TransferInstanceStep implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The transfer instance step staus."""
  status: TransferInstanceStepStatus!

  """The title for this transfer instance step."""
  title: String!

  """The time when the transfer instance step was started."""
  startDate: String!

  """
  The time when the transfer instance step ended. When the step has not yet
  ended, the value is null.
  """
  endDate: String

  """The intermediary destination location."""
  to: TransferParticipant

  """Enum that determines the UI of the arrow to display between steps."""
  arrow: TransferInstanceStepArrowEnum
}

"""A transfer instance step status."""
type TransferInstanceStepStatus {
  """The status code."""
  code: TransferInstanceStepStatusCodeEnum

  """True when the step is pending (not in any terminal state)."""
  isPending: Boolean!

  """True when the step is in any teriminal state."""
  isEnded: Boolean!

  """True when the step did complete successfully."""
  isCompleted: Boolean!

  """A friendly description of the current status."""
  description: String
}

enum TransferInstanceStepArrowEnum {
  """COMPLETED"""
  COMPLETED

  """PENDING"""
  PENDING

  """FAILED"""
  FAILED
}

"""A transfer instance step status code."""
enum TransferInstanceStepStatusCodeEnum {
  """The step is awaiting processing."""
  INITIATED

  """The step has started processing."""
  STARTED

  """The step has requested a money movement in an underlying system."""
  SUBMITTED

  """The step has been canceled."""
  CANCELED

  """The step has successfully completed."""
  COMPLETED

  """The step has failed."""
  FAILED

  """The step has been reversed."""
  RETURNED
}

"""
A rule used by the system for creating transfer instances automatically.
"""
interface TransferRule {
  """The ID of this node."""
  id: ID!

  """
  True when the rule is currently enabled, and instances will be created. When
  false, the rule is temporarily paused.
  """
  isEnabled: Boolean!

  """The title for the rule."""
  title: String!

  """The location that money should be transferred from."""
  from: TransferParticipant @deprecated(reason: "Deprecated on interface because not all `TransferRule`s have the same concept of `from` and `to`.")

  """The location that money should be transferred to."""
  to: TransferParticipant @deprecated(reason: "Deprecated on interface because not all `TransferRule`s have the same concept of `from` and `to`.")

  """The transfer instance created from this rule most recently."""
  latestInstance: TransferInstance @deprecated(reason: "Deprecated on interface because this concept does not apply to all `TransferRule`s.")

  """True if there is currently a pending transfer instance from this rule."""
  hasPendingInstance: Boolean
}

"""A transfer rule that creates instances based on a set of conditions."""
type SmartTransferRule implements Node & TransferRule {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Message explaining why the rule might not be in a nominal state."""
  cautionStatusMessage: String

  """Is the user allowed to edit the rule?"""
  isEditingEnabled: Boolean!

  """
  True when the rule is currently enabled, and instances will be created. When
  false, the rule is temporarily paused.
  """
  isEnabled: Boolean!

  """
  True when clients should disallow user toggling of the pause/unpause switch.
  """
  isPauseToggleDisabled: Boolean!

  """The title for the rule."""
  title: String!

  """A description of the rule."""
  description: String

  """A longer, full description of the rule."""
  fullDescription: String

  """Not in use. Always returns null."""
  from: TransferParticipant @deprecated(reason: "Not relevant for `SmartTransferRule`. Only present to implement `TransferRule` until this field is removed.")

  """Not in use. Always returns null."""
  to: TransferParticipant @deprecated(reason: "Not relevant for `SmartTransferRule`. Only present to implement `TransferRule` until this field is removed.")

  """The transfer instance created from this rule most recently."""
  latestInstance: TransferInstance @deprecated(reason: "Not relevant for `SmartTransferRule`. Only present to implement `TransferRule` until this field is removed.")

  """True if there is currently a pending transfer instance from this rule."""
  hasPendingInstance: Boolean

  """A list of transfer instances created from this rule."""
  instances(first: Int, after: String): TransferInstanceConnection

  """True if there are any transfer instances created from this rule."""
  hasInstances: Boolean

  """A description of how many transfers have been created."""
  transferCountDescription: String

  """The total dollar amount transferred since the rule was created."""
  totalTransferAmount: Float

  """The participant at the focus of the smart transfer."""
  focusParticipant: TransferParticipant

  """The trigger condition for the smart transfer."""
  balanceTrigger: SmartTransferBalanceTrigger!

  """The ordered list of contra participant entries (opposite the focus)."""
  contraParticipantEntries: [SmartTransferContraParticipantEntry]

  """
  The first element in `contraParticipantEntries`. Temporary for Phase 1.
  """
  initialContraParticipantEntry: SmartTransferContraParticipantEntry

  """A set of requirements for editing this smart transfer."""
  editRequirements: SmartTransferRuleEditRequirements
}

"""A smart transfer balance trigger."""
type SmartTransferBalanceTrigger {
  """The type of balance trigger."""
  balanceTriggerType: SmartTransferBalanceTriggerTypeEnum!

  """The amount at which the trigger fires."""
  balanceThreshold: Float!

  """For under-balance triggers, the optional refill target balance amount."""
  underBalanceRefillTarget: Float
}

"""A type of smart transfer balance trigger."""
enum SmartTransferBalanceTriggerTypeEnum {
  """Over-balance"""
  OVER_BALANCE

  """Under-balance"""
  UNDER_BALANCE
}

"""A contra participant entry in a smart transfer."""
type SmartTransferContraParticipantEntry implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The title for this contra participant entry."""
  title: String!

  """The transfer instance created from this entry most recently."""
  latestInstance: TransferInstance

  """A list of transfer instances created from this entry."""
  instances(first: Int, after: String): TransferInstanceConnection

  """True if there are any transfer instances created from this entry."""
  hasInstances: Boolean

  """A description of how many transfers have been created."""
  transferCountDescription: String

  """The total dollar amount transferred since the entry was created."""
  totalTransferAmount: Float

  """The contra participant."""
  contraParticipant: TransferParticipant

  """Configuration for editing this contra participant entry."""
  editRequirements: SmartTransferContraParticipantEntryEditRequirements

  """The condition under which when money will stop flowing."""
  fulfillmentCondition: SmartTransferFulfillmentCondition!
}

"""A smart transfer fulfillment condition."""
interface SmartTransferFulfillmentCondition {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A summary description of the fulfillment condition."""
  summary: String!
}

"""Represents the indefinite fulfillment condition."""
type SmartTransferIndefiniteFulfillmentCondition implements SmartTransferFulfillmentCondition {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A summary description of the fulfillment condition."""
  summary: String!
}

"""Represents the cash balance cap fulfillment condition."""
type SmartTransferCashBalanceCapFulfillmentCondition implements SmartTransferFulfillmentCondition {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A summary description of the fulfillment condition."""
  summary: String!

  """The cash balance cap amount."""
  capAmount: Float!
}

"""Represents the funding per period fulfillment condition."""
type SmartTransferFundingPerPeriodFulfillmentCondition implements SmartTransferFulfillmentCondition {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A summary description of the fulfillment condition."""
  summary: String!

  """The funding amount."""
  fundingAmount: Float!

  """The time period."""
  fundingPeriod: SmartTransferFundingTimePeriodEnum!
}

type SmartTransferIraYearlyFundingFulfillmentCondition implements SmartTransferFulfillmentCondition {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A summary description of the fulfillment condition."""
  summary: String!
}

type SmartTransferIraFundingPerPeriodFulfillmentCondition implements SmartTransferFulfillmentCondition {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A summary description of the fulfillment condition."""
  summary: String!

  """The funding amount."""
  fundingAmount: Float!
}

type SmartTransferCreditBorrowedCapFulfillmentCondition implements SmartTransferFulfillmentCondition {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A summary description of the fulfillment condition."""
  summary: String!

  """Borrow account amount condition will run to."""
  borrowAmount: Int!
}

type SmartTransferCreditUtilizationCapFulfillmentCondition implements SmartTransferFulfillmentCondition {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """A summary description of the fulfillment condition."""
  summary: String!

  """"Borrow account utilization condition should run to."""
  utilization: Int!
}

"""A funding time period for Smart Transfers."""
enum SmartTransferFundingTimePeriodEnum {
  """Week"""
  WEEK

  """Month"""
  MONTH

  """Quarter"""
  QUARTER

  """Year"""
  YEAR
}

"""A transfer rule that creates instances on a defined schedule."""
type ScheduledTransferRule implements Node & TransferRule {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  True when the rule is currently enabled, and instances will be created. When
  false, the rule is temporarily paused.
  """
  isEnabled: Boolean!

  """
  True, when the schedule is an instance of Credit Card AutoPay and false otherwise.
  """
  isCreditCardAutoPay: Boolean!

  """
  True, when the schedule is an instance of Personal Loan AutoPay and false otherwise.
  """
  isPersonalLoanAutoPay: Boolean!

  """A label for the scheduled transfer from the list view."""
  scheduledTransferListLabel: String

  """The preset value for the transfer schedule, if applicable."""
  schedulePresetIndicator: ScheduledTransferIndicatorEnum

  """The title for the rule."""
  title: String!

  """The location that money should be transferred from."""
  from: TransferParticipant

  """The location that money should be transferred to."""
  to: TransferParticipant

  """The transfer instance created from this rule most recently."""
  latestInstance: TransferInstance

  """True if there is currently a pending transfer instance from this rule."""
  hasPendingInstance: Boolean

  """Optional memo for the transfer schedule if applicable"""
  memo: String

  """Recipient information for a check schedule."""
  sendCheckRecipient: SendCheckRecipientEditRequirements

  """The amount that should be transferred."""
  amount: Float!

  """
  When the destination participant is an Invest IRA, the contribution year
  option that was specified for the transfer rule by the user.
  """
  iraContributionYear: IraContributionYearEnum

  """
  When the source participant is an Invest IRA, the distribution reason that was
  was specified for the transfer rule by the user.
  """
  iraDistributionReason: IraDistributionReasonEnum

  """
  True when the IRA distribution reason requires verification to be completed
  before the transfer can be completed.
  """
  iraDistributionReasonRequiresVerification: Boolean

  """A specification of the recurrence schedule."""
  schedule: RecurrenceSchedule

  """The time when the rule was created."""
  createdDate: String!

  """The time when the rule was last modified."""
  lastModifiedDate: String

  """The additional details for the given scheduled transfer."""
  additionalDetails: [ScheduledTransferRuleAdditionalDetail]
}

type ScheduledTransferRuleAdditionalDetail {
  """Label for the additional transfer rule detail."""
  label: String!

  """
  Array of potential additional detail values to be displayed on the transfer rule detail.
  """
  values: [String!]!
}

"""A transfer rule of an unknown type."""
type OtherTransferRule implements Node & TransferRule {
  """The ID of this node."""
  id: ID!

  """
  True when the rule is currently enabled, and instances will be created. When
  false, the rule is temporarily paused.
  """
  isEnabled: Boolean!

  """The title for the rule."""
  title: String!

  """The location that money should be transferred from."""
  from: TransferParticipant @deprecated(reason: "Deprecated on interface because not all `TransferRule`s have the same concept of `from` and `to`.")

  """The location that money should be transferred to."""
  to: TransferParticipant @deprecated(reason: "Deprecated on interface because not all `TransferRule`s have the same concept of `from` and `to`.")

  """The transfer instance created from this rule most recently."""
  latestInstance: TransferInstance @deprecated(reason: "Deprecated on interface because this concept does not apply to all `TransferRule`s.")

  """True if there is currently a pending transfer instance from this rule."""
  hasPendingInstance: Boolean
}

type InvestInitialDepositPromotionalText {
  """The required promotional text header"""
  header: String!

  """The required promotional text body"""
  text: String!

  """The optional promotional text CTA"""
  offersCta: AppLink
}

enum IraStateWithholdingTypeEnum {
  """Indicates that the withholding values are percentage values"""
  PERCENTAGE

  """
  Indicates that the withholding values are percentage values,
  and are specifically state tax withholding that is derived
  as a percentage of federal withholding.
  """
  PERCENTAGE_OF_FEDERAL

  """Indicates that the withholding values are dollar values"""
  FIXED
}

input TransferValidationInput {
  """
  The participant to transfer money from. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  sourceId: ID!

  """
  The participant to transfer money to. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  destinationId: ID!

  """The dollar amount to transfer."""
  amount: Float!

  """
  The contribution year selection that must be specified when the destination
  participant is an Invest IRA.
  """
  iraContributionYear: IraContributionYearEnum

  """The federal withholding specified by the user for an IRA distribution."""
  federalWithholding: Float

  """The state withholding specified by the user for an IRA distribution."""
  stateWithholding: Float

  """
  The type of withholding specified by the user for an IRA distribution. It can either be a percentage or dollar value.
  """
  withholdingType: IraStateWithholdingTypeEnum

  """
  The dollar NIA (ie: Net Income Attributable) amount for an IRA transfer.
  This value is only required for IRA distributions with a distribution reason of:
  EXCESS_REMOVAL_BEFORE_TAX_DEADLINE
  """
  niaAmount: Float

  """
  If the transfer is a scheduled (AKA "recurring") transfer, those details
  will be forwarded here.
  """
  schedule: RecurrenceScheduleInput

  """Transfer scenario"""
  scenario: TransferScenarioTypeEnum
}

type TransferValidation {
  """The title for the transfer validation screen."""
  title: String!

  """The source participant for the transfer"""
  sourceParticipant: TransferParticipant!

  """The destination participant for the transfer"""
  destinationParticipant: TransferParticipant!

  """
  The amount of money being transferred.
  If it is an IRA distribution, the amount is the requested amount
  less the federal and state withholding.
  """
  amount: Float

  """Text shown with the amount"""
  amountText: String

  """Whether the transfer qualifies as a liquidation."""
  isLiquidation: Boolean!

  """The line items associated with the transfer amount"""
  amountLineItems: [TransferAmountLineItem!]

  """
  The primary CTA button with a type associated with it that will be used
  to determine the correct mutation to call.
  """
  primaryButton: AppAction!

  """The secondary CTA button"""
  secondaryButton: AppButton!

  """Primary messages are related to disclaimers and timing information."""
  primaryMessages: [TransferValidationMessage!]

  """
  Secondary messages were originally intended for timing information,
  but are not being populated at the moment.
  As of 2/22/24, we decided to roll secondary messages into primary messages,
  due to the styling being identical.
  We are keeping this field to potentially use in the future.
  The intention is that this field would be used if additional messages
  were required in the future, with different styling than primaryMessages.
  """
  secondaryMessages: [TransferValidationMessage!]

  """Text associated with CTA buttons"""
  ctaText: RichTextContent

  """Validation disclosure content"""
  disclosureContent: [RichTextContent]
}

enum TransferValidationMessageTypeEnum {
  LIQUIDATION
  PENDING_SELLS
  IRA_CONTRIBUTION_YEAR
  SCHEDULE_FREQUENCY
  SCHEDULE_START
  AMOUNT_GREATER_THAN_CASH_AVAILABLE
}

type TransferValidationMessage {
  """The type of validation message"""
  type: TransferValidationMessageTypeEnum!

  """Text associated with the message"""
  text: [String!]!
}

type TransferAmountLineItem {
  """The key for the line item"""
  key: String!

  """The label for the line item"""
  label: String!

  """The amount for the line item"""
  value: Float!

  """The formatted dollar value for the line item"""
  formattedValue: String!
}

type ValueSnapshot {
  """The date and time of the snapshot, in ISO 8601 format."""
  asOf: String!

  """The abolute dollar amount."""
  value: Float
}

type Viewer implements Node {
  """
  Content for screens that come before login & sign up, when the user is not yet Authenticated.
  """
  unauthenticated: Unauthenticated

  """List of all available accounts."""
  accounts(
    after: String

    """When true, filter the list for only crypto accounts."""
    filterCryptoOnly: Boolean

    """
    When true, filter the list for only those accounts that are eligible to be selected as the payments account. The currently selected payments account may be included. Takes precendence over other filter arguments.
    """
    filterForPaymentsEligibility: Boolean

    """When true, filter the list for only retirement accounts."""
    filterForRetirementOnly: Boolean

    """When true, filter valid accounts for ACAT destinations."""
    filterForValidAcatDestinations: Boolean

    """
    When provided and non-empty, filter the list to include only accounts with a specified originator.
    """
    filterOriginator: [AccountOriginatorEnum!] = [APEX, M1]

    """
    When provided and non-empty, filter the list to include only accounts with a specified registration.
    """
    filterRegistration: [BrokerAccountRegistrationEnum]

    """
    When provided and non-empty, filter the list to include only accounts with a specified status. The default value is `[NEW, OPENED, REJECTED]`.
    """
    filterStatus: [AccountStatusEnum!] = [NEW, OPENED, REJECTED]
    first: Int
  ): AccountConnection

  """active security symbols"""
  activeSecuritySymbols: [String]

  """Fetches an object given its ID"""
  anyNode(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches multiple objects given their IDs"""
  anyNodes(ids: [ID!]!): [Node]

  """Borrow."""
  borrow: Borrow

  """Entrypoint for Contact Us screen"""
  contactUs: ContactUs

  """Credit card."""
  credit: Credit

  """Crypto."""
  crypto: Crypto

  """Entry point for Document Upload Requests screen."""
  documentUploadRequestsCenter: DocumentUploadRequestsCenter

  """
  A list of documents for all accounts. Value is null if documents are temporarily unavailable.
  """
  documents(
    after: String

    """The type of documents to include."""
    documentType: DocumentTypeFilterEnumType

    """End date, inclusive, in YYYY-MM-DD format."""
    endDate: String

    """A document filter setting. Default is to include all document types."""
    filter: DocumentFilterInput = {includeFilter: [ACCOUNT_DOCUMENT, STATEMENT, TAX_FORM, TRADE_CONFIRMATION], includeStatements: true, includeTaxForms: true, includeTradeConfirmations: true, statementType: null}
    first: Int

    """
    A list of options to sort by. Default is by date descending, then type descending, then account descending.
    """
    sort: [DocumentSortOptionInput!] = [{direction: DESC, type: DATE}, {direction: DESC, type: TYPE}, {direction: DESC, type: ACCOUNT}]

    """Start date, inclusive, in YYYY-MM-DD format."""
    startDate: String
  ): DocumentConnection

  """HYSA and Cash Accounts"""
  earn: Earn

  """Email verification page copy and illustration"""
  emailVerificationPage: EmailVerificationPage

  """
  Feature flags for this viewer. Value will be null if the feature flag system is temporarily unavailable.
  """
  featureFlags: FeatureFlags

  """Feedback Form in Settings"""
  feedbackForm: FeedbackForm

  """Funding sources from external accounts"""
  fundingSources: FundingSources

  """The ID of this node."""
  id: ID!

  """Invest."""
  invest: Invest

  """Information about current IRS regulations."""
  irsRegulations: IrsRegulations!

  """Value is `true` when the user is authenticated, `false` otherwise."""
  isAuthenticated: Boolean!

  """The latest agreement bundle."""
  latestAgreements: AgreementBundle!

  """Information about markets."""
  markets: Markets!

  """Net worth data"""
  netWorth: NetWorth

  """Notifications."""
  notifications: Notifications

  """Onboarding"""
  onboarding: Onboarding

  """Overview."""
  overview: Overview

  """
  Experimental. Attempt to read a pie edit model from a pie share token. Value will be null if token is not valid.
  """
  pieEditModelForShareToken(
    """A pie share token."""
    shareToken: String!
  ): String @deprecated(reason: "Use sharedPie instead.")
  sharedPie(
    """A pie share token."""
    shareToken: String!
  ): SharedPie

  """Plus."""
  plus: Plus

  """
  Retrieve profile information for the viewer. Value is null if no profile information has been established.
  """
  profile: Profile

  """Authenticated Promotions"""
  promotions: Promotions

  """
  Attempt to read a serialized pie edit model. Value will be null if the edit model input is not valid.
  """
  readPieEditModel(
    """A serialized pie edit model."""
    editModel: String!
  ): PieEditModel

  """
  Information about referrals get and give amounts, along with referral title for a unauthenticated visitors.
  """
  referralOffer: ReferralOffer

  """Research."""
  research: Research

  """B2 Savings Accounts"""
  save: Save

  """Returns funds that match the selection criteria."""
  screenFunds(
    after: String

    """
    A path within the fund category hierarchy to filter results by. Default is no filter.
    """
    filterCategory: [String!] = []

    """
    A list of security statuses to filter results by. Default is only active securities.
    """
    filterStatuses: [SecurityStatusEnum!] = [ACTIVE]
    first: Int

    """A list of options to limit results by. Default is no limits."""
    limit: [FundLimitOptionInput!] = []

    """A list of options to sort results by. Default is an undefined sort."""
    sort: [FundSortOptionInput!] = []
  ): FundScreenerConnection!

  """Returns securities that match the selection criteria."""
  screenSecurities(
    after: String

    """
    A path within the security category hierarchy to filter results by. Default is no filter.
    """
    filterCategory: [String!] = []

    """
    A list of security statuses to filter results by. Default is only active securities.
    """
    filterStatuses: [SecurityStatusEnum!] = [ACTIVE]

    """A list of security types to filter results by. Default is no filter."""
    filterTypes: [SecurityTypeEnum!] = []
    first: Int

    """A list of options to limit results by. Default is no limits."""
    limit: [SecurityLimitOptionInput!] = []

    """A list of options to sort results by. Default is an undefined sort."""
    sort: [SecuritySortOptionInput!] = []
  ): SecurityScreenerConnection!

  """Returns system pies that match the selection criteria."""
  screenSystemPies(
    after: String

    """
    A path within the system pie category hierarchy to filter results by. Default is no filter.
    """
    filterCategory: [String!] = []

    """
    A list of system pie statuses to filter results by. Default is only active system pies.
    """
    filterStatuses: [SystemPieStatusEnum!] = [ACTIVE]
    first: Int

    """A list of options to limit results by. Default is no limits."""
    limit: [SystemPieLimitOptionInput!] = []

    """A list of options to sort results by. Default is an undefined sort."""
    sort: [SystemPieSortOptionInput!] = []
  ): SystemPieScreenerConnection!

  """Returns securities that match the selection criteria."""
  searchSliceables(
    after: String

    """
    A list of sliceable statuses to filter results by. Default is only active sliceables.
    """
    filterStatuses: [SliceableStatusEnum!] = [ACTIVE]

    """A list of sliceable types to filter results by. Default is no filter."""
    filterTypes: [SliceableTypeEnum!] = []
    first: Int

    """Free-form query text used to search for sliceables."""
    query: String!
  ): SliceableConnection!

  """Retrieve securities by their symbols."""
  securities(symbols: [String!]!): [Security]

  """Security details is used for pages.m1.com security details pages."""
  securityDetails(symbol: String!): SecurityDetails

  """Settings."""
  settings: Settings

  """
  Sets of sliceables for showcase display. Value is null when the showcase is disabled.
  """
  sliceableShowcase: SliceableShowcase

  """Spend Checking."""
  spend: Spend

  """Support."""
  support: Support

  """Retrieve system pie by their key."""
  systemPiesByKey(keys: [String!]!): [SystemPie]

  """Transfers."""
  transfers: Transfers

  """The current user. Value is null when unauthenticated."""
  user: User

  """Retrieve all available user pies."""
  userPies(
    after: String
    before: String
    first: Int

    """Indicates whether query is for Crypto pies or not."""
    isCrypto: Boolean
    last: Int
  ): UserPieConnection

  """Announcements."""
  announcements: Announcements
}

type Query {
  """
  Information for a specific client type and version. Value is null if the client is not recognized.
  """
  client(
    """
    A client identifier. Expected format is: `${type}/${semver}`. Takes precedence over client identifers sent outside the query. (Like the `X-Client-Id` HTTP header.)
    """
    id: String

    """A client type identifier."""
    type: String

    """A client version string."""
    version: String
  ): ClientInfo
  viewer: Viewer!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches multiple objects given their IDs"""
  nodes(ids: [ID!]!): [Node]
  system: SystemInfo!
}

"""Input for the `registerUser` mutation."""
input RegisterUserInput {
  clientMutationId: String

  """A username."""
  username: String!

  """A password."""
  password: String!

  """An optional referrer code."""
  referrerCode: String

  """An optional affiliate code."""
  affiliateCode: String

  """
  Optional information about the referring marketing campaign, if available.
  """
  attribution: CampaignAttributionInput

  """Optional promotion code to apply to the user."""
  promoCode: String

  """
  The signature associated with the Terms and Conditions a user must accept when signing up with a promo code.
  """
  promoCodeBundleSignature: String
}

"""Information about a referring campaign."""
input CampaignAttributionInput {
  """The referrer (`utm_source`)."""
  source: String!

  """The marketing medium (`utm_medium`)."""
  medium: String!

  """The campaign name (`utm_campaign`)."""
  campaign: String!

  """The paid term (`utm_term`)."""
  term: String

  """The content identifier (`utm_content`)."""
  content: String
}

"""Payload for the `registerUser` mutation."""
type RegisterUserPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: RegisterUserOutcome
  error: RegisterUserErrorEnum
  result: RegisterUserResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  username: String @deprecated(reason: "Use `outcome` instead.")
  accessToken: String @deprecated(reason: "Use `outcome` instead.")
  refreshToken: String @deprecated(reason: "Use `outcome` instead.")
  expiresIn: Int @deprecated(reason: "Use `outcome` instead.")
  viewer: Viewer @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `registerUser` mutation."""
type RegisterUserOutcome {
  """The username of this user."""
  username: String

  """The access token."""
  accessToken: String

  """The refresh token."""
  refreshToken: String

  """Retrieve details for the current user."""
  viewer: Viewer

  """Outcome screen content after a user registers with a promoCode."""
  promotionSignUpOutcomePage: AppInfoPage

  """The event to track for analytics."""
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Errors for the `registerUser` mutation."""
enum RegisterUserErrorEnum {
  """The username is not acceptable."""
  INVALID_USERNAME

  """The password is too simple."""
  INVALID_PASSWORD

  """The username already exists."""
  USERNAME_ALREADY_EXISTS
}

type RegisterUserResult {
  didSucceed: Boolean!
  inputError: RegisterUserInputErrorEnum
}

enum RegisterUserInputErrorEnum {
  INVALID_USERNAME
  INVALID_PASSWORD
  USERNAME_ALREADY_EXISTS
}

"""Input for the `queueLoanDisbursement` mutation."""
input QueueLoanDisbursementInput {
  clientMutationId: String

  """The loan ID for the personal loan being disbursed."""
  loanId: String!

  """
  The transfer participant ID for the desired disbursement account destination.
  """
  transferParticipantId: String!
}

"""Payload for the `queueLoanDisbursement` mutation."""
type QueueLoanDisbursementPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: QueueLoanDisbursementOutcome
  error: QueueLoanDisbursementErrorEnum
}

"""Errors for the `queueLoanDisbursement` mutation."""
enum QueueLoanDisbursementErrorEnum {
  """Generic queue loan disbursement error."""
  GENERIC_QUEUE_LOAN_DISBURSEMENT_ERROR
}

"""Outcome for the `queueLoanDisbursement` mutation."""
type QueueLoanDisbursementOutcome {
  """
  Analytics event for the successful distribution of personal loan funds.
  """
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Input for the `openAccount` mutation."""
input OpenAccountInput {
  clientMutationId: String

  """Registation type of investment account to open."""
  registration: OnlineAccountRegistrationEnum!

  """
  The social security number of the primary account holder. Only required when a user profile does not exist yet.
  """
  primarySsn: SocialSecurityNumber

  """
  The social security number of the secondary account holder. Only required for joint accounts.
  """
  secondarySsn: SocialSecurityNumber

  """
  No longer applicable. Stop sending this input so that it can be removed.
  """
  beneficiarySsns: [SocialSecurityNumber!]

  """
  Information about the primary account holder. Required if this is the first
  account with a primary account holder; ignored otherwise.
  """
  primary: NewAccountHolderInput

  """
  Information about the secondary account holder. Required for joint accounts if
  this is the first account with a secondary account holder; ignored otherwise.
  """
  secondary: NewAccountHolderInput

  """
  Suitability information about the applicant(s). Required if this is the first
  account with a primary account holder; ignored otherwise.
  """
  suitability: SuitabilityProfileInput

  """
  Optionally set the root pie for the account. Default is opening the account with no root pie set.
  """
  rootPieId: ID

  """
  The user has opted-into receive information about initial transfers. Default is false.
  """
  transferInfoOptIn: Boolean = false

  """
  Superceded by `signature` input. Stop sending a value for this so that it can be removed.
  """
  eSigned: Boolean

  """
  The signature of the agreement bundle. If not provided, then `eSigned` must be
  specified and `true`. In the future `eSigned` will be removed and this field
  will be required.
  """
  signature: String

  """Information about the user's trusted account."""
  trustedContact: TrustedContactInput

  """
  Optional fully paid lending status - Not all account registration types are eligible. For Apex cleared accounts - FPL status must be updated before initiating account opening.
  """
  fplStatus: Boolean
}

"""Input for the `openCustodialAccount` mutation."""
input OpenCustodialAccountInput {
  clientMutationId: String

  """Information about the custodial account holder (beneficiary)."""
  custodialAccountBeneficiary: NewCustodialAccountBeneficiaryInput!

  """The custodial account beneficiary's social security number"""
  custodialAccountBeneficiarySsn: SocialSecurityNumber!

  """The signature of the agreement bundle."""
  signature: String!
}

"""An account registration type availabe for online opening."""
enum OnlineAccountRegistrationEnum {
  """Individual"""
  INDIVIDUAL

  """Crypto"""
  CRYPTO

  """Joint"""
  JOINT

  """Traditional IRA"""
  TRADITIONAL_IRA

  """Roth IRA"""
  ROTH_IRA

  """SEP IRA"""
  SEP_IRA

  """Custodial"""
  CUSTODIAL
}

"""
A source of introduction for a user. Deprecated - no longer asking for introduction source
"""
enum IntroductionSourceEnum {
  """App Store"""
  APP_STORE

  """Direct/Snail Mail"""
  DIRECT_SNAIL_MAIL

  """Friend or Family"""
  FRIEND_OR_FAMILY

  """Music Video"""
  MUSIC_VIDEO

  """Newsletter"""
  NEWSLETTER

  """Search Engine"""
  SEARCH_ENGINE

  """Social Media"""
  SOCIAL_MEDIA

  """TV/Streaming"""
  TV_STREAMING

  """Website"""
  WEBSITE

  """Other"""
  OTHER

  """Declined to answer"""
  DECLINED_TO_ANSWER
}

"""
A source of introduction for a user. Deprecated - use `IntroductionSourceEnum` instead.
"""
enum IntroductionSourceEnumV2 {
  """App Store"""
  APP_STORE

  """Direct/Snail Mail"""
  DIRECT_SNAIL_MAIL

  """Friend or Family"""
  FRIEND_OR_FAMILY

  """Newsletter"""
  NEWSLETTER

  """Podcast/Radio"""
  PODCAST_RADIO

  """Search Engine"""
  SEARCH_ENGINE

  """Social Media"""
  SOCIAL_MEDIA

  """TV/Streaming"""
  TV_STREAMING

  """Website"""
  WEBSITE

  """Other"""
  OTHER

  """Declined to answer"""
  DECLINED_TO_ANSWER
}

"""Payload for the `openAccount` mutation."""
type OpenAccountPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: OpenAccountOutcome
  error: OpenAccountErrorEnum
  result: OpenAccountResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  viewer: Viewer @deprecated(reason: "Use `outcome` instead.")
  accountEdge: AccountEdge @deprecated(reason: "Use `outcome` instead.")
  account: Account @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `openAccount` mutation."""
type OpenAccountOutcome {
  """Retrieve details for the current user."""
  viewer: Viewer

  """Retrieve the newly-created account."""
  account: Account

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Errors for the `openAccount` mutation."""
enum OpenAccountErrorEnum {
  """The user cannot open another SEP IRA account"""
  DUPLICATE_SEP_IRA_ACCOUNT

  """The user cannot open another Roth IRA account"""
  DUPLICATE_ROTH_IRA_ACCOUNT

  """The user cannot open another Traditional IRA account"""
  DUPLICATE_TRADITIONAL_IRA_ACCOUNT

  """The user cannot open another IRA account"""
  DUPLICATE_IRA_ACCOUNT

  """The user cannot open another Individual account"""
  DUPLICATE_INDIVIDUAL_ACCOUNT

  """The user cannot open another Joint account"""
  DUPLICATE_JOINT_ACCOUNT

  """
  The social security numbers of the primary and secondary account holders must not match.
  """
  SSNS_MUST_NOT_MATCH

  """
  The full legal name (first, plus middle if present, plus last, with separating
  spaces) of the primary account holder may not be longer than 30 characters.
  """
  PRIMARY_HOLDER_NAME_TOO_LONG

  """
  The full legal name (first, plus middle if present, plus last, with separating
  spaces) of the secondary account holder may not be longer than 30 characters.
  """
  SECONDARY_HOLDER_NAME_TOO_LONG

  """
  The date of birth of the primary account holder is invalid. Account holders
  must be at least 18 years old and at most 120 years old.
  """
  INVALID_PRIMARY_HOLDER_DOB

  """
  The date of birth of the secondary account holder is invalid. Account holders
  must be at least 18 years old and at most 120 years old.
  """
  INVALID_SECONDARY_HOLDER_DOB

  """
  No additional accounts may be opened while some existing accounts are in new status.
  """
  NO_ADDITIONAL_ACCOUNTS_WHILE_SOME_NEW

  """
  No additional accounts may be opened while some existing accounts are in rejected status.
  """
  NO_ADDITIONAL_ACCOUNTS_WHILE_SOME_REJECTED

  """
  The maximum number of account requests have been made within the rate limit time period.
  """
  EXCEEDS_NEW_ACCOUNT_RATE_LIMIT

  """
  The maximum number of unclosed accounts has been reached and no more can be opened.
  """
  EXCEEDS_MAX_ACCOUNTS

  """The home address may not be a P.O. box."""
  HOME_ADDRESS_CANNOT_BE_PO_BOX

  """The provided home address is invalid."""
  INVALID_HOME_ADDRESS

  """
  The phone number for the primary applicant must be the same number as the one used to verify the user.
  """
  PHONE_MUST_MATCH_VERIFICATION

  """
  If trusted contact is set, either an email, a phone number, or both an email and phone number must be included.
  """
  MISSING_TRUSTED_CONTACT_INFO

  """The new account request is rejected for an unspecified reason."""
  GENERAL_REJECTION

  """The country code provided is invalid."""
  INVALID_COUNTRY_CODE

  """Failed to update fully paid lending status."""
  FAILED_TO_UPDATE_FPL_STATUS
}

type OpenAccountResult {
  didSucceed: Boolean!
  inputError: OpenAccountInputErrorEnum
}

enum OpenAccountInputErrorEnum {
  PRIMARY_SSN_REQUIRED
  SECONDARY_SSN_REQUIRED
  BENEFICIARY_SSNS_REQUIRED @deprecated(reason: "No longer applicable.")
  SSNS_MUST_NOT_MATCH
  DUPLICATE_IRA_ACCOUNT
  DUPLICATE_INDIVIDUAL_ACCOUNT
  DUPLICATE_JOINT_ACCOUNT
  PRIMARY_HOLDER_REQUIRED
  SECONDARY_HOLDER_REQUIRED
  SUITABILITY_PROFILE_REQUIRED
  PRIMARY_HOLDER_NAME_TOO_LONG
  SECONDARY_HOLDER_NAME_TOO_LONG
  INVALID_COUNTRY_CODE
  INVALID_PRIMARY_HOLDER_DOB
  INVALID_SECONDARY_HOLDER_DOB
  INVALID_PRIMARY_SSN @deprecated(reason: "No longer applicable.")
  INVALID_SECONDARY_SSN @deprecated(reason: "No longer applicable.")
  INVALID_BENEFICIARY_SSNS @deprecated(reason: "No longer applicable.")
  NO_ADDITIONAL_ACCOUNTS_WHILE_SOME_NEW
  NO_ADDITIONAL_ACCOUNTS_WHILE_SOME_REJECTED
  EXCEEDS_NEW_ACCOUNT_RATE_LIMIT
  EXCEEDS_MAX_ACCOUNTS
  HOME_ADDRESS_CANNOT_BE_PO_BOX
  INVALID_HOME_ADDRESS
  INVALID_PIE_ID
  PIE_NOT_FOUND
  INELIGIBLE_FOR_ROOT_PIE
  ESIGNATURE_REQUIRED
  INVALID_SIGNATURE
  PHONE_VERIFICATION_REQUIRED
  PHONE_MUST_MATCH_VERIFICATION
  PHONE_ALREADY_USED
  GENERAL_REJECTION
}

"""Payload for the `openCustodialAccount` mutation."""
type OpenCustodialAccountPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: OpenCustodialAccountOutcome
  error: OpenCustodialAccountErrorEnum
}

"""Outcome for the `openCustodialAccount` mutation."""
type OpenCustodialAccountOutcome {
  """Retrieve details for the current user."""
  viewer: Viewer

  """Retrieve the newly-created account."""
  account: Account
}

"""Errors for the `openCustodialAccount` mutation."""
enum OpenCustodialAccountErrorEnum {
  """
  Users cannot open a custodial account without having an individual account first.
  """
  USER_DOES_NOT_HAVE_INDIVIDUAL_ACCOUNT

  """
  The beneficiary information entered is already associated to a Custodial Account.
  """
  CUSTODIAL_BENEFICIARY_ALREADY_ASSOCIATED_TO_CUSTODIAL_ACCOUNT

  """There was an issue fetching the custodian's user profile."""
  COULD_NOT_FETCH_PRIMARY_PROFILE

  """
  The full legal name (first, plus middle if present, plus last, with separating
  spaces) of the custodial account beneficiary may not be longer than 30 characters.
  """
  CUSTODIAL_BENEFICIARY_NAME_TOO_LONG

  """
  The date of birth of the primary account holder is invalid. Account holders
  must be younger than 25 years old (but varies by state).
  """
  INVALID_CUSTODIAL_BENEFICIARY_DOB

  """
  No additional accounts may be opened while some existing accounts are in new status.
  """
  NO_ADDITIONAL_ACCOUNTS_WHILE_SOME_NEW

  """
  No additional accounts may be opened while some existing accounts are in rejected status.
  """
  NO_ADDITIONAL_ACCOUNTS_WHILE_SOME_REJECTED

  """
  The custodial account beneficiary's legal residence may not be a P.O. box.
  """
  HOME_ADDRESS_CANNOT_BE_PO_BOX

  """
  The provided legal residence for the custodial account beneficiary is invalid.
  """
  INVALID_LEGAL_RESIDENCE

  """The new account request is rejected for an unspecified reason."""
  GENERAL_REJECTION
}

"""Input for the `updateProfile` mutation."""
input UpdateProfileInput {
  clientMutationId: String

  """Updated profile information."""
  profile: ProfileInput!

  """
  The initial product for a given user when they were onboarded. This value can be null to leave the corresponding BE value in-tact.
  """
  productSelection: ProductListIdentifier
}

"""Payload for the `updateProfile` mutation."""
type UpdateProfilePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: UpdateProfileOutcome
  error: UpdateProfileErrorEnum
  result: UpdateProfileResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  viewer: Viewer @deprecated(reason: "Use `outcome` instead.")
  profile: Profile @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `updateProfile` mutation."""
type UpdateProfileOutcome {
  """Retrieve details for the current user."""
  viewer: Viewer

  """Retrieve the updated profile."""
  profile: Profile
}

"""Errors for the `updateProfile` mutation."""
enum UpdateProfileErrorEnum {
  """
  Profile updates may not be made while the current profile information is unaccepted.
  """
  NO_UPDATE_UNTIL_ACCEPTED

  """The home address may not be a P.O. box."""
  HOME_ADDRESS_CANNOT_BE_PO_BOX

  """The home address provided is invalid."""
  INVALID_HOME_ADDRESS

  """
  If beneficiaries are set, the social security numbers for each beneficiary must be unique.
  """
  BENEFICIARY_SSNS_MUST_BE_UNIQUE

  """
  If beneficiaries are set, there must be at least one primary beneficiary, and
  the sum of the share percentages for the primary beneficiaries must equal 100.
  """
  INVALID_PRIMARY_BENEFICIARY_SHARE

  """
  If beneficiaries are set, and there are contingent beneficiaries specified,
  the sum of the share percentages for the contingent beneficiaries must equal 100.
  """
  INVALID_CONTINGENT_BENEFICIARY_SHARE

  """
  Profile updates are temporarily frozen for a short period after a new account is opened. Try again later.
  """
  TEMPORARY_NEW_ACCOUNT_FREEZE

  """
  If trusted contact is set, either an email, a phone number, or both an email and phone number must be included.
  """
  MISSING_TRUSTED_CONTACT_INFO
}

type UpdateProfileResult {
  didSucceed: Boolean!
  inputError: UpdateProfileInputErrorEnum
}

enum UpdateProfileInputErrorEnum {
  NO_PROFILE
  MUST_PROVIDE_SECONDARY_ACCOUNT_HOLDER
  NO_UPDATE_UNTIL_ACCEPTED
  PRIMARY_HOLDER_NAME_TOO_LONG
  SECONDARY_HOLDER_NAME_TOO_LONG
  HOME_ADDRESS_CANNOT_BE_PO_BOX
  INVALID_HOME_ADDRESS
  BENEFICIARIES_NOT_ALLOWED
  BENEFICIARY_SSNS_MUST_BE_UNIQUE
  INVALID_PRIMARY_BENEFICIARY_SHARE
  INVALID_CONTINGENT_BENEFICIARY_SHARE
  TEMPORARY_NEW_ACCOUNT_FREEZE
  GENERAL_REJECTION
}

input CompleteDocumentUploadRequestInput {
  clientMutationId: String

  """The ID of the associated document upload request."""
  documentUploadRequestId: ID!
}

type CompleteDocumentUploadRequestPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: CompleteDocumentUploadErrorEnum
}

input CompleteDocumentUploadInput {
  clientMutationId: String

  """The associated service for the uploaded document."""
  associatedService: DocumentAssociatedService

  """The business purpose for the uploaded document."""
  businessPurpose: DocumentBusinessPurpose
}

type CompleteDocumentUploadPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: CompleteDocumentUploadErrorEnum
}

enum CompleteDocumentUploadErrorEnum {
  ERROR_VERIFYING_DOCUMENT_UPLOAD_STATUS
}

"""Input for the `linkExternalAccounts` mutation."""
input LinkExternalAccountsInput {
  clientMutationId: String

  """The `public_token` generated by Plaid Link."""
  plaidLinkPublicToken: String!

  """
  Use an Invest account ID to specify an identity with which to associate the
  linked accounts. Only use this when linking accounts for use with a specific
  Invest account. Otherwise, omit and the linked accounts will be associated
  with the authenticated user.
  """
  accountId: ID
}

"""Payload for the `linkExternalAccounts` mutation."""
type LinkExternalAccountsPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: LinkExternalAccountsOutcome
  error: LinkExternalAccountsErrorEnum
  result: LinkExternalAccountsResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  account: Account @deprecated(reason: "Use `outcome` instead.")
  externalAccountEdges: [ExternalAccountEdge!] @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `linkExternalAccounts` mutation."""
type LinkExternalAccountsOutcome {
  """The external accounts that were linked with the supplied token."""
  linkedExternalAccounts: [ExternalAccount]
}

"""Errors for the `linkExternalAccounts` mutation."""
enum LinkExternalAccountsErrorEnum {
  """The supplied Plaid token is forbidden."""
  LINK_FORBIDDEN
}

type LinkExternalAccountsResult {
  didSucceed: Boolean!
  inputError: LinkExternalAccountsInputErrorEnum
}

enum LinkExternalAccountsInputErrorEnum {
  LINK_FORBIDDEN
}

"""Input for the `refreshEstimatedTrading` mutation."""
input RefreshEstimatedTradingInput {
  clientMutationId: String

  """The `EstimatedTrading` ID that should be refreshed."""
  estimatedTradingId: ID!
}

"""Payload for the `refreshEstimatedTrading` mutation."""
type RefreshEstimatedTradingPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: RefreshEstimatedTradingOutcome
  error: RefreshEstimatedTradingErrorEnum
  result: RefreshEstimatedTradingResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  estimatedTrading: EstimatedTrading @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `refreshEstimatedTrading` mutation."""
type RefreshEstimatedTradingOutcome {
  """The updated estimated trading information."""
  estimatedTrading: EstimatedTrading
}

"""Errors for the `refreshEstimatedTrading` mutation."""
enum RefreshEstimatedTradingErrorEnum {
  """Estimated trading information is not currently available."""
  ESTIMATED_TRADING_NOT_AVAILABLE
}

type RefreshEstimatedTradingResult {
  didSucceed: Boolean!
}

"""Input for the `setSmartTransferRule` mutation."""
input SetSmartTransferRuleInput {
  clientMutationId: String

  """
  Specify a `SmartTransferRule` ID to update an existing rule. Otherwise, a new
  smart transfer rule is created.
  """
  existingSmartTransferRuleId: ID

  """
  The `TransferParticipant` that is the focus of the rule. Required when
  creating a new smart transfer, and ignored otherwise.
  """
  focusParticipantId: ID

  """The trigger for the smart transfer to take action."""
  balanceTrigger: SmartTransferBalanceTriggerInput!

  """An ordered list of contra participant entries for the smart transfer."""
  contraParticipantEntries: [SmartTransferContraParticipantEntryInput!]!

  """Smart transfer rule scenario."""
  scenario: TransferScenarioTypeEnum
}

"""Input for creating an smart transfer balance trigger."""
input SmartTransferBalanceTriggerInput {
  """The type of balance trigger."""
  balanceTriggerType: SmartTransferBalanceTriggerTypeEnum!

  """The amount at which the trigger fires."""
  balanceThreshold: Float!

  """For under-balance triggers, the optional refill target balance amount."""
  underBalanceRefillTarget: Float
}

"""A single smart transfer contra participant entry."""
input SmartTransferContraParticipantEntryInput {
  """
  Provide a `SmartTransferContraParticipantEntry` ID to update an existing
  contra particiant entry. Otherwise, a new contra participant entry is created.
  """
  existingContraParticipantEntryId: ID

  """
  The contra `TransferParticipant`. Required when creating a new contra
  participant entry. When `existingContraParticipantEntryId` is provided, this
  input is not necessary. If both `existingContraParticipantEntryId` and
  `contraParticipantId` are provided and `existingContraParticipantEntryId`
  refers to an entry with a different contra participant, it is an error.
  """
  contraParticipantId: ID

  """The fulfillment condition for this contra participant entry."""
  fulfillmentCondition: SmartTransferFulfillmentConditionInput!
}

"""Input for specifying a fulfillment condition."""
input SmartTransferFulfillmentConditionInput {
  """The type of fulfillment condition."""
  fulfillmentConditionType: SmartTransferFulfillmentConditionTypeEnum!

  """Required for `CASH_BALANCE_CAP`. The cash balance cap amount."""
  capAmount: Float

  """Required for `FUNDING_PER_PERIOD`. The max funding amount."""
  fundingAmount: Float

  """
  Required for `FUNDING_PER_PERIOD`. Also used for all `IRA_{{ PERIOD }}_FUNDING_PER_PERIOD`. The time period.
  """
  fundingPeriod: SmartTransferFundingTimePeriodEnum

  """Required for `CREDIT_BORROWED_CAP`. The Borrow cap amount."""
  borrowAmount: Float

  """Required for `CREDIT_UTILIZATION_CAP`. The percent Borrow utilization."""
  borrowUtilization: Int
}

"""Payload for the `setSmartTransferRule` mutation."""
type SetSmartTransferRulePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetSmartTransferRuleOutcome
  error: SetSmartTransferRuleErrorEnum
}

"""Outcome for the `setSmartTransferRule` mutation."""
type SetSmartTransferRuleOutcome {
  """The newly-created or now-updated smart transfer rule."""
  rule: SmartTransferRule
}

"""Errors for the `setSmartTransferRule` mutation."""
enum SetSmartTransferRuleErrorEnum {
  """The user is not eligible to use smart transfers."""
  NOT_ELIGIBLE

  """The provided participant configuration is invalid."""
  PARTICIPANTS_INVALID

  """The rule cannot be set because it conflicts with an existing rule."""
  CONFLICTS_WITH_EXISTING_RULE

  """The provided balance trigger threshold is invalid."""
  BALANCE_TRIGGER_THRESHOLD_INVALID
}

"""Input for the `setEnabledOnTransferRule` mutation."""
input SetEnabledOnTransferRuleInput {
  clientMutationId: String

  """
  The ID of the `TransferRule` to enable or disable. Must be an ID for a type
  that implements the `TransferRule` interface.
  """
  transferRuleId: ID!

  """The enabled status to set on the rule."""
  isEnabled: Boolean!
}

"""Payload for the `setEnabledOnTransferRule` mutation."""
type SetEnabledOnTransferRulePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetEnabledOnTransferRuleOutcome
  error: SetEnabledOnTransferRuleErrorEnum
}

"""Outcome for the `setEnabledOnTransferRule` mutation."""
type SetEnabledOnTransferRuleOutcome {
  """The updated transfer rule."""
  rule: TransferRule
}

"""Errors for the `setEnabledOnTransferRule` mutation."""
enum SetEnabledOnTransferRuleErrorEnum {
  """Enabling or disabling the transfer rule is not allowed."""
  ENABLE_STATE_CHANGE_DISALLOWED
}

"""Input for the `createAccountDocumentLink` mutation."""
input CreateAccountDocumentLinkInput {
  clientMutationId: String

  """The ID of the account document."""
  accountDocumentId: ID!
}

"""Payload for the `createAccountDocumentLink` mutation."""
type CreateAccountDocumentLinkPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CreateAccountDocumentLinkOutcome
  error: CreateAccountDocumentLinkErrorEnum
}

"""Outcome for the `createAccountDocumentLink` mutation."""
type CreateAccountDocumentLinkOutcome {
  """The temporary URL to the document. It will expire after time."""
  url: String!
}

"""Errors for the `createAccountDocumentLink` mutation."""
enum CreateAccountDocumentLinkErrorEnum {
  """The document is not currently available to download."""
  DOCUMENT_NOT_AVAILBLE
}

""""Input for the `generatePlaidLinkItemAddClientToken` mutation."""
input GeneratePlaidLinkItemAddClientTokenInput {
  clientMutationId: String
  fundingSourceId: String
  automatedMicroEnabled: Boolean
  sameDayMicroEnabled: Boolean
}

"""Payload for the `generatePlaidLinkItemAddClientToken` mutation."""
type GeneratePlaidLinkItemAddClientTokenPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: GeneratePlaidLinkItemAddClientTokenOutcome
}

"""Outcome for the `generatePaymentClientToken` mutation."""
type GeneratePlaidLinkItemAddClientTokenOutcome {
  """Token used to connect to establish an ACH relationship via Plaid."""
  plaidLinkItemAddToken: String!
}

"""Input for the `generatePaymentClientToken` mutation."""
input GeneratePaymentClientTokenInput {
  clientMutationId: String
}

"""Payload for the `generatePaymentClientToken` mutation."""
type GeneratePaymentClientTokenPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: GeneratePaymentClientTokenOutcome
}

"""Outcome for the `generatePaymentClientToken` mutation."""
type GeneratePaymentClientTokenOutcome {
  """Token used to initialize the payment client. Expires after 24 hours."""
  clientToken: String!
}

"""Input for the `generatePresignedDocumentUploadRequestUrl` mutation."""
input GeneratePresignedDocumentUploadRequestUrlInput {
  clientMutationId: String

  """The ID of the document upload request."""
  documentUploadRequestId: ID!

  """
  The Document type a user claims to be uploading.
  This value is to be derived from the `DocumentUploadOption` the user selected.
  This value is intentionally typed as a String instead of an Enum to allow BE the flexibility to add/remove values without any FE changes.
  """
  documentType: String!

  """The file name for the document as defined by the user."""
  fileName: String!
}

"""
Input for the `generateGenericPresignedDocumentUrl` mutation.
Note: This input is similar to `GeneratePresignedUrlInput` but with optional fields.
"""
input GenerateGenericPresignedDocumentUrlInput {
  clientMutationId: String

  """
  Optional information about the business purpose that the document upload is related to.
  It is optional due to being added after the initial implementation.
  """
  businessPurpose: DocumentBusinessPurpose

  """
  Optional information about the service that the document upload is associated with.
  It is optional due to being added after the initial implementation.
  """
  associatedService: DocumentAssociatedService

  """The file name for the document as defined by the user."""
  fileName: String!
}

"""Input for the `generatePresignedUrl` mutation."""
input GeneratePresignedUrlInput {
  clientMutationId: String

  """
  Information about the business purpose that the document upload is related to.
  """
  businessPurpose: DocumentBusinessPurpose!

  """Information about the type of the document to upload."""
  documentType: DocumentUploadKindEnum!

  """
  Information about the service that the document upload is associated with.
  """
  associatedService: DocumentAssociatedService!

  """The file name for the document as defined by the user."""
  fileName: String!
}

enum DocumentAssociatedService {
  """The credit card service."""
  CREDIT_CARD

  """The Invest service."""
  INVEST

  """The Spend service."""
  SPEND

  """The Personal Loan service."""
  PERSONAL_LOAN

  """The Lending service."""
  LENDING

  """The Pie service."""
  CRYPTO

  """The Bank Teller/Savings service"""
  SAVE

  """The Big Cash."""
  CASH

  """The Transfer service."""
  TRANSFER

  """The Promotion service."""
  PROMOTION

  """The Identity service."""
  IDENTITY

  """Any other service."""
  OTHER
}

enum DocumentBusinessPurpose {
  """Account verification"""
  ACCOUNT_VERIFICATION

  """Appealing Socure Blocklist"""
  APPEALING_SOCURE_BLOCKLIST

  """Beneficiary"""
  BENEFICIARY

  """Brokerage Manual Review"""
  BROKERAGE_MANUAL_REVIEW

  """Client Letter"""
  CLIENT_LETTER

  """Credit Card Manual Review"""
  CREDIT_CARD_MANUAL_REVIEW

  """Deceased Account Closure"""
  DECEASED_ACCOUNT_CLOSURE

  """Information Change"""
  INFORMATION_CHANGE

  """Letter Of Indemnification"""
  LETTER_OF_INDEMNIFICATION

  """Manual Bank Change"""
  MANUAL_BANK_CHANGE

  """Paper Account"""
  PAPER_ACCOUNT

  """Spend Manual Review"""
  SPEND_MANUAL_REVIEW

  """Transfer Review"""
  TRANSFER_REVIEW

  """Wire Transfer Form"""
  WIRE_TRANSFER_FORM

  """Transfer Request Form"""
  TRANSFER_REQUEST_FORM

  """Cease Desist"""
  CEASE_DESIST

  """Loan Agreement"""
  LOAN_AGREEMENT

  """Risk Based Pricing Disclosure"""
  RISK_BASED_PRICING_DISCLOSURE

  """Onboarding Identity Verification"""
  ONBOARDING_IDENTITY_VERIFICATION

  """Clearing Documents"""
  CLEARING_DOCUMENTS

  """Save Documents"""
  SAVE_DOCUMENTS

  """Cash Documents"""
  CASH_DOCUMENTS

  """Spend Documents"""
  SPEND_DOCUMENTS

  """Promotion Documents"""
  PROMOTION_DOCUMENTS

  """Credit Score Disclosure"""
  CREDIT_SCORE_DISCLOSURE

  """Prospectus Delivery"""
  PROSPECTUS_DELIVERY

  """Other"""
  OTHER

  """Unknown"""
  UNKNOWN

  """Crypto Tax Documents"""
  CRYPTO_TAX_DOCUMENTS

  """Invest Tax Documents"""
  INVEST_TAX_DOCUMENTS

  """Citizenship Verification"""
  CITIZENSHIP_VERIFICATION

  """Manual Review Re-Request"""
  MANUAL_REVIEW_RE_REQUEST

  """Personal Loan Manual Review"""
  PERSONAL_LOAN_MANUAL_REVIEW

  """Divorce Distribution"""
  DIVORCE_DISTRIBUTION

  """Transfer Request"""
  TRANSFER_REQUEST
}

enum DocumentUploadRequestStatus {
  Uninitialized
  Requested
  Complete
  Closed
}

"""Payload for the `generatePresignedUrl` mutation."""
type GeneratePresignedUrlPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: GeneratePresignedUrlError
  outcome: GeneratePresignedUrlOutcome
}

"""Payload for the `generateGenericPresignedDocumentUrl` mutation."""
type GenerateGenericPresignedDocumentUrlPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: GeneratePresignedUrlError
  outcome: GenerateGenericPresignedDocumentUrlOutcome
}

"""Outcome for the `generatePresignedUrl` mutation."""
type GeneratePresignedUrlOutcome {
  """Presigned S3 url for upload. Will expire shortly after it's created."""
  presignedUrl: String
}

"""Outcome for the `generateGenericPresignedDocumentUrl` mutation."""
type GenerateGenericPresignedDocumentUrlOutcome {
  """
  The timeout in seconds of the idempotency constraints for limiting file uploads.
  """
  idempotencyTimeout: Int

  """Presigned S3 url for upload. Will expire shortly after it's created."""
  presignedUrl: String
}

"""Errors for the GeneratePresignedUrl mutation."""
enum GeneratePresignedUrlError {
  """The upload has failed. Please try again."""
  ERROR_GENERATING_PRESIGNED_URL
}

"""Input for the `setNotificationPreferences` mutation."""
input SetNotificationPreferencesInput {
  clientMutationId: String

  """Transfer completion notification preferences. Null means no changes."""
  transferCompletion: TransferCompletionNotificationPreferencesInput

  """Invest activity notification preferences. Null means no changes."""
  investActivity: InvestActivityNotificationsPreferencesInput

  """
  Spend Checking transaction notification preferences. Null means no changes.
  """
  spendTransaction: SpendTransactionNotificationPreferencesInput
}

"""Preferences for transfer completion notifications."""
input TransferCompletionNotificationPreferencesInput {
  """Send via push notification. Send null to leave unchanged."""
  sendViaPush: Boolean

  """Send via email. Send null to leave unchanged."""
  sendViaEmail: Boolean
}

"""Preferences for Invest activity notifications."""
input InvestActivityNotificationsPreferencesInput {
  """Send via push notification. Send null to leave unchanged."""
  sendViaPush: Boolean

  """Send via email. Send null to leave unchanged."""
  sendViaEmail: Boolean
}

"""Preferences for Spend Checking transaction notifications."""
input SpendTransactionNotificationPreferencesInput {
  """Send via push notification. Send null to leave unchanged."""
  sendViaPush: Boolean

  """Send via email. Send null to leave unchanged."""
  sendViaEmail: Boolean
}

"""Payload for the `setNotificationPreferences` mutation."""
type SetNotificationPreferencesPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetNotificationPreferencesOutcome
  error: SetNotificationPreferencesErrorEnum
}

"""Outcome for the `setNotificationPreferences` mutation."""
type SetNotificationPreferencesOutcome {
  """The updated preferences."""
  preferences: NotificationPreferences
}

"""Errors for the `setNotificationPreferences` mutation."""
enum SetNotificationPreferencesErrorEnum {
  """Setting notification preferences is not available right now."""
  PREFERENCES_NOT_AVAILABLE
}

"""Input for the `applyPromotionCode` mutation."""
input ApplyPromotionCodeInput {
  clientMutationId: String
  code: String!
}

"""Payload for the `applyPromotionCode` mutation."""
type ApplyPromotionCodePayload {
  clientMutationId: String
  result: ApplyPromotionCodeResult!
  user: User
}

type ApplyPromotionCodeResult {
  didSucceed: Boolean!
  inputError: ApplyPromotionCodeInputErrorEnum
}

enum ApplyPromotionCodeInputErrorEnum {
  UNKNOWN_PROMO_CODE
  PROMO_ALREADY_APPLIED
  PROMO_INELIGIBLE
}

"""Input for the `markUnmanagedHoldingsForLiquidation` mutation."""
input MarkUnmanagedHoldingsForLiquidationInput {
  clientMutationId: String

  """An array of umanaged holding ids to be marked for liquidation."""
  unmanagedHoldingIds: [ID!]!
}

"""Outcome for the `markUnmanagedHoldingsForLiquidation` mutation."""
type MarkUnmanagedHoldingsForLiquidationPayload {
  clientMutationId: String

  """A flag representing whether or not the mutation was succesful."""
  didSucceed: Boolean!

  """Retrieve the newly updated Account."""
  account: Account

  """
  Copy to be rendered that describes an error detected during the mutation. This can be due to either a complete or partial error.
  """
  errorMessage: String

  """Copy to be rendered if the mutation succeeds."""
  successMessage: String
}

"""Input for the `unmarkUnmanagedHoldingsForLiquidation` mutation."""
input UnmarkUnmanagedHoldingsForLiquidationInput {
  clientMutationId: String

  """An array of unmanaged holding ids to be unmarked."""
  unmanagedHoldingIds: [ID!]!
}

"""Outcome for the `unmarkUnmanagedHoldingsForLiquidation` mutation."""
type UnmarkUnmanagedHoldingsForLiquidationPayload {
  clientMutationId: String

  """A flag representing whether or not the mutation was succesful."""
  didSucceed: Boolean!

  """Retrieve the newly updated Account."""
  account: Account

  """
  Copy to be rendered that describes an error detected during the mutation. This can be due to either a complete or partial error.
  """
  errorMessage: String

  """Copy to be rendered if the mutation succeeds."""
  successMessage: String
  error: UnmarkUnmanagedHoldingsForLiquidationErrorEnum
}

enum UnmarkUnmanagedHoldingsForLiquidationErrorEnum {
  GENERAL_ERROR
}

"""Input for the `moveSlices` mutation."""
input MoveSlicesInput {
  clientMutationId: String

  """
  A serialized representation of the Source Pie from which slices are being moved from.
  """
  sourcePieSerialized: String!

  """
  A serialized representation of the Destination Pie tree for which slices are being moved to.
  """
  destinationPieSerialized: String!

  """
  A list of PortfolioSliceIds that represent each Slice from which value is being moved from with a Source Pie.
  """
  moveSliceIds: [ID!]!

  """
  The PortfolioSliceId of the Source Pie from which value is being moved from.
  """
  sourcePiePortfolioSliceId: ID!

  """
  The PortfolioSliceId of the Destination Pie which the value is being moved to.
  """
  destinationPiePortfolioSliceId: ID!

  """
  A serialized representation of the Source Pie as it exists in the database, excluding changes that have been made within the Move Slices flow.
  """
  sourcePieBeforeUpdatesSerialized: String!
}

input MoveSlicesBatchInput {
  clientMutationId: String

  """Array of moves to be applied in order"""
  moves: [MoveSlicesInput!]!

  """
  The final state of the valid pie tree, inclusive of all edits, when the user clicks save
  """
  finalPieTreeInput: UpdatePieTreeInput!
}

"""Outcome for the `moveSlices` mutation."""
type MoveSlicesPayload {
  clientMutationId: String

  """
  Boolean that represents success state of the mutation. Considers both complete and partial errors.
  """
  didSucceed: Boolean!

  """Retrieve the newly updated Account."""
  account: Account

  """
  Copy to rendered if the mutation was successful, null otherwise. If non-null, neither a complete nor partial error was detected.
  """
  successMessage: String

  """
  Copy to be rendered if the mutation was unsuccessful, null otherwise. If non-null, either a complete or partial error was detected.
  """
  errorMessage: String

  """
  A descriptive error code that is intentionally defined as a String instead of an Enum to support future flexibility. For client messaging, rely on 'errorMessage'.
  """
  errorCode: String
}

type MoveSlicesBatchPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: MoveSlicesBatchOutcome
  error: String
}

type MoveSlicesBatchOutcome {
  clientMutationId: String

  """The updated or created pie node at the root of the tree."""
  pie: UserPie

  """Metadata about the result of executing the mutation."""
  result: UpdatePieTreeResult!
}

"""Input for the `submitInvestAcatTransfer` mutation."""
input SubmitInvestAcatTransferInput {
  clientMutationId: String

  """
  The ID for the brokerage node (`InvestAcatWizardContraParticipant`) that the user selected in the ACAT Wizard flow.
  """
  externalBrokerageId: ID!

  """
  The user inputted account number for the account to be transferred to M1.
  """
  originAccountNumber: String!

  """The internal account ID for which to transfer funds to."""
  destinationAccountId: ID!

  """
  Boolean for whether the submitted transfer is a partial ACAT or full ACAT
  """
  isPartial: Boolean = false

  """Cash amount to transfer during partial ACAT"""
  cashAmount: Float

  """The assets to be transferred during a partial ACAT"""
  assets: [InvestAcatAssetInput!]
}

input InvestAcatAssetInput {
  """The symbol of the asset to be transferred."""
  symbol: String!

  """The quantity of the asset to be transferred."""
  quantity: Int
}

"""Outcome for the `submitInvestAcatTransfer` mutation."""
type SubmitInvestAcatTransferPayload {
  clientMutationId: String
  didSucceed: Boolean!

  """
  Copy to be rendered that describes an error detected during the mutation. This can be due to either a complete or partial error.
  """
  errorMessage: String

  """
  The toast to be displayed as part of the mutation - if this is null, do not show a toast
  """
  toast: AppToast
  outcome: SubmitInvestAcatTransferOutcome
}

type SubmitInvestAcatTransferOutcome {
  """
  An analytics event to be fired upon the completion of the `submitInvestAcatTransfer` mutation.
  """
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Input for the `AutoPayApplicationSetUp` mutation."""
input AutoPayApplicationSetUpInput {
  clientMutationId: String

  """The id of the specific loan to have AutoPay set up for."""
  loanId: ID!

  """
  The id of the transfer participant account to set up AutoPay to withdraw from.
  """
  transferParticipantId: ID!
}

"""Payload for the `autoPayApplicationSetUp` mutation."""
type AutoPayApplicationSetUpPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: AutoPayApplicationSetUpOutcome
  error: AutoPayApplicationSetUpErrorEnum
}

"""Outcome for the `autoPayApplicationSetup` mutation."""
type AutoPayApplicationSetUpOutcome {
  """
  An analytics event to be fired upon the completion of the `autoPayApplicationSetup` mutation.
  """
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Errors for the `autoPayApplicationSetup` mutation."""
enum AutoPayApplicationSetUpErrorEnum {
  """
  There was an error setting up AutoPay. Please try again once the funds reach your account.
  """
  GENERAL_SETUP_AUTOPAY_ERROR
}

"""Input for the `moveUnmanagedHoldings` mutation."""
input MoveUnmanagedHoldingsInput {
  clientMutationId: String

  """An array of umanaged holding ids that will be moved."""
  unmanagedHoldingIds: [ID!]!

  """
  The Portfolio Slice Id of the parent Pie a given set of unmanaged holdings will be moved to.
  Note this slice does not represent the actual slice(s) holdings will be moved to, but the slice of the parent pie.
  Lens will handle calculating the final slice path for each unmanaged holding.
  """
  parentPortfolioSliceId: ID!
}

"""Outcome for the `moveUnmanagedHoldings` mutation."""
type MoveUnmanagedHoldingsPayload {
  clientMutationId: String

  """A flag representing whether or not the mutation was succesful."""
  didSucceed: Boolean!

  """Retrieve the newly updated Account."""
  account: Account

  """
  Represents copy that should be rendered if an error occured during the mutation. This returns a non-null if the error detected was partial or complete.
  """
  errorMessage: String

  """
  Copy to be rendered if the mutation succeeds and no partial errors were detected
  """
  successMessage: String
}

"""Input for the `selectPaymentsAccount` mutation."""
input SelectPaymentsAccountInput {
  clientMutationId: String

  """The ID of the account to select."""
  accountId: ID!
}

"""Payload for the `selectPaymentsAccount` mutation."""
type SelectPaymentsAccountPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SelectPaymentsAccountOutcome
  error: SelectPaymentsAccountErrorEnum
  result: SelectPaymentsAccountResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  user: User @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `selectPaymentsAccount` mutation."""
type SelectPaymentsAccountOutcome {
  """The updated user."""
  user: User!
}

"""Errors for the `selectPaymentsAccount` mutation."""
enum SelectPaymentsAccountErrorEnum {
  """
  The indicated account is not eligible to be selected as the payments account.
  """
  INELIGIBLE_FOR_PAYMENTS_ACCOUNT
}

type SelectPaymentsAccountResult {
  didSucceed: Boolean!
  inputError: SelectPaymentsAccountInputErrorEnum
}

enum SelectPaymentsAccountInputErrorEnum {
  INVALID_ACCOUNT_ID
  INELIGIBLE_FOR_PAYMENTS_ACCOUNT
}

interface ListableAccount {
  """The ID of this node."""
  id: ID!

  """The account category."""
  accountCategory: AccountCategoryEnum!

  """The name of the account."""
  name: String!

  """A descriptor for the account, for help identifying in a list."""
  descriptor: String
}

"""A type categorization of transfer participants."""
enum AccountCategoryEnum {
  """Invest"""
  INVEST

  """Spend"""
  SPEND

  """Borrow"""
  BORROW

  """Physical Check"""
  PHYSICAL_CHECK

  """Loan"""
  LOAN

  """Savings"""
  SAVE
}

"""A preference for which trade window to use."""
enum PreferredTradeWindowEnum {
  """Default"""
  DEFAULT

  """Morning"""
  MORNING

  """Afternoon"""
  AFTERNOON
}

enum PartialTransferCreditStatusEnum {
  """PARTIALLY_APPLIED"""
  PARTIALLY_APPLIED
}

enum AccountConfigDividendSettingType {
  KEEP_AS_CASH
  REINVEST_ALL_DIVIDENDS
  TRANSFER_TO_ACCOUNT
  CUSTOM_BY_SYMBOL
}

"""Configurations and settings for invest accounts"""
type AccountConfiguration implements Node {
  dividends: AccountConfigurationDividends
  id: ID!
}

"""
The CTA associated with the account-level dividend configuration settings
"""
type AccountConfigurationDividendsCta {
  label: String!
  value: String!
  link: AppLink
}

type AccountConfigurationDividends {
  cta: AccountConfigurationDividendsCta

  """Footer text to display on the AccountConfigurationDividends screen."""
  footerText: [String!]

  """
  The heading text associated with account-level dividend configuration settings
  """
  heading: String!
  subheading: String
  contextualLink: AppLink
  selectedSettingType: AccountConfigDividendSettingType
  settings: [AccountConfigDividendSetting!]
  holdings(symbols: [String!]): [AccountConfigurationDividendsHoldings!]
}

"""Holding-level node for dividend investment settings"""
type AccountConfigurationDividendsHoldings {
  """The PositionReference of the holding"""
  position: PositionSecurityReference!

  """The dividend investment settings for the holding"""
  settings: [AccountConfigDividendSetting!]
}

"""A dividend investment configuration setting"""
type AccountConfigDividendSetting {
  """If the setting is associated with transfer participants, they are here"""
  accounts: [AccountConfigDividendTransferAccount]

  """An associated link for the setting"""
  contextualLink: AppLink

  """The description of the account-level setting"""
  description: String

  """Whether the setting is available for selection"""
  disabled: Boolean!

  """Optional text associated with the setting"""
  helperText: String

  """The human readable label for the setting"""
  label: String!

  """Whether this setting is selected for the given holding"""
  selected: Boolean!

  """The associated value for the setting"""
  value: AccountConfigDividendSettingType!

  """A human readable label for the given setting's value"""
  valueLabel: String!
}

type AccountConfigDividendTransferAccount {
  selected: Boolean!
  transferParticipant: TransferParticipant
}

type OutstandingTransferCredits {
  """The id of the account the transfer was made on"""
  accountId: ID!

  """The date the partial amount was credited"""
  created: String

  """The amount of the total transfer that was credited"""
  creditedAmount: Float!

  """The id of the partial transfer credit record"""
  id: ID!

  """The date this record was last updated"""
  lastModified: String

  """
  The amount still outstanding/pending that will be credited once the transfer is complete
  """
  outstandingAmount: Float!

  """The status of the partial credit"""
  status: PartialTransferCreditStatusEnum

  """The total amount of the transfer"""
  totalAmount: Float!

  """The id of the crypto broker ach transfer"""
  transferId: ID!
}

type MoveSlices {
  """Label for the main Move Slices CTA."""
  moveSlicesLabel: String

  """
  Boolean value that represents the enabled/disabled state for the Move Slices CTA.
  """
  enableMoveSlices: Boolean

  """
  Type for rendering information about Pending Orders in relation to Move Slices.
  """
  pendingOrdersContent: MoveSlicesPendingOrdersContent

  """
  Type for rendering helpful tutorial information in relation to Move Slices.
  """
  moveSlicesTutorialContent: MoveSlicesTutorialContent

  """
  Type for rendering the Move to Pie view for the Move Slices feature.
  Accepts a list of Portfolio Slice Ids that a user intends to Move.
  """
  moveToPieContent(portfolioSliceIdsToMove: [ID!]!): MoveSlicesMoveToPieContent

  """
  Type for rendering the Set Destination Slice view for the Move Slices feature.
  """
  setDestinationSliceContent: MoveSlicesSetDestinationPieSliceContent

  """
  Type for rendering the Set Source Slice view for the Move Slices feature.
  """
  setSourceSliceContent: MoveSlicesSetSourceSliceContent

  """
  Argument-driven field for driving the confirmation content for all Pie Edits within Move Slices. Accepts the same input as the `moveSlices` mutation.
  """
  moveSlicesChangesConfirmation(
    """
    A serialized representation of the Source Pie from which slices are being moved from.
    """
    sourcePieSerialized: String!

    """
    A serialized representation of the Destination Pie tree for which slices are being moved to.
    """
    destinationPieSerialized: String!

    """
    A list of PortfolioSliceIds that represent each Slice from which value is being moved from with a Source Pie.
    """
    moveSliceIds: [ID!]!
  ): MoveSlicesChangesConfirmation

  """
  A tooltip to explain why Move is disabled if a Trade Window is underway.
  This field is always exposed thus it is the responsibility of clients to render it appropriately.
  """
  moveDisabledTradingWindowTooltip: MoveDisabledTradingWindowTooltip

  """
  A tooltip to explain why Move is disabled if the User has selected a Destination Pie and has returned to the editor.
  This field is always exposed thus it is the responsibility of clients to render it appropriately.
  """
  moveDisabledDestinationPieSet: MoveDisabledDestinationPieSetTooltip
}

type MoveDisabledTradingWindowTooltip {
  """A list of strings to be used as the tooltip content."""
  text: [String]
}

type MoveDisabledDestinationPieSetTooltip {
  """A list of strings to be used as the tooltip content."""
  text: [String]
}

type MoveSlicesPendingOrdersContent {
  """Header value for content."""
  header: String

  """List of strings to be rendered as the main body of the content."""
  items: [String]

  """Label for the exit CTA."""
  exitLabel: String
}

type MoveSlicesTutorialContent {
  """Header value for content."""
  header: String

  """List of tutorial content items to be rendered for Move Slices."""
  items: [MoveSlicesTutorialContentItem]

  """Link to support article for learning more about Move Slices."""
  learnMore: AppLink

  """Copy to be rendered for the CTA to close the content."""
  exitLabel: String
}

type MoveSlicesTutorialContentItem {
  """Icon to be rendered with copy."""
  icon: AppImage

  """Copy to be rendered."""
  copy: String
}

type MoveSlicesMoveToPieContent {
  """Main label for Move to Pie content."""
  primaryLabel: String

  """Secondary label for Move to Pie content."""
  secondaryLabel: String

  """Tooltip to be rendered for Move to Pie content."""
  tooltip: MoveToPieContentTooltip

  """Label used to prompt the user to open the Move Slices tutorial."""
  tutorialLabel: String

  """
  A list containing a custom type of augmented Portfolio Slices a set of slices can be moved to.
  """
  validAugmentedPortfolioSliceDestinations: [MoveSlicesAugmentedPortfolioSliceDestinations]
}

type MoveSlicesAugmentedPortfolioSliceDestinations {
  """
  Used to determine the validity and error state of the given Portfolio Slice.
  """
  validity: MoveSlicesPortfolioSliceDestinationsValidity

  """The given Portfolio Slice."""
  portfolioSlice: PortfolioSlice
}

type MoveSlicesPortfolioSliceDestinationsValidity {
  """
  A flag used to determine the eligibility of a given Portfolio Slice as a destination for Move Slices.
  """
  isValid: Boolean

  """
  An optional message for more information around validity of the given Portfolio Slice.
  """
  message: String

  """
  An optional link to render relevant to the validity of the given Portfolio Slice.
  """
  link: AppLink

  """
  An optional icon to render relevant to the validity of the given Portfolio Slice.
  """
  icon: AppImage
}

type MoveToPieContentTooltip {
  """A list of strings to be used as the tooltip content."""
  text: [String]
}

type MoveSlicesSetDestinationPieSliceContent {
  """Main content title."""
  title: String @deprecated(reason: "Control client-side instead")

  """Header to be rendered for the content."""
  header: String

  """Subheader to be rendered for the content."""
  subheader: String

  """Tooltip to establish context for setting the destination Slice."""
  tooltip: MoveSlicesSetDestinationPieSliceContentTooltip

  """Label for the continue CTA."""
  continueLabel: String

  """Label for the cancel CTA."""
  cancelLabel: String
}

type MoveSlicesSetDestinationPieSliceContentTooltip {
  """A list of strings to be rendered as the tooltip content."""
  text: [String]
}

type MoveSlicesSetSourceSliceContent {
  """Main content title."""
  title: String @deprecated(reason: "Control client-side instead")

  """
  Copy to be rendered in the Editor to help establish context for being back at the Source within the Move Slices flow.
  """
  copy: String

  """Tooltip to establish context for updating the source Slice."""
  tooltip: MoveSlicesSetSourceSliceTooltip

  """Label for the continue CTA."""
  continueLabel: String

  """Label for the cancel CTA."""
  cancelLabel: String
}

type MoveSlicesSetSourceSliceTooltip {
  """A list of strings be rendered as the source slices tooltip."""
  text: [String]
}

"""This is the main type to drive the Move Slices confirmation screen."""
type MoveSlicesChangesConfirmation {
  """Title for the content."""
  title: String

  """Label for exiting the screen."""
  cancelLabel: String

  """Label for confirming changes."""
  confirmLabel: String

  """A set of details pertaining to the Portfolio Pie."""
  sourcePieDetails: MoveSlicesSourcePieDetails

  """A type for rendering changes as a result of each 'Moved' Slice(s)."""
  moveSlicesChangesSection: MoveSlicesChangesConfirmationSection @deprecated(reason: "No longer desired to render this section. Remove it altogether from your app.")

  """A type for rendering changes made to the Source Pie."""
  sourcePieChangesSection: MoveSlicesChangesConfirmationSourcePieChangesSection

  """A list type for rendering changes made to a Destination Pie."""
  destinationPieChangesSection: MoveSlicesChangesConfirmationDestinationPiesChangesSection

  """Section that contains information regarding the next trading window."""
  nextAvailableTradeWindowSection: MoveSlicesChangesConfirmationNextAvailableTradeWindowSection

  """
  Card that contains dynamic copy about trading in relation to the edits being confirmed.
  """
  infoCard: AppInformationalMessageCard
}

type MoveSlicesSourcePieDetails {
  """Name of the Source Pie."""
  name: String

  """Logo associated with the Source Pie."""
  logoUrl: String
}

type MoveSlicesChangesConfirmationSection {
  """Label for the section."""
  label: String

  """Name of the Source Pie from which value is being moved from."""
  sourcePieName: String

  """Name of the Destination Pie from which value is being moved to."""
  destinationPieName: String

  """List of Slice(s) that were moved."""
  slices: [PieChangesConfirmationMovedSlice]
}

type MoveSlicesChangesConfirmationSourcePieChangesSection {
  """Label for the section."""
  label: String

  """Copy to render if the Pie is Entangled, null otherwise."""
  applicableLocationsMessage: String

  """List of Slice(s) that were added, updated, or removed."""
  adjustedSlices: [PieChangesConfirmationAdjustedSlice]

  """Messages to render in the section."""
  messages: [RichTextContent!]
}

type MoveSlicesChangesConfirmationDestinationPiesChangesSection {
  """Label for section."""
  label: String

  """Copy to render if the Pie is Entangled, null otherwise."""
  applicableLocationsMessage: String

  """List of Slice(s) that were added or updated."""
  adjustedSlices: [PieChangesConfirmationAdjustedSlice]

  """Messages to render in the section."""
  messages: [RichTextContent!]
}

"""The type of the adjusted slice"""
enum MoveSlicesAdjustedSliceTypeEnum {
  """A security slice"""
  SECURITY

  """A Crypto slice"""
  CRYPTO

  """A user pie slice"""
  USER_PIE

  """A system pie slice"""
  SYSTEM_PIE
}

type PieChangesConfirmationAdjustedSlice {
  """The name of the slice."""
  name: String!

  """The symbol of the slice if applicable."""
  symbol: String

  """
  The existing percentage of a given slice, zero if the slice is to be added.
  """
  oldPercentage: Float

  """The soon-to-be new percentage of the slice."""
  percentage: Float

  """
  The type of the slice, i.e 'SECURITY' | 'USER_PIE' | 'SYSTEM_PIE' | 'CRYPTO'
  """
  type: MoveSlicesAdjustedSliceTypeEnum

  """A pill used to represent if the slice was added or updated"""
  actionPill: AppPill

  """If available, a URL to a logo image that represents the Slice."""
  logoUrl: String
}

type MoveSlicesChangesConfirmationNextAvailableTradeWindowSection {
  """Label to be rendered for the section."""
  label: String

  """The current trading status of the account."""
  trading: AccountTradingStatus

  """Pill to render if user has access to plus, null otherwise."""
  pill: AppPill @deprecated(reason: "Plus has been sunsetted and this field is returning null")
}

enum DocumentUploadRequestAssociatedService {
  CreditCard
  Invest
  Spend
  Save
  Other
}

type DocumentUploadRequestsCenter {
  """
  Entry point for the Document Upload Request feature.
  Returns a list of document upload requests matching the optional filter parameters.
  If no matching document requests were found, returns null.
  """
  documentUploadRequests(after: String, first: Int, filterByAssociatedService: DocumentUploadRequestAssociatedService, filterByStatus: DocumentUploadRequestStatus): DocumentUploadRequestsConnection

  """The requirements for a document"""
  documentRequirements: DocumentRequirements
}

type DocumentUploadRequestsConnection {
  pageInfo: PageInfo!
  edges: [DocumentUploadRequestsEdge]
  total: Int!
}

type DocumentUploadRequestsEdge {
  cursor: String!
  node: DocumentUploadRequest
}

type DocumentUploadRequest implements Node {
  """The ID of this node. Encodes the document upload request ID."""
  id: ID!

  """
  A description of the associated service this document upload request in linked with.
  """
  associatedServiceDescription: String

  """The associated BE service linked to the given document upload request."""
  associatedServiceType: String

  """The associated business purpose the given request was created for."""
  businessPurpose: String

  """
  An optional correlation ID that may be provided if the given request was created with one.
  """
  correlationId: String

  """The maximum file size to display to the user"""
  maximumFileSizeDescription: String!

  """The maximum file size in bytes"""
  maximumFileSizeInBytes: Int!

  """A list of acceptable file types"""
  acceptableFileTypes: [String!]

  """A list of acceptable file mime types"""
  acceptableMimeTypes: [String!]

  """A list of acceptable document types"""
  acceptableDocumentTypes: [DocumentUploadRequestOption!]

  """The header value of this screen."""
  header: String

  """Label for the select document CTA."""
  selectLabel: String

  """Label for the upload document CTA."""
  uploadLabel: String

  """Label for the cancel CTA."""
  cancelLabel: String

  """The BE status of the given Document Upload Request."""
  status: String
}

"""The Entry point for Document Upload Requirements."""
type DocumentRequirements {
  """The maximum file size to display to the user"""
  maximumFileSizeDescription: String!

  """The maximum file size in bytes"""
  maximumFileSizeInBytes: Int!

  """A list of acceptable file types"""
  acceptableFileTypes: [String!]!

  """A list of acceptable file mime types"""
  acceptableMimeTypes: [String!]!
}

"""
The Entry Point for the content and requirements needed for uploading documents to verify identity
"""
type DocumentUpload {
  """The requirements for a document"""
  requirements: DocumentUploadRequirements
}

"""The Entry point for Document Upload Requirements."""
type DocumentUploadRequirements {
  """The maximum file size to display to the user"""
  maximumFileSizeDescription: String!

  """The maximum file size in bytes"""
  maximumFileSizeInBytes: Int!

  """A list of acceptable file types"""
  acceptableFileTypes: [String!]

  """A list of acceptable file mime types"""
  acceptableMimeTypes: [String!]

  """A list of acceptable document types"""
  acceptableDocumentTypes: [DocumentUploadOption!]
}

"""An option for valid documents to upload."""
type DocumentUploadOption {
  """The description for the option."""
  description: String!

  """The type of document that can be uploaded"""
  kind: DocumentUploadKindEnum!
}

"""An option for valid documents to upload for Document Upload Request."""
type DocumentUploadRequestOption {
  """A "user readable" description of the given option."""
  description: String

  """
  The type of document that can be uploaded for the given upload request.
  This value is intentionally typed as a String instead of an Enum to allow BE the flexibility to add/remove values without any FE changes.
  """
  docType: String
}

"""The type of document that can be uploaded"""
enum DocumentUploadKindEnum {
  """A valid, non-expired U.S. License"""
  DRIVERS_LICENSE

  """A valid, non-expired U.S. Issued State ID"""
  STATE_ID_CARD

  """A valid, non-expired U.S. Passport"""
  PASSPORT
  INTERNAL_STATEMENT
  IRS_FORM_1099_INT
}

"""The Entry Point for Received Securities."""
type ReceivedSecurities {
  """
  The Received Securities Card. Returns null if a user has not yet set their Portfolio.
  """
  receivedSecuritiesCard: ReceivedSecuritiesCard

  """Entry point for the Unmanaged Holdings Screen."""
  unmanagedHoldingsScreen: UnmanagedHoldingsScreen

  """Entry point for Move Securities."""
  moveSecurities: MoveSecurities

  """
  A set of fields used to drive the confirm targets or create new pie step for the Move Securities flow within Received Securities.
  """
  moveSecuritiesConfirmTargets: MoveSecuritiesConfirmTargets

  """
  A set of fields used to drive the screen for prompting a user to choose a "home" for their soon-to-be newly created Pie.
  """
  moveSecuritiesNewPieLocation: MoveSecuritiesNewPieLocation

  """
  A set of fields used to drive the liquidate holdings confirmation screen. Accepts a required set of unmanaged holding IDs.
  """
  unmanagedHoldingsStagedForLiquidate(unmanagedHoldingIds: [ID!]!): UnmanagedHoldingsStagedForLiquidateConfirmation
}

type ReceivedSecuritiesCard {
  """Icon for Received Securities card."""
  icon: AppImage

  """Header value for Received Securities card."""
  header: String

  """
  Sections to display for the Received Securities card. Includes label/value pairs for unmanaged, managed, and total account sections.
  """
  sections: [ReceivedSecuritiesCardSection]

  """CTA link for card."""
  link: AppLink
}

type ReceivedSecuritiesCardSection {
  """Copy for a Received Securities Card section."""
  label: String

  """Value for a Received Securities Card section."""
  value: String
}

"""Main Screen for Move Securities from Holding Pen."""
type MoveSecurities {
  """Title for the Move Securities screen."""
  title: String

  """Main header for the Move Securities screen."""
  header: String

  """Subheader for the Move Securities screen."""
  subheader: String

  """Tooltip for the Move Securities screen."""
  tooltip: MovedSecuritiesScreenTooltip

  """A list of Portfolio Slices that a set of holdings can be moved to."""
  validPortfolioSliceDestinations: [PortfolioSlice]

  """Button label value to for the Create Pie CTA"""
  createPieCtaLabel: String
}

type MovedSecuritiesScreenTooltip {
  """Main content that lives inside the Tooltip."""
  text: String
}

"""
Set of fields for confirming pie targets for moving securities from Unmanaged Holdings.
"""
type MoveSecuritiesConfirmTargets {
  """Title for the MoveSecuritiesConfirmTargets."""
  title: String

  """Header for the MoveSecuritiesConfirmTargets."""
  header(
    """
    When provided and true, the string will include Markdown formatting.
    Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): String

  """
  When available, a link to be rendered within the header section of MoveSecuritiesConfirmTargets.
  """
  link: AppLink

  """The button copy for the primary CTA."""
  saveTargetsCtaLabel: String
}

type MoveSecuritiesNewPieLocation {
  """Title for MoveSecuritiesNewPieLocation."""
  title: String

  """Header for MoveSecuritiesNewPieLocation."""
  header: String

  """Hint text used to explain to the user how to Move a Pie."""
  moveHint: String

  """
  A list of Pies a user can select as the parent for the soon-to-be newly created Pie.
  """
  validPortfolioSliceDestinations: [PortfolioSlice]
}

type UnmanagedHoldingsStagedForLiquidateConfirmation {
  """Main title for the screen."""
  title: String

  """Details on the Account a given set of UH's are being Liquidated from."""
  accountDetails: UnmanagedHoldingsForLiquidationAccountDetails

  """The header for the section being rendered."""
  sectionHeader: String

  """A helper message for the section being rendered."""
  sectionMessage: String

  """A list of Unmanaged Holdings that are staged for Liquidation."""
  holdings: [StagedUnmanagedHoldingForLiquidate]

  """The current trading status of the account."""
  trading: AccountTradingStatus

  """The header for the trade window section being rendered."""
  tradeWindowHeader: String

  """Copy for the main CTA."""
  primaryButtonLabel: String

  """Copy for the secondary CTA."""
  secondaryButtonLabel: String
}

type UnmanagedHoldingsForLiquidationAccountDetails {
  """Header for the account details."""
  header: String

  """Subheader for the account details."""
  subheader: String
}

type StagedUnmanagedHoldingForLiquidate {
  """
  The sublabel of the UH. This will be the symbol if available, fallback to CUSIP.
  """
  sublabel: String

  """
  The primary label of the UH which will be its name if available, otherwise null.
  """
  label: String

  """Label/value pair that renders the amount of shares for the UH."""
  quantitySection: StagedUnmanagedHoldingForLiquidateSection
}

type StagedUnmanagedHoldingForLiquidateSection {
  """The label of the given section."""
  label: String

  """The value of the given section."""
  value: String
}

"""Main Screen for Unmanaged Holdings."""
type UnmanagedHoldingsScreen {
  """Title for the Unmanaged Holdings screen."""
  title: String

  """Link to support article for learning more about Unmanaged Holdings."""
  learnMore: AppLink

  """Link to the contact us form"""
  contactUs: AppLink

  """
  Returns true or false depending on whether or not an account contains any Unmanaged Holdings, regardless of type.
  """
  hasUnmanagedHoldings: Boolean

  """Card for the Unmanaged Holdings."""
  unmanagedHoldingsScreenCard: UnmanagedHoldingsScreenCard

  """A list of Unmanaged Holding collections."""
  unmanagedHoldingsCollections: [UnmanagedHoldingsCollection]

  """Disclaimer text on the bottom of the screen."""
  bottomDisclaimer: String
}

type UnmanagedHoldingsScreenUnrealizedGainTooltip {
  """Main content that lives inside the Tooltip."""
  text: [String]

  """Link for the tooltip, if any"""
  link: AppLink
}

"""
An enum set denoting the type of actions a user can form on a given collection of Umanaged Holdings.
"""
enum UnmanagedHoldingsCollectionTypeEnum {
  UPDATE
  MOVE
  LIQUIDATE
  CONTACT_OPS
  DO_NOTHING
}

"""A collection of Unmanaged Holdings of a given type."""
type UnmanagedHoldingsCollection implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The given type determined by what set of user actions can be performed on this collection.
  """
  type: UnmanagedHoldingsCollectionTypeEnum

  """A paginated set of holdings."""
  holdings(first: Int, after: String): UnmanagedHoldingsConnection

  """Header value for the given Unmanaged Holdings Collection."""
  header: String

  """Tooltip value for the given Unmanaged Holdings Collection, if any."""
  tooltip: UnmanagedHoldingsCollectionTooltip
}

type UnmanagedHoldingsCollectionTooltip {
  """The text to be used as the tooltip content."""
  text: String

  """When available, the link to be included as the cta for the tooltip."""
  link: AppLink
}

type UnmanagedHoldingsConnection {
  pageInfo: PageInfo!
  edges: [UnmanagedHoldingsEdge]
  total: Int!
}

type UnmanagedHoldingsEdge {
  cursor: String!
  node: UnmanagedHolding
}

type UnmanagedHoldingsScreenCard {
  """Section for the Quantity of Unmanaged Holdings."""
  quantitySection: UnmanagedHoldingsScreenCardSection

  """Section for the Total Value of Unmanaged Holdings."""
  totalValueSection: UnmanagedHoldingsScreenCardSection

  """Section for the Unrealized Gain of Unmanaged Holdings."""
  unrealizedGainSection: UnmanagedHoldingsCardSectionUnrealizedGain
}

type UnmanagedHoldingsScreenCardSection {
  """Copy for the section."""
  label: String

  """Value for the section."""
  value: String
}

type UnmanagedHoldingsCardSectionUnrealizedGain {
  """Tooltip for the unrealized gain section of the card."""
  tooltip: UnmanagedHoldingsScreenUnrealizedGainTooltip

  """Copy for the Unrealized Gain section."""
  label: String

  """Value amount for the Unrealized Gain section."""
  amount: Float

  """Value percent for the Unrealized Gain section."""
  percent: Float
}

"""A holding that sits outside of a User's Portfolio."""
type UnmanagedHolding implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The value of this holding. Value is null when price information is
  unavailable.
  """
  value: String

  """
  The unrealized gain from this holding. Value is null when cost or value are
  unavailable.
  """
  unrealizedGain: UnmanagedHoldingGain

  """A list of AppPills that represent the type of Unmanaged Holding."""
  unmanagedHoldingPills: [AppPill]

  """Primary label for the unmanaged holding."""
  label: String

  """Secondary label for the unmanaged holding."""
  sublabel: String

  """The amount of shares for the given unmanaged holding."""
  quantity: Float

  """The current trading status of the account."""
  trading: AccountTradingStatus

  """
  Flag that represents whether or not unmanaged holding is pending liquidation.
  """
  isPendingLiquidation: Boolean

  """
  Screen for rendering the details of the unmanaged holding if it is pending liquidation. Otherwise, null.
  """
  liquidationPendingDetailsScreen: UnmanagedHoldingLiquidationPendingDetailsScreen

  """The allocation date of the unmanaged holding."""
  allocationDate: UnmanagedHoldingDateValue

  """If the unmanaged holding is a security, the associated data for it."""
  security: Security
}

type UnmanagedHoldingDateValue {
  """Label of the Unmanaged Holding date."""
  label: String

  """Value of the Unmanaged Holding date."""
  value: String
}

type UnmanagedHoldingLiquidationPendingDetailsScreen {
  """Header for the screen."""
  header: String

  """
  A list of generic label/value pairs to be rendered together on this screen.
  """
  details: [LiquidationPendingDetails]

  """Label for the primary CTA on the screen."""
  primaryButtonLabel: String
}

type LiquidationPendingDetails {
  """Label for the detail."""
  label: String

  """Value for the detail."""
  value: String
}

type UnmanagedHoldingGain {
  """Amount value for the Unrealized Gain of an Unmanaged Holding."""
  amount: Float

  """Percent value for the Unrealized Gain of an Unmanaged Holding."""
  percent: Float
}

"""An account registration type."""
enum AccountRegistrationEnum {
  """Individual"""
  INDIVIDUAL

  """Crypto"""
  CRYPTO

  """Joint"""
  JOINT

  """Custodial"""
  CUSTODIAL

  """Partnership"""
  PARTNERSHIP

  """LLC"""
  LLC

  """Corporation"""
  CORPORATION

  """Trust"""
  TRUST

  """Traditional IRA"""
  TRADITIONAL_IRA

  """Roth IRA"""
  ROTH_IRA

  """SEP IRA"""
  SEP_IRA

  """Other"""
  OTHER
}

"""A setup checklist with a list of steps to be completed."""
type SetupChecklist {
  """The title of this checklist."""
  title: String!

  """The total number of steps currently in the checklist."""
  stepsTotal: Int!

  """The number of steps in the checklist that are currently completed."""
  stepsCompleted: Int!

  """The list of checklist steps."""
  steps: [SetupChecklistStep!]!
}

"""A setup checklist step."""
interface SetupChecklistStep {
  """The title of the step."""
  title: String!

  """Whether the step has been completed."""
  isCompleted: Boolean

  """Whether the step is ready or blocked by earlier steps."""
  isReady: Boolean

  """An analytics event for following the step."""
  analyticsEvent: AppAnalyticsEvent

  """An analytics event for following the step."""
  displayAnalyticsEvent: AppAnalyticsEvent @deprecated(reason: "Use `analyticsEvent` instead.")

  """The internal app destination for the step."""
  destination: SetupChecklistDestination
}

"""A generic setup checklist step."""
type GenericSetupChecklistStep implements SetupChecklistStep & Linkable {
  """The title of the step."""
  title: String!

  """Whether the step has been completed."""
  isCompleted: Boolean

  """Whether the step is ready or blocked by earlier steps."""
  isReady: Boolean

  """An analytics event for following the step."""
  analyticsEvent: AppAnalyticsEvent

  """An analytics event for following the step."""
  displayAnalyticsEvent: AppAnalyticsEvent

  """The internal app destination for the step."""
  destination: SetupChecklistDestination
}

"""A Build Portfolio setup checklist step."""
type BuildPortfolioSetupChecklistStep implements SetupChecklistStep & Linkable {
  """The title of the step."""
  title: String!

  """Whether the step has been completed."""
  isCompleted: Boolean

  """Whether the step is ready or blocked by earlier steps."""
  isReady: Boolean

  """An analytics event for following the step."""
  analyticsEvent: AppAnalyticsEvent

  """An analytics event for following the step."""
  displayAnalyticsEvent: AppAnalyticsEvent

  """The internal app destination for the step."""
  destination: SetupChecklistDestination

  """Pie created by the user during onboarding."""
  starterPie: Pie @deprecated(reason: "starterPie is no longer in use.")
}

"""The internal link destination for a setup checklist step."""
type SetupChecklistDestination {
  """The internal application link URL."""
  url: String!

  """The path part of the link URL."""
  path: String!
}

type AccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountEdge]
}

type AccountEdge {
  """The item at the end of the edge"""
  node: Account

  """A cursor for use in pagination"""
  cursor: String!
}

"""
Represents an ACH relationship between an investment account and another
account.
"""
interface AchRelationship {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """The current status of the relationship."""
  status: AchRelationshipStatusEnum!

  """True if the ACH relationship currently requires verification."""
  isVerificationRequired: Boolean

  """
  True if the ACH relationship required verification and it was completed.
  """
  wasVerificationCompleted: Boolean

  """When rejected, a reason for the rejection. Value is `null` otherwise."""
  rejectionReason: AchRelationshipRejectionReasonEnum

  """
  When true, the relationship is active and may be used to create transfers.
  """
  isActive: Boolean!

  """The nickname for this relationship."""
  nickname: String!

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String
}

type AchRelationshipViaDeposits implements Node & AchRelationship & TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """The current status of the relationship."""
  status: AchRelationshipStatusEnum!

  """True if the ACH relationship currently requires verification."""
  isVerificationRequired: Boolean

  """
  True if the ACH relationship required verification and it was completed.
  """
  wasVerificationCompleted: Boolean

  """When rejected, a reason for the rejection. Value is `null` otherwise."""
  rejectionReason: AchRelationshipRejectionReasonEnum

  """
  When true, the relationship is active and may be used to create transfers.
  """
  isActive: Boolean!

  """The nickname for this relationship."""
  nickname: String!

  """The type of the bank account."""
  bankAccountType: ViaDepositsBankAcctTypeEnum!

  """The routing number for the bank account."""
  bankAccountRoutingNumber: String!

  """The bank account number, obscured with `*` characters."""
  bankAccountNumber: String!

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String
}

type AchRelationshipViaLink implements Node & AchRelationship & TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """The current status of the relationship."""
  status: AchRelationshipStatusEnum!

  """True if the ACH relationship currently requires verification."""
  isVerificationRequired: Boolean

  """
  True if the ACH relationship required verification and it was completed.
  """
  wasVerificationCompleted: Boolean

  """When rejected, a reason for the rejection. Value is `null` otherwise."""
  rejectionReason: AchRelationshipRejectionReasonEnum

  """
  When true, the relationship is active and may be used to create transfers.
  """
  isActive: Boolean!

  """The nickname for this relationship."""
  nickname: String!

  """The external account that this relationship links to."""
  toExternalAccount: ExternalAccount

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String
}

"""An ACH relationship status."""
enum AchRelationshipStatusEnum {
  """Pending"""
  PENDING

  """Canceled"""
  CANCELED

  """Approved"""
  APPROVED

  """Rejected"""
  REJECTED
}

"""An ACH relationship rejection reason."""
enum AchRelationshipRejectionReasonEnum {
  """The provided routing number is unknown."""
  UNKNOWN_ROUTING_NUMBER

  """The rejection reason is unknown."""
  UNKNOWN
}

type AchRelationshipEdge {
  """The item at the end of the edge"""
  node: AchRelationship

  """A cursor for use in pagination"""
  cursor: String!
}

type AchTransfer implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """
  The direction of the transfer relative to the investment account. "Incoming"
  means from the external account to the investment account, and "outgoing"
  means vise-versa.
  """
  direction: AchTransferDirectionEnum!

  """The current status of the transfer."""
  status: AchTransferStatusEnum!

  """When rejected, a reason for the rejection. Value is `null` otherwise."""
  rejectionReason: AchTransferRejectionReasonEnum

  """True when the transfer is in a completed state, false otherwise."""
  isComplete: Boolean!

  """
  True if the transfer was created by a schedule. It is possible for the value
  to be false when it is actually unknown.
  """
  isCreatedBySchedule: Boolean!

  """
  The signed amount of cash moving between the bank and the M1 account. Positive
  values are deposits, negative values are withdrawals. Value is null when the
  transfer is a pending liquidation withdrawal, and the amount is unavailable.
  """
  cashFlow: Float

  """The amount being transferred."""
  amount: Float!

  """
  If applicable, the IRA contribution year for a deposit. Value is null if the
  account is not an IRA, the transfer is not a deposit, or data is otherwise
  unavailable.
  """
  contributionYear: Int

  """True when the transfer was created as a liquidating withdrawal."""
  forLiquidation: Boolean!

  """
  The time that this ACH transfer record was last updated, in ISO 8601 format.
  """
  lastUpdate: String!

  """
  The ACH relationship utilized for the transfer. Value will be null if the ACH
  relationship no longer exists.
  """
  viaAchRelationship: AchRelationship
}

"""An ACH transfer direction."""
enum AchTransferDirectionEnum {
  """Incoming"""
  INCOMING

  """Outgoing"""
  OUTGOING
}

"""An ACH transfer status."""
enum AchTransferStatusEnum {
  """Pending"""
  PENDING

  """Funds posted"""
  FUNDS_POSTED

  """Canceled"""
  CANCELED

  """Rejected"""
  REJECTED

  """Returned"""
  RETURNED
}

"""An ACH transfer rejection reason."""
enum AchTransferRejectionReasonEnum {
  """The rejection reason is unknown."""
  UNKNOWN
}

"""Balance information for an account."""
type AccountBalance implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Cash assets held by the account."""
  cash: Cash

  """Investment assets held by the account."""
  investments: Investments

  """Summarized total value of the account."""
  totalValue: TotalAccountValue
}

enum CashBreakdownListItemType {
  """Buying Power"""
  BUYING_POWER

  """Crypto Buying Power"""
  CRYPTO_BUYING_POWER

  """Cash Available"""
  CASH_AVAILABLE

  """Crypto Cash Available"""
  CRYPTO_CASH_AVAILABLE

  """Pending Transfers"""
  PENDING_TRANSFERS

  """Total buy orders"""
  TOTAL_BUYS

  """Total sell orders"""
  TOTAL_SELLS

  """Next trade window"""
  NEXT_TRADE_WINDOW

  """Slice name"""
  SLICE_NAME
}

type CashBreakdownListItem {
  """Descriptive label of the cash type"""
  listItemType: CashBreakdownListItemType

  """Descriptive label of the cash type"""
  label: String

  """Formatted dollar amount of cash item"""
  value: String

  """Raw dollar amount of cash item as a Float"""
  cashBalanceFloat: Float

  """Determine if list should be highlighted in list"""
  highlighted: Boolean

  """Optional icon for the item in breakdown list"""
  icon: AppImage
}

"""Cash assets held by an account."""
type Cash implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Cash currently available for trading."""
  available: Float!

  """
  Invest cash currently available for trading. Excludes the amount for any pending transfers from Borrow to either Spend or an external account.
  """
  investCashAvailable: Float!

  """The CAFW (Cash Available for Withdrawal) value for the invest account."""
  availableForWithdrawal: Float

  """Potential amount available for trading on crypto accounts"""
  cryptoBuyingPower: Float

  """Cash available for a crypto account"""
  cryptoCashAvailable: Float

  """Potential amount available for trading"""
  buyingPower: Float

  """List of types of cash available to the account"""
  breakdownList(sliceId: ID): [CashBreakdownListItem]
}

"""Investment assets held by an account."""
type Investments implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """True if there are positions."""
  hasPositions: Boolean!

  """Available if there are no positions for the account."""
  noPositionsContent: NoPositionsContent

  """List of positions currently held by an account."""
  positions(
    first: Int
    after: String

    """
    A list of options to sort by. Default is by value descending then symbol ascending.
    """
    sort: [PositionSortOptionInput!] = [{type: VALUE, direction: DESC}, {type: SYMBOL, direction: ASC}]
  ): PositionConnection!

  """Defunct, always returns empty array."""
  positionsList: [Position!]! @deprecated(reason: "Defunct, always returns empty array. Use `positions` instead.")

  """
  The summarized total cost basis of the investment assets. Value is null if
  cost information is unavailable.
  """
  totalCost: TotalInvestmentsCost

  """
  The summarized total value of the investment assets. Value is null if price
  information is temporarily unavailable.
  """
  totalValue: TotalInvestmentsValue

  """
  The summarized total unrealized gain of the investment assets. Value is null
  if total cost or total value information is unavailable.
  """
  totalUnrealizedGain: TotalInvestmentsGain
}

"""Information for the account when there are no positions."""
type NoPositionsContent {
  """The title for the screen."""
  title: String

  """The description for the page."""
  description: String

  """
  Information about the applink cta to display when there are no positions.
  """
  appLink: AppLink
}

"""The overall cost basis of all investment assets."""
type TotalInvestmentsCost {
  """The cost basis."""
  cost: Float!

  """
  Indicates if this cost basis is a partial sum due to unavailable cost basis
  information for one or more positions.
  """
  isPartial: Boolean!

  """
  Indicates if this cost basis currently contains any estimations due to recent
  trades.
  """
  isEstimated: Boolean! @deprecated(reason: "Defunct, always returns false.")
}

"""The overall value of all investment assets."""
type TotalInvestmentsValue {
  """The value."""
  value: Float!

  """True if the value is greater than zero."""
  hasValue: Boolean!

  """
  Indicates if this value is a partial sum due to unavailable price information
  for one or more positions.
  """
  isPartial: Boolean!
}

"""The overall unrealized gain of all investment assets."""
type TotalInvestmentsGain {
  """The unrealized gain."""
  gain: Float!

  """The unrealized percent gain."""
  gainPercent: Float!

  """
  Indicates if this is only a partial calculation due to unavailable price or
  cost information for one or more positions.
  """
  isPartial: Boolean!
}

"""The net total value of an account."""
type TotalAccountValue {
  """The net total value of the account."""
  value: Float!

  """True if the value is greater than zero."""
  hasValue: Boolean!

  """
  Indicates if this value is a partial sum due to unavailable price information
  for one or more investment assets.
  """
  isPartial: Boolean!
}

"""Information about billing for a specific user."""
type Billing implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Obsolete and no longer supported. Always returns an empty connection."""
  appliedPromos(after: String, first: Int): AppliedPromotionConnection! @deprecated(reason: "Obsolete and no longer supported.")

  """True when there are credits pending payment."""
  hasPendingCredits: Boolean!

  """
  True when `hasPendingCredits` is true but there is no valid
  `selectedPaymentsAccount`.
  """
  hasPendingCreditsButNoPaymentsAccount: Boolean

  """
  The current payments account selection. Value is null when no payments account
  is selected.
  """
  selectedPaymentsAccount: SelectedPaymentsAccount
}

"""The current payments account selection."""
type SelectedPaymentsAccount {
  """The selected account."""
  account: Account!

  """True when the account is currently eligible to be a payments account."""
  isValid: Boolean!
}

"""A connection to a list of items."""
type AppliedPromotionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AppliedPromotionEdge]

  """The total number of applied promotions."""
  total: Int!
}

"""An edge in a connection."""
type AppliedPromotionEdge {
  """The item at the end of the edge"""
  node: AppliedPromotion

  """A cursor for use in pagination"""
  cursor: String!
}

"""Information about an applied promotion."""
type AppliedPromotion {
  """The name of the promotion."""
  name: String!

  """A description of the promotion."""
  description: String!

  """The date the promotion was applied."""
  applicationDate: String!

  """
  The code used to apply the promotion, if applicable. Value is null when the
  promotion was applied via other means.
  """
  viaCode: String
}

type Borrow implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The current base margin rate."""
  baseRate: Float

  """The current discounted base margin rate for M1 Plus customers."""
  baseRateForPlus: Float

  """The current discounted base margin rate for M1 Plus customers."""
  baseRateForPlusShortDescription: String

  """The current discounted base margin rate for M1 Plus customers."""
  baseRateForPlusDisclaimer: String

  """Borrow home screen"""
  dashboard: BorrowDashboard

  """The minimum account value required to use M1 Borrow."""
  minRequiredAccountValue: Float

  """The maximum percentage of account value that can be borrowed."""
  maxBorrowableAccountValuePercent: Float

  """True if there is at least one available Borrow account."""
  hasBorrowAccounts: Boolean

  """A list of available Borrow accounts."""
  borrowAccounts: BorrowAccountConnection

  """True if the user has a personal loan that has failed disbursement."""
  hasFailedPersonalLoanDisbursement: Boolean

  """True if the user has a currently late personal loan."""
  hasLatePersonalLoan: Boolean

  """True if any account is borrowing or has ever borrowed before."""
  hasBorrowedBefore: Boolean

  """True if there are Borrow accounts with open margin calls."""
  hasBorrowAccountWithOpenMaintenanceCall: Boolean

  """Returns the first Borrow account with an open margin call, if any."""
  borrowAccountWithOpenMaintenanceCall: BorrowAccount

  """
  True if the user is eligible to apply for a personal loan according to their state.
  """
  isEligibleForPersonalLoan: Boolean @deprecated(reason: "All states are now eligible so will always be true. Use 'isEligibleToApplyForPersonalLoan' instead.")

  """
  True if the individual user is eligible to apply for a personal loan based on all eligibility criteria.
  """
  isEligibleToApplyForPersonalLoan: Boolean

  """
  True if personal loans applications should be available. Driven by Launch Darkly flag borrow-personal-loans-application-access or if the user has an in progress application.
  """
  shouldAllowAccessToPersonalLoansApplication: Boolean

  """
  Information for the Borrow Marketing screen. Will be deprecated once all clients are using the new borrowMarketingScreen.
  """
  marketingScreen: BorrowMarketingScreen @deprecated(reason: "Use `borrowMarketingScreen` instead.")

  """The new marketing screen content for the Borrow overview page."""
  borrowMarketingScreen: BorrowMarketingScreenV2

  """Information for the Borrow Marketing screen."""
  borrowDisclosures(input: BorrowDisclosureTextEnum): BorrowDisclosureText @deprecated(reason: "Disclosures for side menu no longer needed")

  """Personal loans"""
  personalLoans: PersonalLoans

  """An optional Plus promotional message."""
  plusPromotion: PlusPromotionalMessage @deprecated(reason: "Use `plusPromotionForNav` or `plusPromotionForScreen` instead.")

  """An optional Plus promotional message for navigation placement."""
  plusPromotionForNav: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No plus data should be rendered in the UI")

  """An optional Plus promotional message for screen placement."""
  plusPromotionForScreen: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No additional plus data should be rendered in the UI.")

  """Check if the user has any active personal loans"""
  hasActivePersonalLoan: Boolean!
}

type BorrowDisclosureText {
  """Title for the Borrow disclosure set"""
  title: String

  """Subtitles for the Borrow disclosure set"""
  subtitle: [String]

  """Bullet text for the Borrow disclosure set"""
  bodyText: [String]
}

enum BorrowDisclosureTextEnum {
  """MARGIN"""
  MARGIN

  """PERSONAL"""
  PERSONAL
}

type BorrowAccountConnection {
  pageInfo: PageInfo!
  edges: [BorrowAccountEdge]
}

type BorrowAccountEdge {
  cursor: String!
  node: BorrowAccount
}

"""Information about a Borrow account."""
type BorrowAccount implements Node & ListableAccount & TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The account category."""
  accountCategory: AccountCategoryEnum!

  """The name of the account."""
  name: String!

  """A descriptor for the account, for help identifying in a list."""
  descriptor: String

  """The Invest account with the assets being borrowed against."""
  investAccount: Account

  """True if the account is borrowing or has ever borrowed before."""
  hasBorrowedBefore: Boolean

  """True if the account is currently borrowing."""
  hasCreditBorrowed: Boolean

  """True if the account has credit available to borrow."""
  hasCreditAvailable: Boolean

  """The dollar amount currently borrowed."""
  creditBorrowed: Float

  """The dollar amount remaining that is available to borrow."""
  creditAvailable: Float

  """The total amount of credit available."""
  creditLimit: Float

  """The percentage of the credit limit currently in use."""
  inUsePercent: Float

  """Information about the Borrow rate for this account."""
  rate: BorrowAccountRate

  """Information about the credit status of this account."""
  status: BorrowAccountCreditStatus

  """Information about the upcoming bill, if Borrow has been used."""
  billUpcoming: BorrowUpcomingBill

  """The bill that is currently due, if one exists."""
  billDue: BorrowBill

  """A list of Borrow bills. Sorted in reverse chronological order."""
  bills(after: String, first: Int): BorrowBillConnection @deprecated(reason: "Moved to MarginLandingPage - use marginLandingPage.statements")

  """A history of Borrow activity. Sorted in reverse chronological order."""
  activity(first: Int, after: String): BorrowActivityEntryConnection @deprecated(reason: "Moved to MarginLandingPage - use marginLandingPage.activity")

  """Margin account landing page content."""
  marginProductLandingPage: MarginProductLandingPage

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String
}

"""Information about the interest rate for a Borrow account."""
type BorrowAccountRate {
  """The yearly interest rate as a percentage."""
  ratePercent: Float!

  """True if this account receives a Plus discounted rate."""
  isPlusDiscountedRate: Boolean @deprecated(reason: "Plus is dead. Please use ratePercent instead.")
}

"""Information about the credit status of a Borrow account."""
type BorrowAccountCreditStatus implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The credit status code."""
  code: BorrowAccountCreditStatusCodeEnum!

  """True when the account currently has an open margin call."""
  hasOpenMaintenanceCall: Boolean!

  """Total margin equity in the account."""
  marginEquity: Float

  """The required margin equity value imposed by maintenance requirements."""
  requiredMarginEquity: Float

  """The total margin equity amount minus the required amount."""
  excessMarginEquity: Float

  """
  When there is an open margin call, the margin equity deficit that must be
  addressed. Equal to the required margin equity minus the total amount. Value
  is null otherwise.
  """
  maintenanceCallMarginEquityDeficit: Float

  """
  If the portfolio value decreases by this dollar amount, a margin call will be
  issued.
  """
  valueDecreaseToMaintenanceCall: Float!

  """
  If the portfolio value decreases by this percentage, a margin call will be
  issued.
  """
  valueDecreaseToMaintenanceCallPercent: Float!

  """The account market value referenced for the margin equity figures."""
  referencedMarketValue: Float

  """A title for the credit status."""
  title: String!

  """A description of the credit status."""
  description(
    """
    When provided and true, the string will include Markdown formatting.
    Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): String!

  """Text for a status alert banner, if one should be displayed."""
  alertBanner: String

  """The as-of date for the credit status information."""
  asOfDate: String

  """The BorrowAccount associated to the credit status instance."""
  borrowAccount: BorrowAccount
}

"""A Borrow account status code."""
enum BorrowAccountCreditStatusCodeEnum {
  """Margin call"""
  MAINTENANCE_CALL

  """Danger"""
  DANGER

  """Caution"""
  WARNING

  """Caution"""
  CAUTION

  """Good"""
  GOOD

  """Great"""
  GREAT
}

type BorrowActivityEntryConnection {
  pageInfo: PageInfo!
  edges: [BorrowActivityEntryEdge]
}

type BorrowActivityEntryEdge {
  cursor: String!
  node: BorrowActivityEntry
}

"""A Borrow activity entry."""
type BorrowActivityEntry {
  """The time of the activity."""
  date: String!

  """The title of the activity."""
  title: String!

  """An optional sub-title of the activity."""
  subTitle: String

  """A signed dollar amount related to the activity."""
  amount: Float
}

type DocumentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocumentEdge]

  """
  An optional banner if there are potentially missing documents in the list.
  """
  missingDocumentsBanner: InformationBanner
}

"""An edge in a connection."""
type DocumentEdge {
  """The item at the end of the edge"""
  node: Document

  """A cursor for use in pagination"""
  cursor: String!
}

type AccountLabel {
  """The main label for the account label."""
  label: String!

  """The sublabel for the account label."""
  subLabel: String
}

interface Document {
  """The ID of this node."""
  id: ID!

  """The date the document was issued."""
  date: String!

  """The type of the document."""
  type: DocumentTypeEnum!

  """The name of the document."""
  name: String!

  """The account name for the document."""
  accountName: AccountLabel
}

"""A document related to an Invest account."""
type InvestAccountDocument implements Node & Document {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The date the document was issued."""
  date: String!

  """The type of the document."""
  type: DocumentTypeEnum!

  """The name of the document."""
  name: String!

  """The account name of the document."""
  accountName: AccountLabel

  """The URL of the document."""
  url: String!

  """A list of URLs to additional insert documents, if they exist."""
  inserts: [String!]!

  """
  The account associated with the document. Value is null if the account is unavailable.
  """
  account: Account @deprecated(reason: "Use accountName property on document directly instead.")
}

"""A document related to an M1 account."""
type AccountDocument implements Node & Document {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The date the document was issued."""
  date: String!

  """The type of the document."""
  type: DocumentTypeEnum!

  """The name of the document."""
  name: String!

  """The account name of the document."""
  accountName: AccountLabel
}

"""A document related to a Spend Checking account."""
type SpendAccountDocument implements Node & Document {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The date the document was issued."""
  date: String!

  """The type of the document."""
  type: DocumentTypeEnum!

  """The name of the document."""
  name: String!

  """The account name of the document."""
  accountName: AccountLabel
}

"""A document type."""
enum DocumentTypeEnum {
  """Investments related"""
  INVESTMENTS_RELATED

  """Statement"""
  STATEMENT

  """Tax form"""
  TAX_FORM

  """Trade confirmation"""
  TRADE_CONFIRMATION

  """Account Document (that is not a statement or trade confirmation)"""
  ACCOUNT_DOCUMENT
}

"""Information about estimated trading for an account."""
type EstimatedTrading implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The account for which trading is estimated."""
  account: Account!

  """True if there are estimated trades of some sort to display."""
  hasEstimatedTrades: Boolean!

  """Value is `true` when there are estimated trades, false otherwise."""
  hasTrades: Boolean!

  """True when there are excluded buy trades."""
  hasExcludedBuys: Boolean!

  """The list of estimated buy trades."""
  buys(
    after: String
    first: Int

    """
    A list of options to sort by. Default is by amount descending then symbol ascending.
    """
    sort: [EstimatedTradeAmountSortOptionInput!] = [{type: AMOUNT, direction: DESC}, {type: SYMBOL, direction: ASC}]
  ): EstimatedTradeAmountConnection!

  """Estimated buys messaging"""
  buyMessages: [RichTextContent!]

  """
  The list of estimated buy trades which have been calculated, but are excluded
  and will not execute because they are below the minimum buy trade amount.
  """
  excludedBuys(
    after: String
    first: Int

    """
    A list of options to sort by. Default is by amount descending then symbol ascending.
    """
    sort: [EstimatedTradeAmountSortOptionInput!] = [{type: AMOUNT, direction: DESC}, {type: SYMBOL, direction: ASC}]
  ): EstimatedTradeAmountConnection!

  """The list of estimated sell trades."""
  sells(
    after: String
    first: Int

    """
    A list of options to sort by. Default is by amount descending then symbol ascending.
    """
    sort: [EstimatedTradeAmountSortOptionInput!] = [{type: AMOUNT, direction: DESC}, {type: SYMBOL, direction: ASC}]
  ): EstimatedTradeAmountConnection!

  """Estimated sells messaging"""
  sellMessages: [RichTextContent!]

  """The total buy amount."""
  totalBuyAmount: Float!

  """The total sell amount."""
  totalSellAmount: Float!

  """
  The time when this estimated trade information was generated. Trades are based
  on, and can vary with, the current prices at the time of estimation. Value is
  null when no estimation has yet occurred.
  """
  lastEstimatedTime: String

  """Messaging to display on Estimated Trades page, if any."""
  message: EstimatedTradingMessage
}

type EstimatedTradingMessage {
  """The content of the message."""
  content: String!

  """An optional link to view additional details on the messaging content."""
  link: AppLink
}

"""A connection to a list of items."""
type EstimatedTradeAmountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EstimatedTradeAmountEdge]

  """The total number of edges."""
  total: Int!
}

"""An edge in a connection."""
type EstimatedTradeAmountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: EstimatedTradeAmount
}

"""Information about an estimated trade amount."""
type EstimatedTradeAmount {
  """The estimated trade amount."""
  amount: Float!

  """
  Value is `true` for an estimated buy and `false` for an estimated sell.
  """
  isBuy: Boolean!

  """The security to be traded."""
  of: Security!

  """Pill to display for the estimated trade properties."""
  pill: AppPill
}

"""An estimated trade amount sort type."""
enum EstimatedTradeAmountSortTypeEnum {
  """Symbol"""
  SYMBOL

  """Amount"""
  AMOUNT
}

"""A sort option."""
input EstimatedTradeAmountSortOptionInput {
  """A sort type."""
  type: EstimatedTradeAmountSortTypeEnum!

  """A sort direction."""
  direction: SortDirectionEnum!
}

"""Represents a connected external account."""
type ExternalAccount implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """The status of this external account."""
  status: ExternalAccountStatusEnum!

  """The type of the external account."""
  type: ExternalAccountTypeEnum!

  """
  A code for the institution that the external account belongs to. Institution
  codes are intended to be stable and provide a basis for mapping institutions
  to logos and other data within client applications. Institution codes are
  defined by Plaid.
  """
  institutionCode: String!

  """The name of the external account."""
  name: String!

  """The routing number."""
  routingNumber: String!

  """The bank account number, obscured with `*` characters."""
  accountNumber: String!
}

"""An external account status."""
enum ExternalAccountStatusEnum {
  """Active"""
  ACTIVE

  """Inactive"""
  INACTIVE
}

"""An external account type."""
enum ExternalAccountTypeEnum {
  """Checking"""
  CHECKING

  """Savings"""
  SAVINGS
}

"""A connection to a list of items."""
type ExternalAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExternalAccountEdge]
}

type ExternalAccountEdge {
  """The item at the end of the edge"""
  node: ExternalAccount

  """A cursor for use in pagination"""
  cursor: String!
}

type FeatureFlags implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A list of all features enabled for the user."""
  allFeatures: [String!]!

  """
  Given a list of feature keys, returns a corresponding list of boolean values
  indicating if the user has that feature enabled. False values indicate that
  either the feature is not enabled for the user or the key is not recognized.
  The list of booleans is guaranteed to be the same length and order as the list
  of keys provided as an argument. The maximum number of keys that can be
  checked is 200.
  """
  hasFeature(keys: [String!]!): [Boolean!]!
}

type IntradayQuoteTimeSeries {
  """
  The list of intraday quotes in chronological order. The list will be empty if
  the market was not open over the selected time range.
  """
  series: [IntradayQuotePointType!]!

  """
  The market session(s) enclosing the time series span. Value is null when there
  are zero time series points.
  """
  timeSpan: MarketTimeSpan

  """
  The time of the most recent data in this series. Value is null when there are
  zero time series points.
  """
  lastUpdatedTime: String
}

"""An intraday quote time-series point."""
type IntradayQuotePointType {
  """The start time for this interval."""
  time: String!

  """
  The time represented by this point divided by difference between the start and
  end times of the series, expressed as a percentage (0-100%).
  """
  timeSpanPercent: Float!

  """The intraday quote for this interval."""
  data: IntradayIntervalQuote!
}

"""Intraday quote data for a security over a particular time interval."""
type IntradayIntervalQuote {
  """The price at the beginning of this interval."""
  openPrice: Float!

  """
  The price at the end of this interval. Value is null when unavailable for this
  interval.
  """
  closePrice: Float!

  """
  The close price at the end of the previous interval. Value is null when unavailable
  for the previous interval.
  """
  previousQuoteClosePrice: Float

  """
  The high price over this interval. Value is null when unavailable for this
  interval.
  """
  highPrice: Float

  """
  The low price over this interval. Value is null when unavailable for this
  interval.
  """
  lowPrice: Float

  """
  The range over this interval. Value is null when low or high are unavailable
  for this interval.
  """
  priceRange: Float

  """
  The number of shares traded over this interval. Value is null when unavailable
  for this interval.
  """
  shareVolume: Int

  """
  The close price on the market day previous to the start of the series. Value
  is null when unavailable.
  """
  previousClosePrice: Float

  """
  The change between the close price on the market day previous to the start of
  the series and the close price of this interval. Value is null when the
  previous close price is unavailable.
  """
  changeFromPreviousClosePrice: Float

  """
  The percent change between the close price on the market day previous to the
  start of the series and the close price of this interval. Value is null when
  the previous close price is unavailable or zero.
  """
  percentChangeFromPreviousClosePrice: Float
}

"""Information about market sessions over a time span."""
type MarketTimeSpan {
  """
  The market open time prior to or coinciding with the first time series point.
  """
  firstOpenTime: String!

  """
  The market close time following or coinciding with the last time series point.
  """
  lastCloseTime: String!
}

type OnlineAccountRegistrationCountry {
  """The name of the country."""
  description: String!

  """The three letter abbreviation associated with the country."""
  name: String!
}

type Invest implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  An entry point for querying dividend related information by portfolioSlice.
  """
  dividends(accountId: ID!, period: DividendTrackerDataPeriod): Dividends

  """The pie tutorial should be displayed to the user."""
  shouldShowPieTutorial: Boolean @deprecated(reason: "Pie tutorial has been removed from onboarding.")

  """The user has at least one Invest account in any status."""
  hasInvestAccount: Boolean

  """
  The user has at least one Invest account in an active (unclosed) status.
  """
  hasActiveInvestAccount: Boolean

  """Permissible Countries"""
  permissibleCountriesForAccountOpen(accountRegistration: OnlineAccountRegistrationEnum!): [OnlineAccountRegistrationCountry]!

  """
  Returns the documents and agreements, by account type, that a user must agree to in order to open an invest account.
  """
  requiredDocuments(accountRegistration: OnlineAccountRegistrationEnum!): RequiredDocumentsBundle!

  """When true, a user is allowed to open a custodial account."""
  isEligibleToOpenCustodialAccount: Boolean

  """An optional Plus promotional message."""
  plusPromotion: PlusPromotionalMessage @deprecated(reason: "Use `plusPromotionForNav` or `plusPromotionForScreen` instead.")

  """An optional Plus promotional message for navigation placement."""
  plusPromotionForNav: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No plus data should be rendered in the UI")

  """An optional Plus promotional message for screen placement."""
  plusPromotionForScreen: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No additional plus data should be rendered in the UI.")

  """
  A set of fields used to drive the pie confirmation changes screen. Accepts an optional argument for handling "merged" slices via Received Securities.
  """
  pieChangesConfirmation(isCrypto: Boolean, newSerializedPieTree: String!, unmanagedHoldingIdsForMergedSlices: [ID!]): PieChangesConfirmation

  """Content for the Invest ACAT Wizard flow."""
  acatWizard(forIra: Boolean = false): InvestAcatWizardContent

  """
  When available, a CTA link to be rendered in Invest for the ACAT Wizard flow
  """
  acatWizardEntryLink: AppLink @deprecated(reason: "Use AcatWizardInfo.acatWizardEntryLink instead.")

  """ACAT Wizard flow information"""
  acatWizardInfo: AcatWizardInfo

  """
  Invest Marketing content for users that have profile created, but no invest account. Will be deprecated once all clients are using investMarketingScreen.
  """
  investMarketing: InvestMarketing @deprecated(reason: "Use `investMarketingScreen` instead.")

  """
  The new marketing screen content for the Invest overview page for users that have profile created, but no invest account.
  """
  investMarketingScreen: InvestMarketingScreen

  """
  Entry point to drive the Invest Account opening flow. In a future state all Invest Account opening flows will be driven through this type.
  """
  accountOpening: InvestAccountOpening

  """Share pie"""
  sharePie: InvestSharePie

  """Disclosures for Invest"""
  investDisclosures: InvestDisclosures

  """Security lending disclosures"""
  fullyPaidLendingDisclosure(accountRegistration: OnlineAccountRegistrationEnum!): InvestFullyPaidLendingDisclosure
}

type AcatWizardInfo {
  """
  When available, a CTA link to be rendered in Invest for the ACAT Wizard flow
  """
  acatWizardEntryLink: AppLink

  """ACAT Promotion Content"""
  acatPromotion: RichTextContent
}

enum InvestDisclosuresType {
  """Resolve crypto-specific disclosures for invest accounts"""
  CRYPTO

  """Resolve security-specific disclosures for invest accounts"""
  SECURITIES
}

type InvestDisclosures {
  """Disclosures for trading under Invest"""
  investTradeDisclosures(for: InvestDisclosuresType): InvestTradeDisclosures
}

type InvestTradeDisclosures {
  """Array of disclosures to be displayed"""
  disclosures: [InvestTradeDisclosureItem]
}

type InvestTradeDisclosureItem {
  """Section disclosure title for trading under Invest"""
  title: String

  """Disclosure content for trading under Invest"""
  content: String

  """Disclosure links for trading under Invest"""
  links: [AppLink]
}

type InvestAccountOpening {
  title: String
  questions: [InvestAccountOpeningQuestion]
}

enum InvestAccountOpeningQuestionType {
  INVESTMENT_EXPERIENCE
  RISK_TOLERANCE
  INVESTMENT_DURATION
  LIQUIDITY_IMPORTANCE
  TRUSTED_CONTACT
  HOW_DID_YOU_HEAR_ABOUT_M1
}

type InvestAccountOpeningQuestion {
  """
  An ENUM representing the specific question. Clients can key off this value to build custom behavior on a per-question basis.
  """
  questionType: InvestAccountOpeningQuestionType

  """Title screen for the question."""
  title: String

  """Subtitle copy of the given question."""
  subtitle: String

  """Copy to be rendered for the continue CTA."""
  continueLabel: String

  """
  Copy to be rendered for the skip CTA. Null if the question can't be skipped.
  """
  skipLabel: String

  """
  An array of strings for a any disclaimer tooltips that need to be shown for the given question.
  """
  disclaimerTooltipContent: [String]

  """
  An ENUM representing the previous question, null if the given question is the first in its section.
  """
  previousQuestionType: InvestAccountOpeningQuestionType

  """
  An ENUM representing the next question, null if the given question is the last in its section.
  """
  nextQuestionType: InvestAccountOpeningQuestionType
}

"""Information about historical activity for an Invest account."""
type InvestActivity implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A list of Invest account activity entries."""
  activity(
    first: Int
    after: String
    filter: InvestActivityEntryFilterInput = {includeCategoryTrading: true, includeCategoryCash: true, includeCategoryPosition: true, includeCategoryDividend: true, includeCategoryTransfer: true}
    sort: [InvestActivityEntrySortInput!] = [{type: DATE, direction: DESC}]

    """If trades are returned, prevent summarization. Only used by Yodlee."""
    neverSummarizeTrades: Boolean = false
  ): InvestActivityEntryConnection
}

"""Filter options for Invest activity entries."""
input InvestActivityEntryFilterInput {
  """
  When specified, filter for entries occurring after this date. Specify a ISO
  8601 timestamp. If a timezone offset is not specified, the date is considered
  to be in the `America/New_York` timezone.
  """
  fromDate: String

  """
  When specified, filter for entries occurring before this date. Specify a ISO
  8601 timestamp. If a timezone offset is not specified, the date is considered
  to be in the `America/New_York` timezone.
  """
  toDate: String

  """
  When specified and non-empty, filter for entries related to the specified
  security symbol.
  """
  symbols: [String!]

  """When true, filter for entries of the trading category."""
  includeCategoryTrading: Boolean

  """When true, filter for entries of the cash category."""
  includeCategoryCash: Boolean

  """When true, filter for entries of the position category."""
  includeCategoryPosition: Boolean

  """When true, filter for entries of the dividend category."""
  includeCategoryDividend: Boolean

  """When true, filter for entries of the transfer category."""
  includeCategoryTransfer: Boolean
}

"""A sort option."""
input InvestActivityEntrySortInput {
  """A sort type."""
  type: InvestActivityEntrySortTypeEnum!

  """A sort direction."""
  direction: SortDirectionEnum!
}

"""An Invest activity entry sort type."""
enum InvestActivityEntrySortTypeEnum {
  """Date"""
  DATE
}

type InvestActivityEntryConnection {
  pageInfo: PageInfo!
  edges: [InvestActivityEntryEdge]
}

type InvestActivityEntryEdge {
  cursor: String!
  node: InvestActivityEntry
}

"""An Invest activity entry."""
interface InvestActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The process date of this entry as an ISO 8601 timestamp in the UTC timezone.
  """
  date(
    """
    When true, output the date local to the timezone the activity occurred in,
    which is `America/New_York`.
    """
    local: Boolean = false
  ): String!

  """A short title for the entry."""
  title: String!

  """A friendly description of this entry."""
  description: String

  """The account that owns this entry."""
  account: Account

  """An AppLink for any helpful links for this entry."""
  activityDescriptionLink: AppLink
}

"""Summarizes all of the trades occurring during a single trade window."""
type InvestActivityTradeSummaryEntry implements Node & InvestActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The process date of this entry as an ISO 8601 timestamp in the UTC timezone.
  """
  date(
    """
    When true, output the date local to the timezone the activity occurred in,
    which is `America/New_York`.
    """
    local: Boolean = false
  ): String!

  """A short title for the entry."""
  title: String!

  """A friendly description of this entry."""
  description: String

  """The account that owns this entry."""
  account: Account

  """The total number of buy trades."""
  countOfBuys: Int!

  """The total number of sell trades."""
  countOfSells: Int!

  """The unsigned summed dollar amount of buy trades."""
  amountOfBuys: Float!

  """The unsigned summed dollar amount of sell trades."""
  amountOfSells: Float!

  """
  A list of trade activity entries being summarized. Only available when the
  entry is loaded independently, outside of a list.
  """
  trades(first: Int, after: String, includeBuys: Boolean = true, includeSells: Boolean = true): InvestActivityTradeEntryConnection

  """True if this trade window had excluded buy trades."""
  hasExcludedBuys: Boolean

  """Buy trades that were calculated but excluded from a trading window."""
  excludedBuys(first: Int, after: String): InvestActivityExcludedTradeConnection

  """An AppLink for any helpful links for this entry."""
  activityDescriptionLink: AppLink
}

type InvestActivityExcludedTradeConnection {
  total: Int
  pageInfo: PageInfo!
  edges: [InvestActivityExcludedTradeEdge]
}

type InvestActivityExcludedTradeEdge {
  cursor: String!
  node: InvestActivityExcludedTrade
}

"""A trade that was calculated but excluded from a trading window."""
type InvestActivityExcludedTrade {
  """A reference to the security being traded."""
  tradeSecurity: InvestActivitySecurityReference!

  """Value is true for a buy trade, and false for a sell trade."""
  isBuy: Boolean!

  """The unsigned total dollar amount of the trade that was excluded."""
  amount: Float!
}

type InvestActivityTradeEntryConnection {
  total: Int
  pageInfo: PageInfo!
  edges: [InvestActivityTradeEntryEdge]
}

type InvestActivityTradeEntryEdge {
  cursor: String!
  node: InvestActivityTradeEntry
}

"""A single trade within a trade window."""
type InvestActivityTradeEntry implements Node & InvestActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The process date of this entry as an ISO 8601 timestamp in the UTC timezone.
  """
  date(
    """
    When true, output the date local to the timezone the activity occurred in,
    which is `America/New_York`.
    """
    local: Boolean = false
  ): String!

  """A short title for the entry."""
  title: String!

  """A friendly description of this entry."""
  description: String

  """The account that owns this entry."""
  account: Account

  """A reference to the security being traded."""
  tradeSecurity: InvestActivitySecurityReference!

  """Value is true for a buy trade, and false for a sell trade."""
  isBuy: Boolean!

  """The unsigned share quantity being traded."""
  quantity: Float!

  """The share price that the trade occurred at."""
  sharePrice: Float!

  """
  The unsigned total dollar amount of the trade (`abs(quantity) * sharePrice`).
  """
  amount: Float!

  """The trade summary activity entry that summarizes this trade."""
  summary: InvestActivityTradeSummaryEntry

  """An AppLink for any helpful links for this entry."""
  activityDescriptionLink: AppLink
}

type InvestActivityCashEntryTransferDetails {
  """Some descriptive text that summarizes the transfer."""
  transferSummary: String

  """
  The ID of the transfer instance that matches the invest activity entry.
  """
  transferId: ID!

  """The total amount of the matching transfer."""
  totalAmount: Float
}

"""A change to the cash balance of an Invest account."""
type InvestActivityCashEntry implements Node & InvestActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The process date of this entry as an ISO 8601 timestamp in the UTC timezone.
  """
  date(
    """
    When true, output the date local to the timezone the activity occurred in,
    which is `America/New_York`.
    """
    local: Boolean = false
  ): String!

  """A short title for the entry."""
  title: String!

  """A friendly description of this entry."""
  description: String

  """An AppLink for any helpful links for this entry."""
  activityDescriptionLink: AppLink

  """The account that owns this entry."""
  account: Account

  """
  Whether the cash balance change is related to a security. When true, the
  `cashSecurity` field is expected to return a non-null value.
  """
  isRelatedToSecurity: Boolean!

  """The security paying or receiving the cash, if there is one."""
  cashSecurity: InvestActivitySecurityReference

  """The signed dollar change to the cash balance."""
  amount: Float!

  """
  The dividend tooltip text returned when the activity of this entry is
  'DIVIDEND_DEBITED' or 'ADR_FEE_DEBITED'.
  """
  tooltipCopy: String

  """Details of the transfer (if any) that matches the cash activity."""
  transferDetails: InvestActivityCashEntryTransferDetails
}

"""A change to the holdings of an Invest account."""
type InvestActivityPositionEntry implements Node & InvestActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The process date of this entry as an ISO 8601 timestamp in the UTC timezone.
  """
  date(
    """
    When true, output the date local to the timezone the activity occurred in,
    which is `America/New_York`.
    """
    local: Boolean = false
  ): String!

  """A short title for the entry."""
  title: String!

  """A friendly description of this entry."""
  description: String

  """The account that owns this entry."""
  account: Account

  """The security for which shares are being credited or debited."""
  positionSecurity: InvestActivitySecurityReference!

  """The signed share quantity change to the position."""
  quantity: Float!

  """An AppLink for any helpful links for this entry."""
  activityDescriptionLink: AppLink
}

type InvestActivityRebalanceEntry implements Node & InvestActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The process date of this entry as an ISO 8601 timestamp in the UTC timezone.
  """
  date(
    """
    When true, output the date local to the timezone the activity occurred in,
    which is `America/New_York`.
    """
    local: Boolean = false
  ): String!

  """A short title for the entry."""
  title: String!

  """A friendly description of this entry."""
  description: String

  """The account that owns this entry."""
  account: Account

  """An AppLink for any helpful links for this entry."""
  activityDescriptionLink: AppLink
}

type InvestActivityOrderEntry implements Node & InvestActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The process date of this entry as an ISO 8601 timestamp in the UTC timezone.
  """
  date(
    """
    When true, output the date local to the timezone the activity occurred in,
    which is `America/New_York`.
    """
    local: Boolean = false
  ): String!

  """A short title for the entry."""
  title: String!

  """A friendly description of this entry."""
  description: String

  """The account that owns this entry."""
  account: Account

  """An AppLink for any helpful links for this entry."""
  activityDescriptionLink: AppLink
}

type InvestActivityOtherEntry implements Node & InvestActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The process date of this entry as an ISO 8601 timestamp in the UTC timezone.
  """
  date(
    """
    When true, output the date local to the timezone the activity occurred in,
    which is `America/New_York`.
    """
    local: Boolean = false
  ): String!

  """A short title for the entry."""
  title: String!

  """A friendly description of this entry."""
  description: String

  """The account that owns this entry."""
  account: Account

  """An AppLink for any helpful links for this entry."""
  activityDescriptionLink: AppLink
}

type InvestActivitySecurityReference {
  """The best-available descriptor for the security."""
  descriptor: String!

  """The symbol of the security, if known."""
  symbol: String

  """The security, if available."""
  security: Security
}

type Overview implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String
  balances: BalancesOverview

  """The cards that are displayed on overview hub."""
  cards: OverviewCards

  """
  Returns true if the feature flag for overview hub is enabled for the user.
  """
  overviewHubEnabled: Boolean!

  """
  True if the user should see the Move Money CTA on the home page (user has an active funding source or ach relationship). If null, default to showing the CTA.
  """
  showMoveMoney: Boolean

  """The tiles that are displayed on the overview home page"""
  homeTilesSections: HomeTilesSectionConnection

  """Disclosure information for the overview page footer"""
  disclosuresFooter: AppRichTextDisclosureLink

  """The mobile floating action button details for the home page"""
  floatingActionButton: AppNavigationItem

  """The section for showing promotional content on the home overview page"""
  promotions: OverviewPromotions
}

type BalancesOverview implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Returns the total value of all assets minus liabilities."""
  total: Float

  """Returns the total account values of all invest accounts."""
  invest: Float @deprecated(reason: "Use `accountTotals` instead. This will still return the sum of Invest accounts.")

  """Returns the total account value of the spend account."""
  spend: Float @deprecated(reason: "Use `accountTotals` instead. This will return the value of the Earn accounts. It is purposely incorrect due to the Spend pillar changes and mobile still using this field. Web does not use this.")

  """Returns the total amount owed on borrow."""
  borrow: Float @deprecated(reason: "Use `accountTotals` instead. This will return the sum of Borrow accounts.")

  """Returns the total amount owed on the M1 credit card."""
  credit: Float @deprecated(reason: "Use `accountTotals` instead. This will return the value of the Credit Card account.")

  """The total assets that a user has on the platform."""
  assets: NetWorthLabel

  """The total liabilities that a user has on the platform."""
  liabilities: NetWorthLabel

  """The ratio of assets compared to liabilities between 0-1."""
  assetRatio: Float

  """An array of all of the user's account types and balances."""
  accountTotals: [AccountTotalWithStatus]
  isPartialTotal: Boolean!
}

type OverviewCards implements Node {
  """The ID of this node."""
  id: ID!

  """An array of all the asset card types."""
  assets: [OverviewCardInterface]

  """An array of all the liability card types."""
  liabilities: [OverviewCardInterface]

  """The invest card for overview hub."""
  invest: OverviewInvestCard @deprecated(reason: "Use 'assets' instead.")

  """The spend card for overview hub."""
  spend: OverviewCard @deprecated(reason: "Use 'assets' instead.")

  """The borrow card for overview hub."""
  borrow: OverviewCard @deprecated(reason: "Use 'liabilities' instead.")

  """The credit card card for overview hub."""
  creditCard: OverviewCard @deprecated(reason: "Use 'liabilities' instead.")
}

interface OverviewCardInterface {
  """The title for the overview card."""
  title: OverviewCardTitle!

  """The footer text and icon for the card."""
  footer: OverviewCardFooter

  """The content for the card."""
  content: OverviewCardContentInterface

  """The image shown as a marketing image on the card."""
  marketingImage: AppImage

  """The link that directs clicking/touching the card."""
  link: AppLink

  """The analytics event that is fired when the card is displayed."""
  displayAnalyticsEvent: AppAnalyticsEvent
}

interface OverviewCardContentInterface {
  """The text for the content."""
  text: String!

  """The subtitle for the content."""
  subtitle: String
}

interface OverviewCardTitleInterface {
  """The icon for the title."""
  icon: AppImage

  """The text shown for the title."""
  text: String!

  """The subtitle for this title."""
  subtitle: String
}

type OverviewCard implements OverviewCardInterface {
  """The title for the overview card."""
  title: OverviewCardTitle!

  """The content for the overview card."""
  content: OverviewCardContentInterface

  """The footer text and icon for the card."""
  footer: OverviewCardFooter

  """The image shown as a marketing image on the card."""
  marketingImage: AppImage

  """The link that directs clicking/touching the card."""
  link: AppLink

  """The analytics event that is fired when the card is displayed."""
  displayAnalyticsEvent: AppAnalyticsEvent
}

type OverviewCardTitle implements OverviewCardTitleInterface {
  """The icon on the title."""
  icon: AppImage

  """The title text."""
  text: String!

  """The subtitle for the title."""
  subtitle: String
}

type OverviewCardContent implements OverviewCardContentInterface {
  """The main content text for the overview card."""
  text: String!

  """The subtitle for the content."""
  subtitle: String
}

type OverviewCardFooter {
  """The image for the icon on the icon"""
  icon: AppImage

  """The text shown in the footer of the card."""
  text: String
}

type OverviewInvestCard implements OverviewCardInterface {
  """The title for the overview card."""
  title: OverviewCardTitle!

  """The content for the overview card."""
  content: OverviewCardContentInterface

  """The footer text and icon for the card."""
  footer: OverviewCardFooter

  """The image shown as a marketing image on the card."""
  marketingImage: AppImage

  """The link that directs clicking/touching the card."""
  link: AppLink

  """The analytics event that is fired when the card is displayed."""
  displayAnalyticsEvent: AppAnalyticsEvent
}

type OverviewSpendCard implements OverviewCardInterface {
  """The title for the overview card."""
  title: OverviewCardTitle!

  """The content for the overview card."""
  content: OverviewCardContentInterface

  """The footer text and icon for the card."""
  footer: OverviewCardFooter

  """The image shown as a marketing image on the card."""
  marketingImage: AppImage

  """The link that directs clicking/touching the card."""
  link: AppLink

  """The analytics event that is fired when the card is displayed."""
  displayAnalyticsEvent: AppAnalyticsEvent
}

type OverviewBorrowCard implements OverviewCardInterface {
  """The title for the overview card."""
  title: OverviewCardTitle!

  """The content for the overview card."""
  content: OverviewCardContentInterface

  """The footer text and icon for the card."""
  footer: OverviewCardFooter

  """The image shown as a marketing image on the card."""
  marketingImage: AppImage

  """The link that directs clicking/touching the card."""
  link: AppLink

  """The analytics event that is fired when the card is displayed."""
  displayAnalyticsEvent: AppAnalyticsEvent
}

type OverviewCreditCard implements OverviewCardInterface {
  """The title for the overview card."""
  title: OverviewCardTitle!

  """The content for the overview card."""
  content: OverviewCardContentInterface

  """The footer text and icon for the card."""
  footer: OverviewCardFooter

  """The image shown as a marketing image on the card."""
  marketingImage: AppImage

  """The link that directs clicking/touching the card."""
  link: AppLink

  """The analytics event that is fired when the card is displayed."""
  displayAnalyticsEvent: AppAnalyticsEvent
}

type OverviewInvestCardContent implements OverviewCardContentInterface {
  """The text for the invest card's content."""
  text: String!

  """The gains for the all of the user's accounts."""
  gains: OverviewInvestCardContentSubtitle

  """The subtitle for the content."""
  subtitle: String
}

type OverviewInvestCardContentSubtitle {
  """The change for all of the user's invest accounts."""
  change: String

  """The percent change for all of the user's invest accounts."""
  percentChange: String

  """Boolean declaring if this is a gain or loss."""
  isGain: Boolean
}

"""The account type along with total balance of the account."""
type AccountTotalWithStatus {
  """
  The type of account.
  Currently limited to 'Invest' | 'Earn' | 'Borrow' | 'Spend'.
  """
  type: String!

  """
  The total account value (positive or negative) for the current account. For display purposes, generally, Borrow will be negative, Spend (Credit Card) and all others will be positive.
  """
  total: Float!
}

"""The label and value for the asset and liabilities"""
type NetWorthLabel {
  """The type of label. Limited to 'Assets' | 'Liabilities'."""
  label: String!

  """The value for the asset or liability."""
  value: Float
}

type HomeTilesSectionConnection {
  pageInfo: PageInfo!
  edges: [HomeTilesSectionEdge]
}

type HomeTilesSectionEdge {
  cursor: String!
  node: HomeTilesSection
}

type HomeTilesSection {
  """
  The header of each group of tiles. Limited to 'Assets' | 'Liabilities'.
  """
  header: String!

  """
  The tiles that are displayed on the home page for assets and liabilities.
  """
  tiles: [AccountTile]!
}

type AccountTile {
  """The title of the tile."""
  title: String!

  """The icon of the tile"""
  icon: AppImage

  """The subtitle of the tile"""
  subtitle: SubtitleInfo

  """The value for the account for the tile"""
  value: String

  """The subvalue for the account for the tile"""
  subValue: SubValueInfo

  """The illustration to be displayed on the tile"""
  illustration: AppImage

  """An analytics event to fire when the given tile is displayed."""
  analyticsEvent: AppAnalyticsEvent

  """The primary action that should take place when the tile is clicked"""
  primaryAction: AppLink

  """The secondary action that should take place when subtitle is clickable"""
  secondaryAction: AppNavigationItem
}

type SubtitleInfo {
  """The subtitle text of the tile"""
  text: String

  """The icon for the subtitle"""
  icon: AppImage
}

type SubValueInfo {
  """The subvalue for the account for the tile"""
  text: String

  """The color for the subvalue"""
  color: String
}

type PieAnalysis {
  """
  The total number of security holdings associated with this pie, including
  those of any pie descendents.
  """
  totalHoldings: Int!

  """
  The average dividend yield for the components of this pie, weighted by their
  target allocation percentage. Value is expressed as a percentage. Value is
  null when unavailable.
  """
  dividendYield: Float

  """
  The avergage net expense ratio for the components of this pie, weighted by
  their target allocation percentage. Value is expressed as a percentage. Value
  is null when unavailable.
  """
  netExpenseRatio: Float

  """
  Backtested performance information for this pie. Value is null if backtesting
  is currently unavailable.
  """
  backtesting(
    """A past time period anchored by the present."""
    period: PieBacktestPeriodEnum!

    """
    The initial dollar value for the backtest. Must be a positive value. The
    default value is `100`.
    """
    initialValue: Float = 100
  ): PieBacktesting
}

type PieBacktesting {
  """The start time of the backtest period."""
  startTime: String!

  """The end time of the backtest period."""
  endTime: String!

  """
  A time series of backtest values. Value is null when data is temporarily
  unavailable.
  """
  series: [PieBacktestTimeSeriesPoint!]

  """
  The change in value over the backtest period. Value is null when data is
  temporarily unavailable.
  """
  valueChange: Float

  """
  The percent change in value over the backtest period. Value is null when data
  is temporarily unavailable.
  """
  valuePercentChange: Float
}

type PieBacktestTimeSeriesPoint {
  """The time of this point."""
  time: String!

  """The dollar value at this point."""
  value: Float!
}

"""A backtest time period."""
enum PieBacktestPeriodEnum {
  """1 day"""
  ONE_DAY

  """1 week"""
  ONE_WEEK

  """1 month"""
  ONE_MONTH

  """1 quarter"""
  ONE_QUARTER

  """Year to date"""
  YEAR_TO_DATE

  """1 year"""
  ONE_YEAR

  """3 years"""
  THREE_YEARS

  """5 years"""
  FIVE_YEARS
}

type PieEditModel {
  """
  Analysis on the composition of this pie edit model. Value is null if the pie
  has greater than 500 securities, or when analysis is unavilable.
  """
  analysis: PieAnalysis
}

type PieFundamentals {
  """
  The total number of security holdings associated with this pie, including
  those of any pie descendents. Value is null when unavailable.
  """
  totalHoldings: Int

  """
  The average dividend yield for the components of this pie, weighted by their
  target allocation percentage. Value is expressed as a percentage. Value is
  null when unavailable.
  """
  dividendYield: Float

  """
  The avergage net expense ratio for the components of this pie, weighted by
  their target allocation percentage. Value is expressed as a percentage. Value
  is null when unavailable.
  """
  netExpenseRatio: Float
}

type PieChangesConfirmationMovedSlice {
  """The name of the slice."""
  name: String!

  """The symbol of the slice if applicable."""
  symbol: String

  """A pill used to represent that the slice was Moved"""
  actionPill: AppPill

  """If available, a URL to a logo image that represents the pie."""
  logoUrl: String
}

type InvestAcatWizardContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Screen content for the ACAT Type Step of the ACAT Wizard Flow."""
  acatTransferTypeScreenContent: InvestAcatTransferTypeScreenContent

  """
  Screen content for the Brokerage Selection step of the ACAT Wizard Flow.
  """
  brokerageSelectionContent: InvestAcatBrokerageSelectionContent

  """
  Screen content for the Brokerage Account Details Input step of the ACAT Wizard Flow.
  """
  brokerageAccountDetailsContent(investAcatWizardContraParticipantId: ID!): InvestAcatBrokerageAccountDetailsContent

  """
  Screen content for the Destination Selection step of the ACAT Wizard Flow.
  """
  destinationAccountContent: InvestAcatDestinationAccountContent

  """
  Screen content for the Transfer Information step of the ACAT Wizard Flow.
  """
  transferInformationScreenContent: InvestAcatTransferInformationScreenContent

  """
  Screen content for the Confirm Selections step of the ACAT Wizard Flow.
  """
  confirmSelectionsScreenContent(input: SubmitInvestAcatTransferInput): InvestAcatConfirmSelectionsContent

  """
  Screen content for the successful ACAT confirmation step of the ACAT Wizard Flow.
  """
  acatConfirmationContent(investAcatWizardContraParticipantId: ID!): InvestAcatConfirmationContent @deprecated(reason: "Use `SubmitInvestAcatTransferPayload.toast` instead.")
  assetSelectionContent(investAcatWizardContraParticipantId: ID!): InvestAcatWizardAssetSelectionContent!

  """The content for the rollover information screen."""
  rolloverInformationScreenContent: AppInfoPage

  """The content for the rollover creation screen"""
  rolloverCreationScreenContent: RolloverCreationScreenContent

  """Informational message for the ACAT Transfer Type screen."""
  informationalBanner: InformationBanner
}

type RolloverCreationScreenContent {
  """The webview URL for initiating the ACAT rollover flow"""
  initiateRolloverWebviewUrl: String!
}

type InvestAcatWizardAssetSelectionContent implements Node {
  id: ID!
  header: RichTextContent
  cash: InvestAcatWizardAssetSelectionCashSectionContent
  assets: InvestAcatWizardAssetSelectionAssetsSectionContent
  ctaLabel: String!
}

type InvestAcatWizardAssetSelectionCashSectionContent {
  header: RichTextContent
  description: RichTextContent
  input: AcatWizardAssetSelectionInput
}

type InvestAcatWizardAssetSelectionAssetsSectionContent {
  """Properties for displaying header content"""
  header: RichTextContent

  """Text description for partial transfer asset selection"""
  description: RichTextContent

  """Properties for displaying the securities search input field"""
  searchInput: AcatWizardAssetSelectionInput

  """Properties for displaying the security quantity input field"""
  sharesInput: AcatWizardAssetSelectionInput

  """A CTA associated with this section"""
  cta: AcatWizardAssetSelectionCTA!

  """
  Copy for informing the user if they did not find what they are searching for
  """
  notFoundCopy: RichTextContent
}

type AcatWizardAssetSelectionInput {
  label: String
  placeholder: String
  helperText: String
}

type AcatWizardAssetSelectionCTA {
  label: String!
  icon: AppImage
}

type InvestAcatTransferTypeScreenContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Header content."""
  header: String

  """Header `AppLink`."""
  headerLink: AppLink

  """ACAT transfer option selections."""
  selections: [InvestAcatWizardTransferTypeSelection!]!

  """CTA label."""
  ctaLabel: String!

  """Analytics for viewing this page"""
  pageViewAnalyticsEvent: AppAnalyticsEvent
}

type InvestAcatWizardTransferTypeSelection {
  """Transfer type label."""
  label: String!

  """Transfer type sub-label."""
  sublabel: String

  """`AppLink` to use for navigation purposes."""
  navigation: InvestAcatWizardTransferTypeSelectionNavigationEnum!

  """Analytics for choosing this transfer type"""
  analyticsEvent: AppAnalyticsEvent
}

enum InvestAcatWizardTransferTypeSelectionNavigationEnum {
  """FULL_ACAT_TRANSFER"""
  FULL_ACAT_TRANSFER

  """PARTIAL_ACAT_TRANSFER"""
  PARTIAL_ACAT_TRANSFER

  """ROLLOVER"""
  ROLLOVER
}

type InvestAcatBrokerageSelectionContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Header content."""
  header: String

  """
  Content for the Contra Participant search form in the Invest ACAT Wizard.
  """
  searchForm: InvestAcatWizardContraSearchForm

  """List of contra participants available for users to ACAT from."""
  contraParticipants: InvestAcatWizardContraParticipantConnection

  """CTA label."""
  ctaLabel: String!
}

type InvestAcatWizardContraSearchForm implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  Copy and `AppLink` for users transferring from a brokerage that cannot be handled in-app.
  """
  contraUnavailableNotice: InvestAcatWizardContraUnavailable

  """Search form placeholder text."""
  placeholder: String

  """Result of contra participants based on user's search term."""
  contraParticipantList(searchTerm: String): InvestAcatWizardContraParticipantConnection
}

type InvestAcatWizardContraUnavailable {
  """Copy to display when a user's search yields no results."""
  content: String!

  """`AppLink` to display to users when their search yields no results."""
  link: AppLink!
}

type InvestAcatWizardContraParticipantConnection {
  pageInfo: PageInfo!
  edges: [InvestAcatWizardContraParticipantEdge]
}

type InvestAcatWizardContraParticipantEdge {
  cursor: String!
  node: InvestAcatWizardContraParticipant
}

type InvestAcatWizardContraParticipant implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """`AppImage` for the contra participant."""
  icon: AppImage

  """Name of the contraparticipant."""
  name: String
}

type InvestAcatBrokerageAccountDetailsContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Header content."""
  header: String

  """
  Label and placeholder content for the contra account number text field.
  """
  accountNumberTextField: InvestAcatWizardContraAccountNumberTextField

  """Optional informational message."""
  informationalMessage: InvestAcatWizardInformationalMessageContent

  """CTA label."""
  ctaLabel: String!
}

type InvestAcatWizardContraAccountNumberTextField {
  """Label copy."""
  label: String

  """Placeholder copy."""
  placeholder: String

  """
  For use in client-side input validation. Account number must be greater than or equal to this amount.
  """
  minAccountLength: Int

  """
  For use in client-side input validation. Account number must be less than or euqal to this amount.
  """
  maxAccountLength: Int
}

type InvestAcatWizardInformationalMessageContent {
  """
  Icon to display for the ACAT Wizard Informational Message on the Contra Brokerage Account Details page.
  """
  icon: AppImage

  """
  Copy to display for the ACAT Wizard Informational Message on the Contra Brokerage Account Details page.
  """
  copy: String
}

type InvestAcatDestinationAccountContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Header content."""
  header: String

  """List of valid destination participants for the ACAT transfer."""
  validParticipants: AccountConnection

  """Label for the participant dropdown."""
  validParticipantsLabel: String

  """Informational message."""
  informationalMessage: AppInformationalMessageCard

  """CTA label."""
  ctaLabel: String!
}

type InvestAcatTransferInformationScreenContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Header content."""
  header: String

  """
  A list of details that a user should know as it pertains to ACAT Invest transfers.
  """
  transferDetails: [InvestAcatTransferDetail!]!

  """Footer content."""
  footer: String

  """CTA label."""
  ctaLabel: String!
}

type InvestAcatTransferDetail {
  """`AppLink` for the Transfer Detail."""
  icon: AppImage

  """Transfer detail title."""
  title: String!

  """Transfer detail content."""
  content: String!

  """Optional `AppLink` for the transfer detail."""
  link: AppLink
}

type InvestAcatConfirmSelectionsContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Header content."""
  header: String

  """CTA label."""
  ctaLabel: String!

  """The internal account a user is transferring assets into."""
  destinationAccount: Account

  """The external brokerage a user is transferring assets from."""
  externalBrokerage: InvestAcatWizardContraParticipant

  """
  Additional information related to the transfer (e.g. securities, cash, etc.).
  """
  sections: [InvestAcatConfirmSelectionsContentSection!]

  """
  The amount of cash a user is transferring as part of a partial ACAT. Will be null for full ACAT transfers.
  """
  cash: InvestAcatConfirmSelectionsCashSection

  """
  The number of assets a user is transferring as part of a partial ACAT. Will be null for full ACAT transfers.
  """
  assets: InvestAcatConfirmSelectionsAssetsSection

  """
  Additional details related to the ACAT transfer for the user to be aware of.
  """
  transferDetails: InvestAcatConfirmSelectionsTransferDetailsSection!
}

type InvestAcatConfirmSelectionsContentSection {
  header: String!
  entries: [InvestAcatConfirmSelectionsContentSectionEntry!]!
}

type InvestAcatConfirmSelectionsCashSection {
  header: RichTextContent
  amount: String!
}

type InvestAcatConfirmSelectionsAssetsSection {
  header: RichTextContent

  """Label for a link that shows how many assets the user is transferring"""
  assetsListLinkLabel: String!
}

type InvestAcatConfirmSelectionsContentSectionEntry {
  label: String!
  value: String!
}

type InvestAcatConfirmSelectionsTransferDetailsSection {
  header: String
  details: [InvestAcatConfirmSelectionsTransferDetailsSectionDetail!]!
}

type InvestAcatConfirmSelectionsTransferDetailsSectionDetail {
  icon: AppImage
  body: RichTextContent!
}

type InvestAcatConfirmationContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Header content."""
  header(input: InvestAcatConfirmationContentHeaderInput): String

  """`AppImage` for confirmation screen."""
  image: AppImage

  """`InvestAcatConfirmationInfoCard` content."""
  infoCard: InvestAcatConfirmationInfoCard

  """CTA label."""
  ctaLabel: String!
}

input InvestAcatConfirmationContentHeaderInput {
  """
  Optional input argument, when included, result will be a string of HTML.
  """
  includeHtml: Boolean

  """
  Optional input argument, when included, result will be a string of Markdown.
  """
  includeMarkdown: Boolean
}

type InvestAcatConfirmationInfoCard {
  """Title content."""
  title: String

  """An array of strings to display as a list."""
  content: [String!]!

  """Footer content."""
  footer: String
}

type Profile {
  """
  Information about the primary account holder. Null when there are no accounts with a primary account holder.
  """
  primary: AccountHolder!

  """
  Information about the secondary account holder. Null when there are no accounts with a secondary account holder.
  """
  secondary: AccountHolder

  """
  Suitabililty information about the primary account holder. Null when there are no accounts with a primary account holder.
  """
  suitability: SuitabilityProfile!

  """
  A list of retirement account beneficiaries, if set. During updates, the value
  for this field has special meaning -- set `null` to leave existing
  beneficiaries as-is, or set `[]` to clear the existing beneficiaries list.
  """
  beneficiaries: [Beneficiary!]!

  """When true, beneficiaries are allowed to be set on the profile."""
  allowsBeneficiaries: Boolean!

  """Updates to account holder home address will only be applied when true."""
  allowsHomeAddressUpdates: Boolean

  """The current update status for profile information."""
  status: ProfileUpdateStatusEnum! @deprecated(reason: "Use 'identityStatus' instead.")

  """
  The current user's Identity status. Null if the user does not have an M1 Identity.
  """
  identityStatus: IdentityProfileStatus

  """The trusted contact for the user profile."""
  trustedContact: TrustedContact
}

"""Profile information for the user."""
input ProfileInput {
  """
  Information about the primary account holder. Null when there are no accounts with a primary account holder.
  """
  primary: UpdateAccountHolderInput!

  """
  Information about the secondary account holder. Null when there are no accounts with a secondary account holder.
  """
  secondary: UpdateAccountHolderInput

  """
  Suitabililty information about the primary account holder. Null when there are no accounts with a primary account holder.
  """
  suitability: SuitabilityProfileInput

  """
  A list of retirement account beneficiaries, if set. During updates, the value
  for this field has special meaning -- set `null` to leave existing
  beneficiaries as-is, or set `[]` to clear the existing beneficiaries list.
  """
  beneficiaries: [NewBeneficiaryInput!]

  """
  Not functional, ignore. Do not specify in queries so that it can be removed.
  """
  allowsHomeAddressUpdates: Boolean

  """Information about the trusted contact for the user."""
  trustedContact: TrustedContactInput
}

"""An update status for profile information."""
enum ProfileUpdateStatusEnum {
  """An account opening is not yet complete."""
  UNACCEPTED

  """Latest update was accepted."""
  ACCEPTED

  """Latest update is currently pending."""
  PENDING

  """Latest update was rejected."""
  REJECTED
}

enum IdentityProfileStatus {
  Created
  Queued
  Submitted
  Approved
  Rejected
  InReview
  UserActionRequired
  Unverified
}

"""Represents profile information about an investment account holder."""
type AccountHolder {
  """The full name of the account holder."""
  fullName: String!

  """The first (given) name of the account holder."""
  firstName: String!

  """The middle initial of the account holder."""
  middleInitial: String

  """The last (family) name of the account holder."""
  lastName: String!

  """The suffix of the account holder's name."""
  suffix: NameSuffixEnum

  """The account holder's date of birth, in the format of `YYYY-MM-DD`."""
  dateOfBirth: String!

  """The account holder's country of citizenship."""
  countryOfCitizenship: String!

  """The home address of the account holder."""
  homeAddress: MailingAddress!

  """The phone number of the account holder."""
  phoneNumber: String!

  """An optional, additional email address for the account holder."""
  additionalEmail: String

  """The employment information for this account holder."""
  employment: Employment! @deprecated(reason: "use employmentInfo instead")

  """The employment information for this account holder."""
  employmentInfo: Employment

  """Disclosure of an affiliation with a stock exchange or FINRA."""
  exchangeOrFinraAffiliationDisclosure: ExchangeOrFinraAffiliationDisclosure

  """Disclosure of being a control person at any publicly-traded companies."""
  controlPersonDisclosure: ControlPersonDisclosure

  """Disclosure of political exposure."""
  politicalExposureDisclosure: PoliticalExposureDisclosure! @deprecated(reason: "Deprecated please use politicalDisclosure instead")

  """Disclosure of political exposure."""
  politicalDisclosure: PoliticalExposureDisclosure

  """Disclosure of user being subject to backup withholding."""
  backupWithholding: BackupWithholding
}

"""Represents profile information about an investment account holder."""
input NewAccountHolderInput {
  """The first (given) name of the account holder."""
  firstName: FirstName!

  """The middle initial of the account holder."""
  middleInitial: MiddleInitial

  """The last (family) name of the account holder."""
  lastName: LastName!

  """The suffix of the account holder's name."""
  suffix: NameSuffixEnum

  """The account holder's date of birth, in the format of `YYYY-MM-DD`."""
  dateOfBirth: String!

  """The account holder's country of citizenship."""
  countryOfCitizenship: String!

  """The home address of the account holder."""
  homeAddress: MailingAddressInput!

  """The phone number of the account holder."""
  phoneNumber: PhoneNumber

  """An optional, additional email address for the account holder."""
  additionalEmail: String

  """The employment information for this account holder."""
  employment: EmploymentInput!

  """Disclosure of an affiliation with a stock exchange or FINRA."""
  exchangeOrFinraAffiliationDisclosure: ExchangeOrFinraAffiliationDisclosureInput!

  """Disclosure of being a control person at any publicly-traded companies."""
  controlPersonDisclosure: ControlPersonDisclosureInput!

  """Disclosure of political exposure."""
  politicalExposureDisclosure: PoliticalExposureDisclosureInput!

  """Disclosure of user being subject to backup withholding."""
  backupWithholding: BackupWithholdingInput
}

"""
Represents profile information about a custodial investment account holder.
"""
input NewCustodialAccountBeneficiaryInput {
  """The first (given) name of the custodial account's beneficiary."""
  firstName: FirstName!

  """The middle initial of the custodial account's beneficiary."""
  middleInitial: MiddleInitial

  """The last (family) name of the custodial account's beneficiary."""
  lastName: LastName!

  """The suffix of the custodial account beneficiary's name."""
  suffix: NameSuffixEnum

  """
  The custodial account beneficiary's date of birth, in the format of `YYYY-MM-DD`.
  """
  dateOfBirth: String!

  """The custodial account beneficiary's country of citizenship."""
  countryOfCitizenship: String!

  """The legal address of the custodial account's beneficiary."""
  legalResidence: MailingAddressBeneficiaryInput!
}

"""Represents profile information about an investment account holder."""
input UpdateAccountHolderInput {
  """
  Name changes are no longer allowed. Stop using this field in queries. Will be removed in the future.
  """
  firstName: FirstName

  """
  Name changes are no longer allowed. Stop using this field in queries. Will be removed in the future.
  """
  middleInitial: MiddleInitial

  """
  Name changes are no longer allowed. Stop using this field in queries. Will be removed in the future.
  """
  lastName: LastName

  """
  Name changes are no longer allowed. Stop using this field in queries. Will be removed in the future.
  """
  suffix: NameSuffixEnum

  """
  Home addresses changes may not be allowed. Omit this field when not necessary.
  """
  homeAddress: MailingAddressInput

  """
  Phone number changes are no longer allowed. Stop using this field in queries. Will be removed in the future.
  """
  phoneNumber: PhoneNumber

  """An optional, additional email address for the account holder."""
  additionalEmail: String

  """The employment information for this account holder."""
  employment: EmploymentInput

  """Disclosure of an affiliation with a stock exchange or FINRA."""
  exchangeOrFinraAffiliationDisclosure: ExchangeOrFinraAffiliationDisclosureInput

  """Disclosure of being a control person at any publicly-traded companies."""
  controlPersonDisclosure: ControlPersonDisclosureInput

  """Disclosure of political exposure."""
  politicalExposureDisclosure: PoliticalExposureDisclosureInput

  """Disclosure of user being subject to backup withholding."""
  backupWithholding: BackupWithholdingInput
}

"""A name suffix."""
enum NameSuffixEnum {
  """Jr."""
  JR

  """Sr."""
  SR

  """I"""
  I

  """II"""
  II

  """III"""
  III

  """IV"""
  IV

  """V"""
  V

  """VI"""
  VI

  """VII"""
  VII

  """VIII"""
  VIII

  """IX"""
  IX
}

"""
Legacy - use Invest.permissibleCountriesForAccountOpen instead.

A list of countries valid for account holder citizenship.
"""
enum CitizenshipCountryEnum {
  """United States of America"""
  USA

  """Afghanistan"""
  AFG

  """Åland Islands"""
  ALA

  """Albania"""
  ALB

  """Algeria"""
  DZA

  """American Samoa"""
  ASM

  """Andorra"""
  AND

  """Angola"""
  AGO

  """Anguilla"""
  AIA

  """Antarctica"""
  ATA

  """Antigua and Barbuda"""
  ATG

  """Argentina"""
  ARG

  """Armenia"""
  ARM

  """Aruba"""
  ABW

  """Australia"""
  AUS

  """Austria"""
  AUT

  """Azerbaijan"""
  AZE

  """Bahamas"""
  BHS

  """Bahrain"""
  BHR

  """Bangladesh"""
  BGD

  """Barbados"""
  BRB

  """Belarus"""
  BLR

  """Belgium"""
  BEL

  """Belize"""
  BLZ

  """Benin"""
  BEN

  """Bermuda"""
  BMU

  """Bhutan"""
  BTN

  """Bolivia"""
  BOL

  """Bonaire, Sint Eustatius and Saba"""
  BES

  """Bosnia and Herzegovina"""
  BIH

  """Botswana"""
  BWA

  """Bouvet Island"""
  BVT

  """Brazil"""
  BRA

  """British Indian Ocean Territory"""
  IOT

  """Brunei Darussalam"""
  BRN

  """Bulgaria"""
  BGR

  """Burkina Faso"""
  BFA

  """Burundi"""
  BDI

  """Cabo Verde"""
  CPV

  """Cambodia"""
  KHM

  """Cameroon"""
  CMR

  """Canada"""
  CAN

  """Cayman Islands"""
  CYM

  """Central African Republic"""
  CAF

  """Chad"""
  TCD

  """Chile"""
  CHL

  """China"""
  CHN

  """Christmas Island"""
  CXR

  """Cocos (Keeling) Islands"""
  CCK

  """Colombia"""
  COL

  """Comoros"""
  COM

  """Congo - Kinshasa"""
  COD

  """Congo - Brazzaville"""
  COG

  """Cook Islands"""
  COK

  """Costa Rica"""
  CRI

  """Côte d'Ivoire"""
  CIV

  """Croatia"""
  HRV

  """Cuba"""
  CUB

  """Curaçao"""
  CUW

  """Cyprus"""
  CYP

  """Czechia"""
  CZE

  """Denmark"""
  DNK

  """Djibouti"""
  DJI

  """Dominica"""
  DMA

  """Dominican Republic"""
  DOM

  """Ecuador"""
  ECU

  """Egypt"""
  EGY

  """El Salvador"""
  SLV

  """Equatorial Guinea"""
  GNQ

  """Eritrea"""
  ERI

  """Estonia"""
  EST

  """Ethiopia"""
  ETH

  """Falkland Islands"""
  FLK

  """Faroe Islands"""
  FRO

  """Fiji"""
  FJI

  """Finland"""
  FIN

  """France"""
  FRA

  """French Guiana"""
  GUF

  """French Polynesia"""
  PYF

  """French Southern Territories"""
  ATF

  """Gabon"""
  GAB

  """Gambia"""
  GMB

  """Georgia"""
  GEO

  """Germany"""
  DEU

  """Ghana"""
  GHA

  """Gibraltar"""
  GIB

  """Greece"""
  GRC

  """Greenland"""
  GRL

  """Grenada"""
  GRD

  """Guadeloupe"""
  GLP

  """Guam"""
  GUM

  """Guatemala"""
  GTM

  """Guernsey"""
  GGY

  """Guinea"""
  GIN

  """Guinea-Bissau"""
  GNB

  """Guyana"""
  GUY

  """Haiti"""
  HTI

  """Heard Island and McDonald Islands"""
  HMD

  """Holy See"""
  VAT

  """Honduras"""
  HND

  """Hong Kong"""
  HKG

  """Hungary"""
  HUN

  """Iceland"""
  ISL

  """India"""
  IND

  """Indonesia"""
  IDN

  """Iran"""
  IRN

  """Iraq"""
  IRQ

  """Ireland"""
  IRL

  """Isle of Man"""
  IMN

  """Israel"""
  ISR

  """Italy"""
  ITA

  """Jamaica"""
  JAM

  """Japan"""
  JPN

  """Jersey"""
  JEY

  """Jordan"""
  JOR

  """Kazakhstan"""
  KAZ

  """Kenya"""
  KEN

  """Kiribati"""
  KIR

  """North Korea"""
  PRK

  """South Korea"""
  KOR

  """Kuwait"""
  KWT

  """Kyrgyzstan"""
  KGZ

  """Laos"""
  LAO

  """Latvia"""
  LVA

  """Lebanon"""
  LBN

  """Lesotho"""
  LSO

  """Liberia"""
  LBR

  """Libya"""
  LBY

  """Liechtenstein"""
  LIE

  """Lithuania"""
  LTU

  """Luxembourg"""
  LUX

  """Macao"""
  MAC

  """Macedonia"""
  MKD

  """Madagascar"""
  MDG

  """Malawi"""
  MWI

  """Malaysia"""
  MYS

  """Maldives"""
  MDV

  """Mali"""
  MLI

  """Malta"""
  MLT

  """Marshall Islands"""
  MHL

  """Martinique"""
  MTQ

  """Mauritania"""
  MRT

  """Mauritius"""
  MUS

  """Mayotte"""
  MYT

  """Mexico"""
  MEX

  """Micronesia"""
  FSM

  """Moldova"""
  MDA

  """Monaco"""
  MCO

  """Mongolia"""
  MNG

  """Montenegro"""
  MNE

  """Montserrat"""
  MSR

  """Morocco"""
  MAR

  """Mozambique"""
  MOZ

  """Myanmar"""
  MMR

  """Namibia"""
  NAM

  """Nauru"""
  NRU

  """Nepal"""
  NPL

  """Netherlands"""
  NLD

  """New Caledonia"""
  NCL

  """New Zealand"""
  NZL

  """Nicaragua"""
  NIC

  """Niger"""
  NER

  """Nigeria"""
  NGA

  """Niue"""
  NIU

  """Norfolk Island"""
  NFK

  """Northern Mariana Islands"""
  MNP

  """Norway"""
  NOR

  """Oman"""
  OMN

  """Pakistan"""
  PAK

  """Palau"""
  PLW

  """Palestine"""
  PSE

  """Panama"""
  PAN

  """Papua New Guinea"""
  PNG

  """Paraguay"""
  PRY

  """Peru"""
  PER

  """Philippines"""
  PHL

  """Pitcairn"""
  PCN

  """Poland"""
  POL

  """Portugal"""
  PRT

  """Puerto Rico"""
  PRI

  """Qatar"""
  QAT

  """Réunion"""
  REU

  """Romania"""
  ROU

  """Russia"""
  RUS

  """Rwanda"""
  RWA

  """Saint Barthélemy"""
  BLM

  """Saint Helena, Ascension and Tristan da Cunha"""
  SHN

  """Saint Kitts and Nevis"""
  KNA

  """Saint Lucia"""
  LCA

  """Saint Martin (French part)"""
  MAF

  """Saint Pierre and Miquelon"""
  SPM

  """Saint Vincent and the Grenadines"""
  VCT

  """Samoa"""
  WSM

  """San Marino"""
  SMR

  """Sao Tome and Principe"""
  STP

  """Saudi Arabia"""
  SAU

  """Senegal"""
  SEN

  """Serbia"""
  SRB

  """Seychelles"""
  SYC

  """Sierra Leone"""
  SLE

  """Singapore"""
  SGP

  """Sint Maarten (Dutch part)"""
  SXM

  """Slovakia"""
  SVK

  """Slovenia"""
  SVN

  """Solomon Islands"""
  SLB

  """Somalia"""
  SOM

  """South Africa"""
  ZAF

  """South Georgia and the South Sandwich Islands"""
  SGS

  """South Sudan"""
  SSD

  """Spain"""
  ESP

  """Sri Lanka"""
  LKA

  """Sudan"""
  SDN

  """Suriname"""
  SUR

  """Svalbard and Jan Mayen"""
  SJM

  """Swaziland"""
  SWZ

  """Sweden"""
  SWE

  """Switzerland"""
  CHE

  """Syria"""
  SYR

  """Taiwan"""
  TWN

  """Tajikistan"""
  TJK

  """Tanzania"""
  TZA

  """Thailand"""
  THA

  """Timor-Leste"""
  TLS

  """Togo"""
  TGO

  """Tokelau"""
  TKL

  """Tonga"""
  TON

  """Trinidad and Tobago"""
  TTO

  """Tunisia"""
  TUN

  """Turkey"""
  TUR

  """Turkmenistan"""
  TKM

  """Turks and Caicos Islands"""
  TCA

  """Tuvalu"""
  TUV

  """Uganda"""
  UGA

  """Ukraine"""
  UKR

  """United Arab Emirates"""
  ARE

  """United Kingdom"""
  GBR

  """United States Minor Outlying Islands"""
  UMI

  """Uruguay"""
  URY

  """Uzbekistan"""
  UZB

  """Vanuatu"""
  VUT

  """Venezuela"""
  VEN

  """Viet Nam"""
  VNM

  """Virgin Islands (British)"""
  VGB

  """Virgin Islands (U.S.)"""
  VIR

  """Wallis and Futuna"""
  WLF

  """Western Sahara"""
  ESH

  """Yemen"""
  YEM

  """Zambia"""
  ZMB

  """Zimbabwe"""
  ZWE
}

"""Represents a mailing address for a user."""
input MailingAddressInput {
  """Line one of the street address."""
  lineOne: MailingAddressLineOne!

  """Line two of the street address."""
  lineTwo: MailingAddressLineTwo

  """The city."""
  city: MailingAddressCity!

  """The state (or other subdivision)."""
  stateOrProvince: MailingAddressSubdivisionEnum!

  """The postal code."""
  postalCode: PostalCode!

  """The country."""
  country: MailingAddressCountryEnum!
}

"""Represents a mailing address for a user opening custodial account."""
input MailingAddressBeneficiaryInput {
  """Line one of the street address."""
  lineOne: MailingAddressLineOne!

  """Line two of the street address."""
  lineTwo: MailingAddressLineTwo

  """The city."""
  city: MailingAddressCity!

  """The state (or other subdivision)."""
  stateOrProvince: MailingAddressSubdivisionForCustodialBeneficiariesEnum!

  """The postal code."""
  postalCode: PostalCode!

  """The country."""
  country: MailingAddressCountryEnum!
}

"""
A list of states (or other subdivisions) valid for a mailing address for custodial benficiaries.
"""
enum MailingAddressSubdivisionForCustodialBeneficiariesEnum {
  """Alabama"""
  AL

  """Alaska"""
  AK

  """Arizona"""
  AZ

  """Arkansas"""
  AR

  """California"""
  CA

  """Colorado"""
  CO

  """Connecticut"""
  CT

  """Delaware"""
  DE

  """Florida"""
  FL

  """Georgia"""
  GA

  """Hawaii"""
  HI

  """Idaho"""
  ID

  """Illinois"""
  IL

  """Indiana"""
  IN

  """Iowa"""
  IA

  """Kansas"""
  KS

  """Kentucky"""
  KY

  """Louisiana"""
  LA

  """Maine"""
  ME

  """Maryland"""
  MD

  """Massachusetts"""
  MA

  """Michigan"""
  MI

  """Minnesota"""
  MN

  """Mississippi"""
  MS

  """Missouri"""
  MO

  """Montana"""
  MT

  """Nebraska"""
  NE

  """Nevada"""
  NV

  """New Hampshire"""
  NH

  """New Jersey"""
  NJ

  """New Mexico"""
  NM

  """New York"""
  NY

  """North Carolina"""
  NC

  """North Dakota"""
  ND

  """Ohio"""
  OH

  """Oklahoma"""
  OK

  """Oregon"""
  OR

  """Pennsylvania"""
  PA

  """Rhode Island"""
  RI

  """South Carolina"""
  SC

  """South Dakota"""
  SD

  """Tennessee"""
  TN

  """Texas"""
  TX

  """Utah"""
  UT

  """Vermont"""
  VT

  """Virginia"""
  VA

  """Washington"""
  WA

  """West Virginia"""
  WV

  """Wisconsin"""
  WI

  """Wyoming"""
  WY

  """District of Columbia"""
  DC

  """American Samoa"""
  AS

  """Northern Mariana Islands"""
  MP

  """Puerto Rico"""
  PR

  """United States Minor Outlying Islands"""
  UM

  """Federated States of Micronesia"""
  FM

  """Marshall Islands"""
  MH

  """Palau"""
  PW
}

"""Represents an employment for a user."""
type Employment {
  """The status of employment."""
  status: EmploymentStatusEnum!

  """If employed, the employer."""
  employer: String

  """If employed, the occupation."""
  occupation: String

  """
  Boolean describing whether the user has selected an occupation/industry from the due diligence list.
  """
  hasSelectedOccupationFromList: Boolean

  """
  Boolean describing whether the user has selected an occupation status value from the due diligence list.
  """
  hasSelectedOccupationStatusFromList: Boolean
}

"""Represents an employment for a user."""
input EmploymentInput {
  """The status of employment."""
  status: EmploymentStatusEnum!

  """If employed, the employer."""
  employer: EmploymentDescription

  """If employed, the occupation."""
  occupation: EmploymentDescription
}

"""An employment status."""
enum EmploymentStatusEnum {
  """Employed"""
  EMPLOYED

  """Self-employed"""
  SELF_EMPLOYED

  """Retired"""
  RETIRED

  """Student"""
  STUDENT

  """Unemployed"""
  UNEMPLOYED
}

"""Disclosure of an affiliation with a stock exchange or FINRA."""
type ExchangeOrFinraAffiliationDisclosure {
  """
  Is the user is affiliated with, or an employee of a member firm of, a stock exchange or FINRA?
  """
  isAffiliated: Boolean!

  """If `isAffiliated` is `true`, the name of the affiliated firm."""
  firmName: String
}

"""Disclosure of an affiliation with a stock exchange or FINRA."""
input ExchangeOrFinraAffiliationDisclosureInput {
  """
  Is the user is affiliated with, or an employee of a member firm of, a stock exchange or FINRA?
  """
  isAffiliated: Boolean!

  """If `isAffiliated` is `true`, the name of the affiliated firm."""
  firmName: DisclosureDescription
}

"""Disclosure of the user being a control person of any public companies."""
type ControlPersonDisclosure {
  """
  Is the user a control person (director, officer, or 10% stock owner) of any publicly-traded companies?
  """
  isControlPerson: Boolean!

  """
  If `isControlPerson` is `true`, a list of stock ticker symbols for which the user is a control person.
  """
  companySymbols: [String]
}

"""Disclosure of the user being a control person of any public companies."""
input ControlPersonDisclosureInput {
  """
  Is the user a control person (director, officer, or 10% stock owner) of any publicly-traded companies?
  """
  isControlPerson: Boolean!

  """
  If `isControlPerson` is `true`, a list of stock ticker symbols for which the user is a control person.
  """
  companySymbols: [CompanySymbol]
}

"""Disclosure of the user having political exposure."""
type PoliticalExposureDisclosure {
  """Is the user politically exposed?"""
  isPoliticallyExposed: Boolean!

  """
  If `isPoliticallyExposed` is `true`, the name of the related political organization.
  """
  politicalOrganization: String

  """
  If `isPoliticallyExposed` is `true`, a list of the user's immediate family members, including former spouses.
  """
  immediateFamilyMembers: [String]
}

"""Disclosure of the user having political exposure."""
input PoliticalExposureDisclosureInput {
  """Is the user politically exposed?"""
  isPoliticallyExposed: Boolean!

  """
  If `isPoliticallyExposed` is `true`, the name of the related political organization.
  """
  politicalOrganization: DisclosureDescription

  """
  If `isPoliticallyExposed` is `true`, a list of the user's immediate family members, including former spouses.
  """
  immediateFamilyMembers: [DisclosureDescription]
}

"""Disclosure of the user having backup withholding."""
type BackupWithholding {
  """
  Is the user subject to backup withholding?
  A null value represents the user not being asked this question previously.
  """
  isSubjectToBackupWithholding: Boolean
}

"""Disclosure of the user having political exposure."""
input BackupWithholdingInput {
  """Is the user subject to backup withholding?"""
  isSubjectToBackupWithholding: Boolean!
}

"""
Represents suitability information about the ownership of an investment account.
"""
type SuitabilityProfile {
  """The combined account holders' yearly income in US dollars."""
  annualIncome: AnnualIncomeEnum

  """The account holders' yearly income in US dollars."""
  annualIncomeAmount: Int

  """The combined account holders' net worth in US dollars."""
  totalNetWorth: TotalNetWorthEnum

  """The account holders' net worth in US dollars."""
  totalNetWorthAmount: Int

  """The combined account holders' liquid net worth in US dollars."""
  liquidNetWorth: LiquidNetWorthEnum

  """The account holders' liquid net worth in US dollars."""
  liquidNetWorthAmount: Int

  """The investment experience of the account holder(s)."""
  investmentExperience: InvestmentExperienceEnum

  """The investment risk tolerance of the account holder(s)."""
  riskTolerance: RiskToleranceEnum

  """
  The accoult holders' time horizon before making withdrawls on their investment.
  """
  timeHorizon: TimeHorizonEnum

  """The account holders' liquidity needs for their money."""
  liquidityNeeds: LiquidityNeedsEnum
}

"""
Represents suitability information about the ownership of an investment account.
"""
input SuitabilityProfileInput {
  """The combined account holders' yearly income in US dollars."""
  annualIncome: AnnualIncomeEnum

  """The account holders' yearly income in US dollars."""
  annualIncomeAmount: Int

  """The combined account holders' net worth in US dollars."""
  totalNetWorth: TotalNetWorthEnum

  """The account holders' net worth in US dollars."""
  totalNetWorthAmount: Int

  """The combined account holders' liquid net worth in US dollars."""
  liquidNetWorth: LiquidNetWorthEnum

  """The account holders' liquid net worth in US dollars."""
  liquidNetWorthAmount: Int

  """The investment experience of the account holder(s)."""
  investmentExperience: InvestmentExperienceEnum

  """The investment risk tolerance of the account holder(s)."""
  riskTolerance: RiskToleranceEnum

  """
  The accoult holders' time horizon before making withdrawls on their investment.
  """
  timeHorizon: TimeHorizonEnum

  """The account holders' liquidity needs for their money."""
  liquidityNeeds: LiquidityNeedsEnum
}

"""An annual income range in US Dollars."""
enum AnnualIncomeEnum {
  """$0 to $25,000"""
  UP_TO_25000

  """$25,001 to $50,000"""
  UP_TO_50000

  """$50,001 to $100,000"""
  UP_TO_100000

  """$100,001 to $200,000"""
  UP_TO_200000

  """$200,001 to $300,000"""
  UP_TO_300000

  """$300,001 to $500,000"""
  UP_TO_500000

  """$500,001 to $1,200,000"""
  UP_TO_1200000

  """$1,200,001 or more"""
  UP_TO_INFINITY
}

"""A total net worth range."""
enum TotalNetWorthEnum {
  """$0 to $50,000"""
  UP_TO_50000

  """$50,001 to $100,000"""
  UP_TO_100000

  """$100,001 to $200,000"""
  UP_TO_200000

  """$200,001 to $500,000"""
  UP_TO_500000

  """$500,001 to $1,000,000"""
  UP_TO_1000000

  """$1,000,001 to $5,000,000"""
  UP_TO_5000000

  """$5,000,001 or more"""
  UP_TO_INFINITY
}

"""A liquid net worth range."""
enum LiquidNetWorthEnum {
  """$0 to $50,000"""
  UP_TO_50000

  """$50,001 to $100,000"""
  UP_TO_100000

  """$100,001 to $200,000"""
  UP_TO_200000

  """$200,001 to $500,000"""
  UP_TO_500000

  """$500,001 to $1,000,000"""
  UP_TO_1000000

  """$1,000,001 to $5,000,000"""
  UP_TO_5000000

  """$5,000,001 or more"""
  UP_TO_INFINITY
}

"""A level of investment experience."""
enum InvestmentExperienceEnum {
  """None"""
  NONE

  """Limited"""
  LIMITED

  """Good"""
  GOOD

  """Extensive"""
  EXTENSIVE
}

"""A level of risk tolerance."""
enum RiskToleranceEnum {
  """Low"""
  LOW

  """Medium"""
  MEDIUM

  """High"""
  HIGH
}

"""A time horizon."""
enum TimeHorizonEnum {
  """Short (Less than 3 years)"""
  SHORT

  """Average (4 to 7 years)"""
  AVERAGE

  """Long (8 years or more)"""
  LONGEST
}

"""A level of liquidity need."""
enum LiquidityNeedsEnum {
  """Very Important"""
  VERY_IMPORTANT

  """Somewhat Important"""
  SOMEWHAT_IMPORTANT

  """Not Important"""
  NOT_IMPORTANT
}

"""Information about at the user's trusted account."""
input TrustedContactInput {
  """The first (given) name of the trusted contact."""
  firstName: String!

  """The last (family) name of the trusted contact."""
  lastName: String!

  """The phone number of the trusted contact."""
  phoneNumber: String

  """The email address of the trusted contact."""
  email: String
}

"""Information about an account beneficiary."""
type Beneficiary {
  """The first (given) name of the beneficiary."""
  firstName: String!

  """The last (family) name of the beneficiary."""
  lastName: String!

  """The suffix of the beneficiary's name."""
  suffix: NameSuffixEnum

  """The beneficiary's date of birth, in the format of `YYYY-MM-DD`."""
  dateOfBirth: String!

  """The home address of the beneficiary."""
  address: MailingAddress!

  """The relationship of the beneficiary to the account holder."""
  relationship: String!

  """
  The percentage account ownership assigned to the beneficiary. The sums of the
  primary and contingent beneficiary groups must each equal 100%.
  """
  sharePercentage: Int!

  """
  True if this is a primary beneficiary. Otherwise, the beneficiary is
  contingent. Primary beneficaries have seniority over contingent beneficiaries.
  """
  isPrimary: Boolean!
}

"""A new account beneficiary and their social security number."""
input NewBeneficiaryInput {
  """A beneficiary."""
  beneficiary: BeneficiaryInput!

  """The social security number of the beneficiary."""
  ssn: SocialSecurityNumber!
}

"""Information about an account beneficiary."""
input BeneficiaryInput {
  """The first (given) name of the beneficiary."""
  firstName: FirstName!

  """The last (family) name of the beneficiary."""
  lastName: LastName!

  """The suffix of the beneficiary's name."""
  suffix: NameSuffixEnum

  """The beneficiary's date of birth, in the format of `YYYY-MM-DD`."""
  dateOfBirth: String!

  """The home address of the beneficiary."""
  address: MailingAddressInput!

  """The relationship of the beneficiary to the account holder."""
  relationship: String!

  """
  The percentage account ownership assigned to the beneficiary. The sums of the
  primary and contingent beneficiary groups must each equal 100%.
  """
  sharePercentage: Int!

  """
  True if this is a primary beneficiary. Otherwise, the beneficiary is
  contingent. Primary beneficaries have seniority over contingent beneficiaries.
  """
  isPrimary: Boolean!
}

"""Information about the user's trusted contact."""
type TrustedContact {
  """The first (given) name of the trusted contact."""
  firstName: String!

  """The last (family) name of the trusted contact."""
  lastName: String!

  """The email address of the trusted contact."""
  email: String

  """The phone number of the trusted contact."""
  phoneNumber: String
}

"""Information about referrals status for a specific user."""
type Referrals implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  True when the user is eligible to participate in the referrals program.
  """
  isEligible: Boolean!

  """True when the user is participating in the referrals program."""
  isParticipating: Boolean!

  """
  Information about the user's referrer status. Value is null when the user is
  not currently participating in the referrals program.
  """
  referrerStatus: ReferrerStatus

  """The dollar amount that the referring user receives from a referral."""
  getAmount: Float!

  """The dollar amount that the referred user received from a referral."""
  giveAmount: Float!

  """The title for the referrals screen."""
  referralsTitle: String!

  """The description for the referrals screen."""
  referralsDescription: String!

  """A link to referrals terms and conditions."""
  referralsTermsLink: AppLink

  """Info card to link to the referrals page"""
  referralsCard: AppInformationalMessageCard

  """
  Referrals navigation item for the side rail. If null, do not display anything.
  """
  referralsSideNavigationItem: AppNavigationItem

  """
  Referrals navigation item for the top nav. If null, do not display anything.
  """
  referralsTopNavigationItem: AppNavigationItem
}

"""Information about referrals program participation."""
type ReferrerStatus {
  """The referrer code. Value is null when temporarily unavailable."""
  referrerCode: String

  """
  The custom share URL for this referrer. Value is null when temporarily
  unavailable.
  """
  shareUrl: String

  """A custom share message, including the share URL."""
  shareMessage: String

  """
  The number of referrals that have registered, but not yet completed the
  referral goal within the required time frame.
  """
  incompleteReferralCount: Int!

  """
  The number of referrals that have registered and completed the referral goal.
  """
  completeReferralCount: Int!
}

type ReferralOffer implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The dollar amount that a referring user will receive from a referral."""
  getAmount: Float!

  """The dollar amount that a referred user will receive from a referral."""
  giveAmount: Float!

  """The title for the web referral signup screen screen."""
  referralsTitle: String!

  """The illustration for the web referral signup screen screen."""
  referralsIllustration: AppImage

  """The disclosure copy for the web referral signup screen screen."""
  referralsDisclosureContent: [RichTextContent!]
}

type Research implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """An optional Plus promotional message."""
  plusPromotion: PlusPromotionalMessage @deprecated(reason: "Use `plusPromotionForNav` or `plusPromotionForScreen` instead.")

  """An optional Plus promotional message for navigation placement."""
  plusPromotionForNav: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No plus data should be rendered in the UI")

  """An optional Plus promotional message for screen placement."""
  plusPromotionForScreen: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No additional plus data should be rendered in the UI.")
}

type Quote implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The date and time that the quote was retrieved."""
  asOfTime: String!

  """The date and time of the last trade."""
  lastTradeTime: String

  """
  The date and time that the quote was retrieved formatted to the user's timezone (MM DD, HH:MM <timezeone abbreviation>).
  """
  localAsOfTime: String!

  """
  The date and time of the last trade formatted to the user's timezone (MM DD, HH:MM <timezeone abbreviation>).
  """
  localLastTradeTime: String

  """
  The price at which the last trade of the security occurred, as of the quote's
  time.
  """
  lastPrice: Float

  """The high price."""
  highPrice: Float

  """The low price."""
  lowPrice: Float

  """The range for the day (high - low)."""
  priceRange: Float

  """The open price."""
  openPrice: Float

  """
  The price of the security at close of market on the previous trading day.
  """
  previousClosePrice: Float

  """The difference between the last price and the previous close price."""
  changeFromPreviousClosePrice: Float

  """
  The percentage difference between the last price and the previous close price,
  expressed as a percentage.
  """
  percentChangeFromPreviousClosePrice: Float

  """The number of trades during a session."""
  tradeVolume: Float

  """The number of shares traded during a session."""
  shareVolume: Float

  """The volume weighted average price."""
  vwap: Float

  """
  True if trading in the security is halted as of the quote's time; false
  otherwise. Value is null when unknown.
  """
  isTradingHalted: Boolean
}

enum IssueTypeEnum {
  """American Depository Receipt"""
  AMERICAN_DEPOSITORY_RECEIPT

  """Real Estate Investment Trust"""
  REAL_ESTATE_INVESTMENT_TRUST

  """Closed-End Fund"""
  CLOSED_END_FUND

  """Secondary Issue"""
  SECONDARY_ISSUE

  """Limited Partnership"""
  LIMITED_PARTNERSHIP

  """Common Stock"""
  COMMON_STOCK

  """Exchange-Traded Fund"""
  EXCHANGE_TRADED_FUND

  """Other"""
  OTHER
}

type SecurityProfile {
  """The issue type."""
  issueType: IssueTypeEnum

  """The sector that the security belongs to."""
  sector: String

  """The industry that the security belongs to."""
  industry: String

  """A description of the company, if available."""
  description: String

  """A long description of the company, if available."""
  longDescription: String

  """The name of the CEO, if available."""
  ceo: String

  """The number of employees, if available."""
  numberOfEmployees: Int

  """A website URL for the company, if available."""
  website: String

  """The icon to display for websites"""
  websiteIcon: AppImage!

  """
  A URL to a possible logo for the security. Value is null when no logo exists. Note that even when a value is returned, the URL may still respond with a 404 if no logo is available.
  """
  logoUrl(size: Int = 128): String

  """The location of the company headquarters."""
  headquarters: String

  """The url for the security information on the SEC's website."""
  securitySecUrl: AppLink

  """The icon to display for the SEC website."""
  secIcon: AppImage!
}

type PriceChange implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The date of the historical reference point."""
  date: String! @deprecated(reason: "No longer supported by new upstream data source. Will be removed.")

  """
  The number of days between the historical reference point and the date of the current price data.
  """
  daysAgo: Int! @deprecated(reason: "No longer supported by new upstream data source. Will be removed.")

  """
  The closing price on the reference point date. Value is rounded to cents for output.
  """
  previousPrice: Float! @deprecated(reason: "No longer supported by new upstream data source. Will be removed.")

  """
  The current price used for the price change calculation. Value is rounded to cents for output.
  """
  currentPrice: Float! @deprecated(reason: "No longer supported by new upstream data source. Will be removed.")

  """
  The difference between the current price and the previous price. Value is rounded to cents for output.
  """
  change: Float! @deprecated(reason: "No longer supported by new upstream data source. Will be removed.")

  """
  The percent change from the previous price to the current price. Value is rounded to two decimal places for output.
  """
  percentChange: Float!

  """
  The percent change, annualized. Value is rounded to two decimal places for output.
  """
  percentChangeAnnualized: Float!
}

"""A dividend type."""
enum DividendTypeEnum {
  """Dividend income"""
  DIVIDEND_INCOME

  """Interest income"""
  INTEREST_INCOME

  """Stock dividend"""
  STOCK_DIVIDEND

  """Other"""
  OTHER
}

type SliceableShowcase {
  """A list of showcased equities."""
  equities: [Equity!]!

  """A list of showcased funds."""
  funds: [Fund!]!

  """A list of showcased system pies."""
  systemPies: [SystemPie!]!
}

type Spend implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The user is eligible to use Spend Checking."""
  isEligible: Boolean

  """If true, the user is eligible to send checks."""
  isEligibleForSendCheck: Boolean

  """If true, Send Check is enabled for the current user."""
  isSendCheckEnabled: Boolean

  """
  If true, the user meets the eligibility criteria to open more than one Spend account.
  """
  isMultipleAccountsEligible: Boolean

  """
  If true, the ability to open more than one Spend account is enabled for the user.
  """
  isMultipleAccountsEnabled: Boolean

  """
  If true, the Credit Card tab should be enabled and visible for the current user.
  """
  isCreditCardTabAvailable: Boolean

  """The user is eligible to select a Spend Checking Debit Card design."""
  isEligibleForCardSelection: Boolean

  """The `Viewer.profile` is created."""
  isProfileCreated: Boolean

  """The primary marketing screen content for the Spend overview page."""
  spendPrimaryMarketingScreen(
    """
    Optional value to determine if the user is accessing the page from a deeplink or internal routing.
    """
    primaryMarketingScreenView: SpendPrimaryMarketingIndicatorEnum
  ): SpendPrimaryMarketingScreen

  """The new marketing screen content for the Spend overview page."""
  spendMarketingScreen: SpendMarketingScreen

  """
  The `Viewer.profile` is accepted and ready to be a Spend Checking identity.
  """
  isProfileReady: Boolean

  """
  A `Spend.spendIdentity` has been created and verfication has been attempted.
  """
  isIdentityVerificationSubmitted: Boolean

  """True if the Spend overview changes are enabled for the user."""
  isSpendOverviewEnabled: Boolean

  """
  A manual review of the `Spend.spendIdentity` has been completed, if it was
  required. Same as `SpendIdentity.status.isVerificationReviewed`.
  """
  isIdentityVerificationReviewed: Boolean

  """
  The `Spend.spendIdentity` is verified. Same as
  `SpendIdentity.status.isVerified`.
  """
  isIdentityVerified: Boolean

  """
  The user has no currently-pending transfers that prevent the internal
  transfers linkage process to proceed.
  """
  isReadyForInternalTransfersLinkage: Boolean

  """
  The entire Spend Checking enrollment process is complete, and Spend Checking features are ready
  to use.
  """
  isSpendEnrollmentComplete: Boolean

  """The user currently has an active primary Spend Checking account."""
  hasActiveSpendAccount: Boolean

  """The user currently has an active Spend Checking debit card."""
  hasActiveDebitCard: Boolean

  """The user currently has a funded Invest account."""
  hasFundedInvestAccount: Boolean

  """A `Spend.externalAccount` has been created."""
  isExternalAccountInitiated: Boolean

  """A `Spend.primaryDebitCard` has been created."""
  isPrimaryDebitCardInitiated: Boolean

  """The user agreements necessary to use Spend Checking."""
  spendAgreements: SpendAgreements @deprecated(reason: "Sunset Checking.")

  """
  The Q2 customer due diligence questions needed to complete Spend Checking enrollment.
  """
  spendDueDiligenceQuestions: SpendDueDiligenceQuestions @deprecated(reason: "Sunset Checking.")

  """
  The user identity which must be verified and accepted to use Spend Checking.
  """
  spendIdentity: SpendIdentity

  """The total account balance of all spend checking accounts."""
  netBalance: Float

  """A user's Spend Checking account."""
  spendAccount(accountId: ID): SpendAccount

  """
  All the current Spend accounts for the user, if the have a primary debit card account it will be returned first.
  """
  currentSpendAccounts: [SpendAccount]

  """
  True if the user is able to add any additional Spend checking accounts.
  """
  isAbleToAddCheckingAccounts: Boolean

  """
  True if the user has any additional accounts in excess of their primary Spend account, false otherwise.
  """
  hasAdditionalCheckingAccounts: Boolean

  """
  An optional external bank account, owned by the user, to be used for transfers
  to Spend Checking accounts.
  """
  externalAccount: SpendExternalAccount

  """
  The marketing perks for the request Spend Debit card enrollment screen.
  """
  debitCardMarketingPerks: [TextWithTooltip]

  """Information about available debit cards before one is requested."""
  availableDebitCards: SpendAvailableDebitCards @deprecated(reason: "Use `debitCardCta` and `availableDebitCardDesigns` instead.")

  """A list of currently-available debit card designs."""
  availableDebitCardDesigns: [SpendDebitCardDesign!]

  """
  Spend Checking debit card CTA assets to be displayed on Spend Checking screens.
  """
  debitCardCta: SpendDebitCardCta

  """
  Spend Checking debit card assets to be displayed on Spend Checking marketing screens.
  """
  debitCardMarketing: SpendDebitCardDesign

  """The primary Spend Checking debit card, if one has been requested."""
  primaryDebitCard: SpendDebitCard

  """The last primary debit card, if there is one."""
  lastPrimaryDebitCard: SpendDebitCard

  """A log of activity related to Spend Checking features."""
  activity: SpendActivity

  """
  A boolean indicating whether the user has checking activity (i.e. is funded).
  """
  hasFundedCheckingAccount: Boolean

  """
  A list of Plaid external accounts that are available for use as a linked Spend
  external account.
  """
  availableExternalAccounts(first: Int, after: String): ExternalAccountConnection

  """True if there is at least one available external account."""
  hasAvailableExternalAccounts: Boolean

  """True if there is a linked external account for the user."""
  hasConnectedExternalAccount: Boolean

  """
  A list of Invest external bank accounts which are currently eligible to be
  migrated to become a Spend Checking external account.
  """
  migratableInvestExternalAccounts(first: Int, after: String): MigratableInvestExternalAccountConnection

  """True if there is at least one migratable Invest external account."""
  hasMigratableInvestExternalAccounts: Boolean

  """An optional Plus promotional message."""
  plusPromotion: PlusPromotionalMessage @deprecated(reason: "Use `plusPromotionForNav` or `plusPromotionForScreen` instead.")

  """An optional Plus promotional message for navigation placement."""
  plusPromotionForNav: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No plus data should be rendered in the UI")

  """An optional Plus promotional message for screen placement."""
  plusPromotionForScreen: PlusPromotionalMessage @deprecated(reason: "M1 Plus has been sunsetted. No additional plus data should be rendered in the UI.")

  """An optional Plus promotional message for the marketing screen."""
  plusPromotionForMarketingMain: PlusPromotionalMessage

  """An optional Plus promotional message for a marketing screen detail."""
  plusPromotionForMarketingDetail1: PlusPromotionalMessage

  """An optional Plus promotional message for a marketing screen detail."""
  plusPromotionForMarketingDetail2: PlusPromotionalMessage

  """An optional Plus promotional message for a marketing screen detail."""
  plusPromotionForMarketingDetail3: PlusPromotionalMessage

  """
  An optional Plus promotional message for the request debit card screen.
  """
  plusPromotionForRequestCardScreen: PlusPromotionalMessage

  """A link to the direct deposit enrollment form"""
  directDepositVoidedCheckUrl: String

  """
  Returns information that pertains to the Spend Checking Move Money screen.
  """
  moveMoney: SpendMoveMoney! @deprecated(reason: "Use `Transfers.moveMoney(type: SPEND)` instead")

  """Returns information that pertains to the send check screen."""
  sendCheck: SendCheck @deprecated(reason: "Sunset Checking.")
}

type SpendAgreements implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The Spend Checking e-sign agreement. Must be presented separately to customers.
  """
  eSignAgreement: SpendESignAgreement!

  """
  The latest bundle of agreements that must be accepted to use Spend Checking.
  """
  latestAgreements: AgreementBundle!
}

type SpendDueDiligenceQuestions implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The list of customer due diligence questions."""
  questions: [DueDiligenceQuestion!]! @deprecated(reason: "Sunset Checking.")
}

type DueDiligenceQuestion {
  """The question ID for the Spend Checking due diligence question."""
  questionId: Float! @deprecated(reason: "Sunset Checking.")

  """
  The question analytics event for the Spend Checking due diligence question.
  """
  questionAnalyticsEvent: String @deprecated(reason: "Sunset Checking.")

  """The question name for the Spend Checking due diligence question."""
  questionName: String @deprecated(reason: "Sunset Checking.")

  """
  The question description for the Spend Checking due diligence question.
  """
  questionDescription: String! @deprecated(reason: "Sunset Checking.")

  """
  The required answer type for the Spend Checking due diligence question.
  """
  answerType: SpendDueDiligenceAnswerTypeEnum! @deprecated(reason: "Sunset Checking.")

  """The available choices for the Spend Checking due diligence question."""
  choices: [DueDiligenceQuestionChoice!]! @deprecated(reason: "Sunset Checking.")
}

type DueDiligenceQuestionChoice {
  """The ID for this Spend Checking due diligence question choice."""
  choiceId: Float @deprecated(reason: "Sunset Checking.")

  """The name for this Spend Checking due diligence question choice."""
  choiceName: String @deprecated(reason: "Sunset Checking.")

  """The description for this Spend Checking due diligence question choice."""
  choiceDescription: String @deprecated(reason: "Sunset Checking.")

  """
  Value denoting whether or not the user should skip the following question.
  """
  shouldSkipNextQuestion: Boolean @deprecated(reason: "Sunset Checking.")
}

enum SpendDueDiligenceAnswerTypeEnum {
  """Single select dropdown"""
  SINGLE_SELECT_DROPDOWN @deprecated(reason: "Sunset Checking.")

  """Single select radial"""
  SINGLE_SELECT_RADIAL @deprecated(reason: "Sunset Checking.")

  """Multi select"""
  MULTI_SELECT @deprecated(reason: "Sunset Checking.")

  """Text"""
  TEXT @deprecated(reason: "Sunset Checking.")
}

input DueDiligenceAnswer {
  """The ID for this Spend Checking due diligence question."""
  questionId: Float

  """
  The text answer, if applicable, for this Spend Checking due diligence question.
  """
  questionAnswer: String

  """Selected choices for this Spend Checking due diligence question."""
  selectedChoices: [CustomerDueDiligenceAnswerChoice!]
}

type TextWithTooltip implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The text for this text and tooltip item."""
  text: String!

  """The optional tooltip content for this text and tooltip item."""
  tooltipContent: String
}

type SpendPrimaryMarketingScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The title for the primary Spend overview marketing screen."""
  title: String

  """The title for the primary Spend overview marketing screen."""
  subtitle: String

  """
  The small pair of Spend overview balance labels to be displayed on the primary marketing screen on mobile with credit balance info if applicable
  """
  creditBalanceLabel: [BalanceOverviewLabel]

  """
  The large Spend overview balance label to be displayed on the primary marketing screen on mobile with checking and savings balance info if applicable
  """
  checkingBalanceLabel: BalanceOverviewLabel

  """
  An array of account cards for the user's Spend checking accounts, if applicable.
  """
  checkingAccounts: [AccountCard]

  """
  The account card for the user's Spend credit card account, if applicable.
  """
  creditCardAccount: AccountCard

  """
  An array of account cards for the user's Savings accounts, if applicable
  """
  savingsAccounts: [AccountCard]

  """
  The Plus promotional message for the primary Spend overview marketing screen.
  """
  plusCard: PlusPromotionalMessage

  """
  The tooltip text for the Spend primary marketing screen for maximum account creation, if applicable.
  """
  addAccountTooltipText: [String]

  """
  An array of the content cards for the primary Spend overview marketing screen.
  """
  marketingCards: [MarketingCard]

  """
  Additional AppLinks to be displayed at the bottom of the primary Spend overview marketing screen.
  """
  additionalLinks: [AppLink]

  """
  Additional disclaimer text to be displayed at the bottom of the primary Spend overview marketing screen.
  """
  disclaimerText: [String]
}

type BalanceOverviewLabel {
  """The value for the balance overview label."""
  primaryBalanceValue: String

  """The description for the balance overview label."""
  primaryBalanceLabel: String

  """The optional toolptip for the balance overview label."""
  balanceToolTip: [String]
}

type AccountCard {
  """
  The account ID for the associated Spend checking or credit card account.
  """
  accountId: String

  """The title for the Spend account card."""
  title: String

  """The balance to be displayed for the Spend account card."""
  balance: Float

  """The subtitle for the Spend account card."""
  subtitle: String

  """The optional AppPill for the Spend account card."""
  pill: AppPill
}

enum SpendPrimaryMarketingIndicatorEnum {
  """Credit Card"""
  CREDIT

  """Checking"""
  CHECKING

  """HYSA"""
  SAVINGS
}

type MarketingCard {
  """
  Enumerated value for account types (ie: INVEST | LENDING | SAVINGS | CHECKING | CREDIT)
  """
  accountType: SpendPrimaryMarketingIndicatorEnum!

  """The main title for a marketing screen card."""
  title: String

  """The optional title tooltip for a marketing screen card."""
  titleTooltip: String

  """The optional card icon for a marketing screen card."""
  cardIcon: AppImage

  """
  An analytics event for following the step into the personal loan application flow.
  """
  analyticsEvent: AppAnalyticsEvent

  """An array of perks relating to a marketing screen card."""
  marketingPerks: [MarketingPerk]

  """The optional card image for a marketing screen card."""
  cardImage: AppImage

  """An array of links for a marketing screen card."""
  marketingLinks: [AppLink]

  """The CTA destination deep link for a marketing screen card."""
  ctaButtonDestination: AppLink
}

type MarketingPerk {
  """The icon for a marketing screen perk."""
  icon: AppImage

  """The title on a marketing screen perk."""
  title: String

  """The subtitle on a marketing screen perk."""
  subtitle: String

  """The optional tooltip on a marketing screen perk."""
  tooltip: String
}

input CustomerDueDiligenceAnswerChoice {
  """A specific choice for this Spend Checking due diligence question."""
  choiceId: Float!
}

type SpendESignAgreement {
  """Content of the agreement in HTML format."""
  contentHtml: String!
}

type SpendIdentity implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The status of the identity."""
  status: SpendIdentityStatus!
}

type SpendIdentityStatus {
  """The identity status code."""
  code: SpendIdentityStatusCodeEnum!

  """Verification of the identity has been attempted."""
  isVerificationSubmitted: Boolean!

  """
  A manual review of the identity has been completed, if it was necessary.
  """
  isVerificationReviewed: Boolean!

  """The identity is verified."""
  isVerified: Boolean!

  """The identity is currently locked."""
  isLocked: Boolean!
}

enum SpendIdentityStatusCodeEnum {
  """Initiated"""
  INITIATED

  """Manual review"""
  MANUAL_REVIEW

  """Verified"""
  VERIFIED

  """Denied"""
  DENIED

  """Expired"""
  EXPIRED

  """Archived"""
  ARCHIVED

  """Deceased"""
  DECEASED
}

type SpendAccount implements Node & ListableAccount & TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The account category."""
  accountCategory: AccountCategoryEnum!

  """The name of the account."""
  name: String!

  """A descriptor for the account, for help identifying in a list."""
  descriptor: String

  """The time when the account was created."""
  createdDate: String!

  """The routing number for the account."""
  routingNumber(masked: Boolean = true): String

  """The account number for the account."""
  accountNumber(masked: Boolean = true): String

  """Information about the status of the account."""
  status: SpendAccountStatus!

  """
  If applicable, a checklist of steps for the user to complete for product onboarding.
  """
  setupChecklist: SetupChecklist

  """Information about the balance of the account."""
  balance: SpendAccountBalance

  """Information about the rates associated with the account."""
  rates: SpendAccountRates

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String

  """A link to report any issues for the Spend Checking user."""
  accountResolutionCta: AppLink

  """
  True, if the current Spend account is the primary checking account which has the user's debit card if applicable, false otherwise.
  """
  isPrimarySpendAccount: Boolean

  """
  The Spend promotional message for Credit Card to be displayed on the checking screen.
  """
  creditMarketingCard: SpendPromotionalMessage
}

"""Information about a Borrow account."""
type SpendPromotionalMessage implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Title for the Spend promotional message."""
  title: String

  """Body text for the Spend promotional message."""
  body: String

  """Link for the Spend promotional message."""
  link: AppLink

  """Optional tooltip array for the Spend promotional message."""
  tooltip: [String]
}

"""Information about a Borrow account."""
type PhysicalCheck implements Node & TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The account category."""
  accountCategory: AccountCategoryEnum!

  """The name of the account."""
  name: String!

  """A descriptor for the account, for help identifying in a list."""
  descriptor: String

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String
}

"""The status of a Spend Checking account."""
type SpendAccountStatus {
  """The status code."""
  code: SpendAccountStatusCodeEnum!

  """True if the account is currently open or pending open."""
  isActive: Boolean!

  """True if the account is currently open and ready to be used."""
  isOpen: Boolean!

  """A friendly description of the account status."""
  description: String!
}

"""A Spend Checking account status code."""
enum SpendAccountStatusCodeEnum {
  """Pending open"""
  PENDING_OPEN

  """Open"""
  OPEN

  """Pending closed"""
  PENDING_CLOSED

  """Closed"""
  CLOSED
}

"""Information about the balance of a Spend Checking account."""
type SpendAccountBalance {
  """The sum of all settled transactions. Includes funds that have holds."""
  current: Float!

  """The settled amount available for withdrawal. Omits funds with holds."""
  available: Float!

  """
  The settled amount subject to temporary holds. This is the current balance
  minus the available balance. It cannot be negative.
  """
  holds: Float!

  """True if the current balance contains funds with holds."""
  hasHolds: Boolean!

  """The sum of all pending deposit transactions."""
  pending: Float!

  """True if the account currently has any value."""
  hasValue: Boolean!
}

"""Information about the rates associated with a Spend Checking account."""
type SpendAccountRates {
  """The current interest rate."""
  interestRatePercent: Float

  """The current cash back rate."""
  cashBackRatePercent: Float
}

type SpendExternalAccount implements Node & TransferParticipant {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The name of the account."""
  name: String!

  """The status of the external account."""
  status: SpendExternalAccountStatus!

  """The account type."""
  accountType: SpendExternalAccountTypeEnum!

  """The routing number."""
  routingNumber(masked: Boolean = true): String

  """The account number."""
  accountNumber(masked: Boolean = true): String

  """The transfer participant type categorization."""
  transferParticipantType: TransferParticipantTypeEnum!

  """The name to display for this transfer participant."""
  transferParticipantName: String!

  """An optional description of this transfer participant."""
  transferParticipantDescription: String

  """
  True when there are currently one or more pending transfer instances with this
  account as the source or destination.
  """
  hasPendingTransferInstances: Boolean

  """
  A list of pending transfer instances currently associated with this account.
  Sorted by create date ascending.
  """
  pendingTransferInstances: [TransferInstance]

  """A summary of the pending transfers, if there are any."""
  pendingTransferInstanceSummary: String
}

type SpendExternalAccountStatus {
  """The status code."""
  code: SpendExternalAccountStatusCodeEnum!

  """The account is awaiting verification."""
  isAwaitingVerification: Boolean!

  """Verification is currently blocked."""
  isBlockedVerification: Boolean!

  """The account has been verified and is ready to be used for transfers."""
  isVerified: Boolean!

  """The account is currently locked."""
  isLocked: Boolean!
}

enum SpendExternalAccountStatusCodeEnum {
  """The account is awaiting verification."""
  UNVERIFIED

  """
  The maximum number of verification attempts has been exceeded and verification
  cannot be completed.
  """
  VERIFY_LOCKED

  """The account has been verified and is ready to be used for transfers."""
  VERIFIED

  """The account has been denied and verification is not possible."""
  DENIED

  """
  The verification time limit has been exceeded and verification cannot be
  completed.
  """
  EXPIRED

  """The account is archived."""
  ARCHIVED
}

enum SpendExternalAccountTypeEnum {
  """Checking"""
  CHECKING

  """Savings"""
  SAVINGS

  """Prepaid"""
  PREPAID
}

"""Information about available Spend Checking debit cards."""
type SpendAvailableDebitCards implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The Spend Checking debit card design that should be displayed as a preview.
  """
  previewDesignType: SpendDebitCardDesignTypeEnum @deprecated(reason: "Use `debitCardMarketing or debitCardCta` instead.")
}

"""A Spend Checking debit card."""
type SpendDebitCard implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The status of the card."""
  status: SpendDebitCardStatus!

  """The content and actions for the Spend debit manage card screen."""
  manageCard: ManageSpendCard

  """The full name of the cardholder, as it is printed on the card."""
  fullName: String!

  """The Primary Account Number (PAN) printed on the card, masked."""
  panMasked: String!

  """The card expiration month."""
  expireMonth: Int!

  """The card expiration year."""
  expireYear: Int!

  """The visual design type of the card."""
  designType: SpendDebitCardDesignTypeEnum @deprecated(reason: "Use `design` instead.")

  """Limits pertaining to card usage."""
  limits: SpendDebitCardLimits

  """A description of this card's design."""
  design: SpendDebitCardDesign
}

"""Spend Checking debit manage card screen content and actions."""
type ManageSpendCard implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Link directly to additional flow for managing a Spend debit card."""
  manageCardAssistanceLink: AppLink

  """All available card actions for the user's current Spend debit card."""
  cardActions: [ManageSpendCardAction]
}

type ManageSpendCardAction {
  """The title for this manage card action."""
  title: String

  """The subtitle for this manage card action."""
  subtitle: String

  """
  The text and destination to route the user for this manage card action.
  """
  destination: AppLink
}

"""A Spend Checking debit card design description."""
type SpendDebitCardDesign implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A styling hint for CTA copy."""
  contrastHint: SpendDebitCardContrastHintEnum!

  """Unique key to identify the card design type."""
  designTypeKey: String!

  """A short description for the card design."""
  description: String

  """The name of the card design."""
  name: String!

  """
  Information about whether the card is available to the user as an option.
  """
  isAvailableToUser: Boolean

  """Image of an angled debit card"""
  angledDebitCard: AppImage

  """Image of an flat debit card"""
  flatDebitCard: AppImage

  """Image of an flat debit card without logo"""
  flatDebitCardWithoutLogo: AppImage

  """Image of a thumbnail debit card"""
  thumbnail: AppImage
}

"""A Spend Checking debit card CTA design description."""
type SpendDebitCardCta implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Spend Checking Debit Card description for CTA style card."""
  design: SpendDebitCardDesign

  """
  Information about whether the user has an active Spend Checking debit card. Logic matches `Spend.primaryDebitCard?.status.isActive`.
  """
  isCardInitiated: Boolean

  """
  Information about whether the user's Spend Checking debit card is awaiting verification.
  """
  isCardAwaitingVerification: Boolean
}

"""Spend Checking debit card CTA copy styling hint."""
enum SpendDebitCardContrastHintEnum {
  STANDARD
  INVERSE
}

"""The status of a Spend Checking debit card."""
type SpendDebitCardStatus {
  """The status code."""
  code: SpendDebitCardStatusCodeEnum!

  """True if the card is ready for use or going to be ready for use."""
  isActive: Boolean!

  """
  The card has been requested but is awaiting manufacturing and shipping.
  """
  isAwaitingIssuance: Boolean!

  """The card has reached the expiration date and can no longer be used."""
  isExpired: Boolean!

  """The card has been shipped and is awaiting verification."""
  isAwaitingVerification: Boolean!

  """The card is verified and ready to use."""
  isVerified: Boolean!

  """The card is currently locked (either for the system or for the user)."""
  isLocked: Boolean!

  """The specific lock status."""
  lockStatusCode: SpendDebitCardLockStatusCodeEnum!

  """When the card is locked, the reason for the lock."""
  lockReasonCode: SpendDebitCardLockReasonCodeEnum
}

"""The Spend Checking debit card status code."""
enum SpendDebitCardStatusCodeEnum {
  """
  The card has been initiated, but the request for manufacturing has not yet
  been sent.
  """
  INITIATED

  """
  The request for card manufacturing has been sent, but the card has not yet
  been shipped.
  """
  PENDING

  """The card has been shipped, and is awaiting verification."""
  PENDING_VERIFICATION

  """The card has been verified."""
  VERIFIED

  """The card request has been denied."""
  DENIED

  """
  The request for manufacturing was sent, and it may have been shipped, but
  the card was never verified within the permitted timeframe.
  """
  EXPIRED

  """The card has been archived."""
  ARCHIVED

  """A replacement card has been requested and sent to manufacturing."""
  REISSUED

  """The replacement card has been shipped and is awaiting verification."""
  REISSUED_PENDING_VERIFICATION

  """The card has been hotlisted and can never be used again."""
  HOTLISTED
}

"""The lock status of a Spend Checking debit card."""
enum SpendDebitCardLockStatusCodeEnum {
  """The card is unlocked."""
  UNLOCKED

  """The card is locked and the user can unlock it."""
  CUSTOMER_LOCKED

  """The card is locked and the user cannot unlock it."""
  SYSTEM_LOCKED
}

"""The reason for a lock on a Spend Checking debit card."""
enum SpendDebitCardLockReasonCodeEnum {
  """Unknown"""
  UNKNOWN

  """Stolen"""
  STOLEN

  """Lost"""
  LOST

  """Suspected fraud"""
  SUSPECTED_FRAUD

  """Physical damage"""
  PHYSICAL_DAMAGE

  """Administrative"""
  ADMINISTRATIVE

  """Temporary"""
  TEMPORARY

  """PIN retries exceeded"""
  PIN_RETRIES_EXCEEDED
}

"""The visual design type of a Spend Checking debit card."""
enum SpendDebitCardDesignTypeEnum {
  """Spend Checking Basic v1"""
  BASIC_V1

  """Spend Checking Plus v1"""
  PLUS_V1
}

"""Limits pertaining to card usage."""
type SpendDebitCardLimits {
  """The total dollar amount that may be spent per day using the card."""
  dailySpendingLimit: Float

  """The total dollar amount that may be withdrawn per day at an ATM."""
  dailyAtmWithdrawalLimit: Float

  """The number of ATM fee instances that will be reimbursed per month."""
  monthlyAtmFeeReimbursements: Int
}

type SpendActivity implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  A list of Spend Checking activity entries, including Spend Checking transactions. Sorted in
  reverse chronological order.
  """
  activity(
    first: Int
    after: String

    """A filter mode for the activity entries. Default is `ALL`."""
    mode: SpendActivityModeEnum = ALL

    """
    Optional accountId parameter to filter the results for a specific user's account.
    """
    accountId: ID
  ): SpendActivityEntryConnection
}

enum SpendActivityModeEnum {
  """Only display pending (non-final) activity entries."""
  ONLY_PENDING

  """Only display final (non-pending) activity entries."""
  ONLY_FINAL

  """Display all activity entries."""
  ALL
}

type SpendActivityEntryConnection {
  total: Int
  pageInfo: PageInfo!
  edges: [SpendActivityEntryEdge]
}

type SpendActivityEntryEdge {
  cursor: String!
  node: SpendActivityEntry
}

"""A Spend Checking activity entry."""
interface SpendActivityEntry {
  """The ID of this node."""
  id: ID!

  """The status of this activity entry."""
  status: AppPill

  """The legacy date for this activity entry."""
  date: String!

  """The formatted date for this activity entry."""
  activityDate: String!

  """The AppImage icon for this activity entry."""
  icon: AppImage

  """A short summary description for this transaction."""
  summary: String!

  """
  A friendly description for this activity entry which must be displayed to users.
  """
  description: String!

  """The merchant name where the activity entry occured."""
  merchant: String

  """A short description of the activity entry category."""
  categoryLabel: String!

  """A boolean value for whether or not the transaction is void."""
  isVoided: Boolean

  """A signed dollar amount associated with this activity, if applicable."""
  amount: Float

  """Further details for this activity entry."""
  details: SpendActivityEntryDetails

  """The date in which the transaction was made."""
  transactionDate: String! @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")

  """The date in which the transaction was settled."""
  settledDate: String @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")
}

type SpendActivityEntryDetails implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Additional label/value pairs to display for the activity entry."""
  additionalDetails: [SpendActivityEntryAdditionalDetail]

  """Amount of the entry."""
  amount: Float!

  """
  Category details for the entry. Null if unavailable or otherwise uncategorized.
  """
  categoryDetails: SpendActivityEntryCategoryDetails

  """Dispute details for the entry. Value present if entry is disputable."""
  disputeDetails: SpendActivityEntryDisputeDetails

  """If entry is eligible for debit card cash back program."""
  isEligibleForCashBack: Boolean

  """Returns the associated rewards tier for the transaction if applicable."""
  transactionRewardTier: AppPill @deprecated(reason: "Utilize `colorizedTransactionRewardTier` instead.")

  """
  Returns the associated color coded reward tier for the transaction if applicable. Use instead of transactionRewardTier.
  """
  colorizedTransactionRewardTier: CreditCardRewardsAppPill

  """
  Optional pill to display if the transaction is a reversal, either return or refund.
  """
  isReversal: AppPill

  """If entry is an ACH reversal or return"""
  isReversalOrReturn: Boolean

  """Plus promotional message for the view."""
  plusPromotion: PlusPromotionalMessage

  """Status pill to display, if any."""
  status: AppPill

  """Further supplementary message about the entry."""
  supplementaryMessage: SpendActivityEntrySupplementaryMessage

  """Entry details title."""
  title: String!

  """Additional separate lines of copy with links interspersed."""
  additionalLinks: [RichTextContent!]
}

type SpendActivityEntryAdditionalDetail {
  """A short label describing the value or pill."""
  label: String!

  """
  A value. Likely some metadata about the entry, e.g. created date, description, etc.
  """
  value: String!

  """A pill relating to the entry, likely some descriptive image."""
  pill: AppPill
}

type SpendActivityEntryCategoryDetails {
  """An icon representing the category."""
  icon: AppImage!

  """A subtitle with more details on the category."""
  subtitle: String

  """The title of the category."""
  title: String!
}

type SpendActivityEntrySupplementaryMessage {
  """The content of the supplementary message."""
  content: String!

  """A link with more information regarding the message, if any."""
  link: AppLink

  """The phone number to be linked to in the content."""
  phoneNumber: String
}

type SpendActivityEntryDisputeDetails implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Plain content describing steps to resolve a disputete."""
  content: [String!]!

  """Phone number to use for disputes."""
  phoneNumber: String

  """
  If entry is associated with a debit card transaction, the related SpendDebitCard.
  """
  ifDebitCardRelated: SpendDebitCard

  """
  A link to the support resolution form to assist the user in the dispute.
  """
  resolutionCta: AppLink

  """The title of the dispute details."""
  title: String!

  """The label for use on entry details linking to dispute details."""
  viaDetailsCtaLabel: String!
}

type SpendTransaction implements Node & SpendActivityEntry {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The date this transaction was created."""
  date: String!

  """A status AppPill for this transaction."""
  status: AppPill

  """The activity date for this transaction."""
  activityDate: String!

  """The Spend Checking icon for this transaction."""
  icon: AppImage

  """The category label for this transaction."""
  categoryLabel: String!

  """A boolean to indicate whether this transaction is voided or not."""
  isVoided: Boolean

  """
  A friendly description for this transaction which must be displayed to users.
  """
  description: String!

  """The merchant name where the activity entry occured."""
  merchant: String

  """A short summary description for this transaction."""
  summary: String!

  """
  The signed dollar amount associated with this transaction. Postive amounts are
  cash flows into a Spend Checking account, and negative amounts are cash flows out.
  """
  amount: Float

  """The date this transaction was settled, if applicable."""
  settledDate: String

  """Information about the transaction type."""
  transactionType: SpendTransactionType! @deprecated(reason: "Utilize appropriate field from `SpendActivityEntryDetails` type.")

  """Information about the transaction status."""
  transactionStatus: SpendTransactionStatus! @deprecated(reason: "Utilize appropriate field from `SpendActivityEntryDetails` type.")

  """An optional Plus promotional message."""
  plusPromotionForTransaction: PlusPromotionalMessage

  """Further details for this activity entry."""
  details: SpendActivityEntryDetails
  transactionDate: String! @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")
}

"""Information about the type of a Spend Checking transaction."""
type SpendTransactionType {
  """A friendly description of the transaction type."""
  description: String!

  """A category type for the transaction, if known."""
  categoryType: SpendTransactionCategoryTypeEnum

  """A title describing the categorization, if known."""
  categoryTitle: String

  """Additional detail describing the categorization, if available."""
  categoryDetail: String

  """True if the transaction involves a debit card."""
  isCardTransaction: Boolean!

  """True if the transaction is a debit card authorization transaction."""
  isCardAuthTransaction: Boolean!

  """True if the transaction is a debit card reversal or an ACH return."""
  isReversalOrReturn: Boolean!
}

enum SpendTransactionCategoryTypeEnum {
  """System transfers"""
  SYSTEM_TRANSFERS

  """Outside transfers"""
  OUTSIDE_TRANSFERS

  """Interest payments"""
  INTEREST_PAYMENTS

  """ATM"""
  ATM

  """Cash"""
  CASH

  """Check"""
  CHECK

  """Education"""
  EDUCATION

  """Entertainment"""
  ENTERTAINMENT

  """Finances"""
  FINANCES

  """Food"""
  FOOD

  """Fuel"""
  FUEL

  """Gambling"""
  GAMBLING

  """Government services"""
  GOVERNMENT_SERVICES

  """Groceries"""
  GROCERIES

  """Health"""
  HEALTH

  """Housing services"""
  HOUSING_SERVICES

  """Memberships"""
  MEMBERSHIPS

  """Miscellaneous"""
  MISCELLANEOUS

  """Office"""
  OFFICE

  """Professional services"""
  PROFESSIONAL_SERVICES

  """Recreational"""
  RECREATIONAL

  """Retail"""
  RETAIL

  """Travel"""
  TRAVEL

  """Transportation"""
  TRANSPORATION

  """Utilities"""
  UTILITIES

  """Payment"""
  PAYMENT

  """Fee"""
  FEE
}

"""The status of a Spend Checking transaction."""
type SpendTransactionStatus {
  """The status code."""
  code: SpendTransactionStatusCodeEnum!

  """True if the transaction is currently pending."""
  isPending: Boolean!

  """True if the transaction has been voided."""
  isVoided: Boolean!

  """A friendly description of the transaction status."""
  description: String
}

"""A Spend Checking transaction status code."""
enum SpendTransactionStatusCodeEnum {
  """Initiated"""
  INITIATED

  """Pending"""
  PENDING

  """Settled"""
  SETTLED

  """Voided"""
  VOIDED

  """Reversed"""
  REVERSED
}

"""A Spend Checking activity entry of an unknown type."""
type SpendActivityOtherEntry implements Node & SpendActivityEntry {
  """The ID of this node."""
  id: ID!

  """The status of this activity entry."""
  status: AppPill

  """The date for this activity entry."""
  date: String!

  """The formatted date for this activity entry."""
  activityDate: String!

  """The AppImage icon for this activity entry."""
  icon: AppImage

  """A short summary description for this transaction."""
  summary: String!

  """A friendly description of this activity entry."""
  description: String!

  """The merchant name where the activity entry occured."""
  merchant: String

  """A short description of the activity entry category."""
  categoryLabel: String!

  """A boolean value for whether or not the transaction is void."""
  isVoided: Boolean

  """A signed dollar amount associated with this activity, if applicable."""
  amount: Float

  """Further details for this activity entry."""
  details: SpendActivityEntryDetails
  transactionDate: String! @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")

  """The date in which the transaction was settled."""
  settledDate: String @deprecated(reason: "Utilize appropriate field from `SpendActivityEntry` type.")
}

type MigratableInvestExternalAccountConnection {
  pageInfo: PageInfo!
  edges: [MigratableInvestExternalAccountEdge]
}

type MigratableInvestExternalAccountEdge {
  cursor: String!
  node: MigratableInvestExternalAccount
}

"""Description of a migratable Invest external bank account."""
type MigratableInvestExternalAccount implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A title for the external bank account."""
  title: String!

  """A description for the external bank account, if available."""
  description: String

  """
  When applicable, a Plaid external account that corresponds to this migratable
  Invest external bank account.
  """
  relatedExternalAccount: ExternalAccount
}

"""Deprecated - use `Transfers.moveMoney(type: SPEND)` instead"""
type SpendMoveMoney implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Screen title copy."""
  title: String!

  """Subtitle for the Spend Checking Move Money screen."""
  subtitle: String

  """Categories of options for moving money from Spend Checking."""
  categories: [SpendMoveMoneyCategory]
}

"""Deprecated - use `MoveMoneyCategory` instead"""
type SpendMoveMoneyCategory {
  """Category label."""
  label: String!

  """List of options for a Spend Checking Move Money category."""
  options: [SpendMoveMoneyOption]
}

"""Deprecated - use `MoveMoneyOption` instead"""
type SpendMoveMoneyOption implements Linkable {
  """
  An analytics event to be recorded upon clicking a Spend Checking Move Money option.
  """
  analyticsEvent: AppAnalyticsEvent

  """Spend Checking Move Money Option icon."""
  icon: AppImage

  """Spend Checking Move Money Option title."""
  title: String!

  """Optional `AppPill` to display for the move money option."""
  pill: AppPill

  """Spend Checking Move Money Option subtitle."""
  subtitle: String!

  """Spend Checking Move Money Option link."""
  destination: SpendMoveMoneyOptionDestinationEnum!
}

"""Deprecated - use `MoveMoneyOption.link` instead"""
enum SpendMoveMoneyOptionDestinationEnum {
  """DEPOSIT"""
  DEPOSIT

  """WITHDRAW"""
  WITHDRAW

  """SEND_CHECK"""
  SEND_CHECK

  """DIRECT_DEPOSIT"""
  DIRECT_DEPOSIT

  """CREDIT_CARD"""
  CREDIT_CARD
}

type SendCheck implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Copy for the Ineligible screen in the Send Check flow."""
  ineligibleContent: SendCheckIneligibleContent @deprecated(reason: "Sunset Checking.")

  """Copy for the Plus Marketing screen in the Send Check flow."""
  plusMarketingContent: SendCheckPlusMarketingContent @deprecated(reason: "Sunset Checking.")

  """
  Copy and screen variables for the Transfer Overview screen in the Send Check flow.
  """
  transferOverviewContent: SendCheckTransferOverviewContent @deprecated(reason: "Sunset Checking.")

  """
  Copy and recent recipient data for the Select Recipient screen in the Send Check flow.
  """
  selectRecipientContent: SendCheckSelectRecipientContent @deprecated(reason: "Sunset Checking.")

  """Copy for the Select Recipient Type screen in the Send Check flow."""
  selectRecipientTypeContent: SelectRecipientTypeContent @deprecated(reason: "Sunset Checking.")

  """Copy for the Recipient Information screen in the Send Check flow."""
  recipientInformationContent: RecipientInformationContent @deprecated(reason: "Sunset Checking.")

  """Copy for the Set Check Amount screen in the Send Check flow."""
  setCheckAmountContent: SetCheckAmountContent @deprecated(reason: "Sunset Checking.")

  """Copy for the Check Memo screen in the Send Check flow."""
  checkMemoContent: CheckMemoContent @deprecated(reason: "Sunset Checking.")

  """Copy for the Confirm Check Details pop up in the Send Check flow."""
  confirmCheckDetailsContent: ConfirmCheckDetailsContent @deprecated(reason: "Sunset Checking.")

  """Copy for the Payment Confirmed screen in the Send Check flow."""
  paymentConfirmedContent(transferRuleId: ID): PaymentConfirmedContent @deprecated(reason: "Sunset Checking.")

  """
  Boolean indicating whether or not recurring Send Check is enabled for the user.
  """
  isRecurringSendCheckEnabled: Boolean @deprecated(reason: "Sunset Checking.")
}

type SendCheckIneligibleContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Header for the Send Check Ineligble screen content."""
  header: String!

  """Content copy for the Send Check Ineligible screen content."""
  content: String!

  """Send Check FAQ `AppLink`."""
  sendCheckFaqCta: AppLink

  """Done CTA Copy."""
  doneCtaCopy: String!
}

type SendCheckPlusMarketingContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Screen title copy."""
  title: String

  """Image for the Send Check Plus Marketing screen."""
  image: AppImage!

  """Header for the Send Check Plus Marketing screen content."""
  header: String!

  """Content copy for the Send Check Plus Marketing screen content."""
  content: String!

  """M1 Plus content copy for the Send Check Plus Marketing screen content."""
  plusContent: String!

  """Join CTA Copy"""
  joinCtaCopy: String!

  """Learn More CTA `AppLink`."""
  learnMore: AppLink
}

type SendCheckTransferOverviewContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Icon to be used in the Spend Checking Account overview section."""
  spendAccountIcon: AppImage!

  """Screen title copy."""
  title(
    """
    Boolean to determine if the user is in the Recurring Check Schedule flow.
    """
    isRecurringCheck: Boolean!

    """Boolean to determine if the user is in the Edit Check Schedule view."""
    isEditView: Boolean
  ): String

  """
  Short description for the Spend Checking account being used as the source for the transfer.
  """
  spendAccountDescription: String

  """
  Current balance of the Spend Checking account being used as the source for the transfer.
  """
  spendAccountBalance: String

  """
  Icon (optional), label and placeholder copy for the Recipient section of the Send Check Transfer Overview screen.
  """
  recipientOverviewSection: SendCheckTransferDetailOption

  """
  Icon (optional), label and placeholder copy for the Amount section of the Send Check Transfer Overview screen.
  """
  amountSection: SendCheckTransferDetailOption

  """
  Icon (optional), label and placeholder copy for the Memo section of the Send Check Transfer Overview screen.
  """
  memoSection: SendCheckTransferDetailOption

  """Copy used for the link to switch to a recurring check schedule."""
  recurringCheckCopy: String!

  """Copy used for the link to switch to a one-time check."""
  oneTimeCheckCopy: String!

  """
  Label for the Frequency section of the Send Check Transfer Overview screen.
  """
  frequencySectionLabel: String

  """Copy for the Continue CTA"""
  continueCtaCopy: String!
}

type SendCheckTransferDetailOption {
  """
  Label for a Send Check Transfer Overview screen option (recipient, amount, etc.).
  """
  label: String

  """
  Placeholder for a Send Check Transfer Overview screen option (recipient, amount, etc.).
  """
  placeholder: String!

  """Icon to display, if applicable."""
  icon: AppImage
}

type SendCheckSelectRecipientContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Screen title copy."""
  title: String!

  """Label for the new recipient section."""
  newRecipientLabel: String!

  """Optional sublabel for the new recipient section."""
  newRecipientSublabel: String

  """Display list for recent send check recipient(s)."""
  recentRecipients: SendCheckRecipientList
}

type SendCheckRecipientList {
  """Optional title/description for a list of send check recipients."""
  title: String!

  """List of send check recipients."""
  recipients: [SendCheckRecipientListItem]
}

type SendCheckRecipientListItem implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Send check recipient label."""
  label: String!

  """Send check recipient sublabel."""
  sublabel: String!

  """Send check recipient edit requirements."""
  recipientEditRequirements: SendCheckRecipientEditRequirements
}

type SendCheckRecipientEditRequirements implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Indicates whether the recipient is an idividual or a business."""
  recipientType: SendCheckRecipientTypeEnum!

  """If the recipient is an individual, this is the recipient's first name."""
  firstName: String

  """If the recipient is an individual, this is the recipient's last name."""
  lastName: String

  """If the recipient is a business, this is the recipient's business name."""
  businessName: String

  """Line one of the recipient's mailing address."""
  lineOne: String!

  """Line two of the recipient's mailing address."""
  lineTwo: String

  """The recipient's city."""
  city: String!

  """The recipient's state or province."""
  stateOrProvince: MailingAddressSubdivisionEnum!

  """The recipient's postal code."""
  postalCode: PostalCode!
}

enum SendCheckRecipientTypeEnum {
  """Individual recipient"""
  INDIVIDUAL

  """Business recipient"""
  BUSINESS
}

type SelectRecipientTypeContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Screen title copy."""
  title: String!

  """Individual recipient option."""
  individual: SendCheckRecipientTypeOption

  """Business recipient option."""
  business: SendCheckRecipientTypeOption
}

type SendCheckRecipientTypeOption {
  """Business recipient option title."""
  title: String!

  """Business recipient option subtitle."""
  subtitle: String!
}

type RecipientInformationContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Screen title copy."""
  title(recipientType: SendCheckRecipientTypeEnum!): String!

  """Recipient's name section title."""
  recipientNameTitle(recipientType: SendCheckRecipientTypeEnum!): String!

  """Recipient's address section title."""
  recipientAddressTitle(recipientType: SendCheckRecipientTypeEnum!): String!

  """Copy for the Continue CTA"""
  continueCtaCopy: String!
}

type SetCheckAmountContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Screen title copy."""
  title: String @deprecated(reason: "Sunset Checking.")

  """Minimum amount for which a check can be written for."""
  minCheckAmount: Float! @deprecated(reason: "Sunset Checking.")

  """Maximum amount for which a check can be written for."""
  maxCheckAmount: Float! @deprecated(reason: "Sunset Checking.")

  """
  Error message to display if the check amount is greater than required value.
  """
  maxErrorMessageCopy: String @deprecated(reason: "Sunset Checking.")

  """
  Error message to display if the check amount is less than required value.
  """
  minErrorMessageCopy: String @deprecated(reason: "Sunset Checking.")

  """Copy for the Continue CTA."""
  continueCtaCopy: String! @deprecated(reason: "Sunset Checking.")
}

type CheckMemoContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Screen title copy."""
  title: String

  """Copy to be used for the input placeholder."""
  inputPlaceholder: String!

  """Maximum number of characters that can be included in the Memo input."""
  maxCharacterLimit: Int!

  """Continue CTA Copy."""
  continueCtaCopy: String!
}

type ConfirmCheckDetailsContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Pop-up title copy."""
  title(isRecurringCheck: Boolean): String!

  """Copy for the From label."""
  fromLabel: String!

  """`AppImage` for the send check transfer source."""
  fromIcon: AppImage

  """Spend Checking account description."""
  spendAccountDescription: String!

  """Copy for the To label."""
  toLabel: String!

  """Copy for the Frequency label."""
  frequencyLabel: String

  """`AppImage` for the send check transfer destination."""
  toIcon: AppImage

  """Copy for the Address label."""
  addressLabel: String!

  """Copy for the Memo label."""
  memoLabel: String!

  """Content for the send check transfer timing message."""
  transferTimingMessage: SendCheckTransferTimingMessage!

  """Copy for the Cancel Transfer CTA."""
  cancelCtaCopy: String!

  """Copy for the Confirm Transfer CTA."""
  confirmTransferCtaCopy(isRecurringCheck: Boolean): String!
}

type SendCheckTransferTimingMessage {
  """`AppImage` for the transfer timing message."""
  icon: AppImage

  """Content for the transfer timing message."""
  content: String!

  """`AppLink` for the transfer timing message."""
  link: AppLink
}

type PaymentConfirmedContent implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Payment confirmed screen title."""
  title: String

  """Send Check payment confirmed illustration."""
  illustration: AppImage

  """Payment confirmed screen content header copy."""
  headerCopy: String!

  """Payment confirmed screen content body copy."""
  bodyCopy: String!

  """Copy for the Done CTA."""
  doneCtaCopy: String!

  """Copy for Check Details CTA."""
  checkDetailsCtaCopy: String!
}

"""Information about the current trading status of an account."""
type AccountTradingStatus implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The timestamp for this status."""
  asOfTime: String!

  """True when the account is currently in the process of trading."""
  isInProgress: Boolean!

  """
  True when the account is actively under maintenance window via our vendor. Null if vendor maintenance state is not available or not relevant to the account.
  """
  isInVendorMaintenanceWindow: Boolean

  """
  The type of window currently in progress for the account, if applicable.
  """
  inProgressWindowForAccount: TradingWindowTypeEnum

  """The anticipated start time of the next trading window for the account."""
  nextTradingTime: String

  """The type of the next available trading window for this account."""
  nextWindowForAccount: TradingWindowTypeEnum

  """The type of the system's next trading window."""
  nextWindowForSystem: TradingWindowTypeEnum

  """A description of the system's next morning trading window."""
  nextMorningWindow: TradingWindowDescription

  """A description of the system's next afternoon trading window."""
  nextAfternoonWindow: TradingWindowDescription

  """A description of the system's next on demand trading window."""
  nextOnDemandWindow: TradingWindowDescription

  """How many on demand trading windows are left."""
  onDemandTradeWindowsLeft: Int

  """
  The maximum number of on demand trading windows that can be performed per period.
  """
  maxOnDemandTradeWindows: Int

  """True if this account has access to the next afternoon trading window."""
  hasAccessToNextAfternoonWindow: Boolean

  """
  True if `hasAccessToNextAfternoonWindow` is true AND this account is currently
  allowed to trade in the next afternoon window based on day trading rules.
  """
  hasAccessToAndCanTradeInNextAfternoonWindow: Boolean

  """The minimum account value required for trading in multiple windows."""
  minAccountValueForMultipleDailyWindows: Float

  """
  The allocated trades of the last on-demand trade window OR the given on-demand trade window.
  """
  onDemandAllocatedTrades(tradeWindowId: ID!): [OnDemandAllocatedTrade!]

  """
  The reason on-demand trading is restricted for the user. If null, the user is allowed to trade.
  """
  onDemandTradingRestrictionReason: String
}

"""A trading window type."""
enum TradingWindowTypeEnum {
  """Morning"""
  MORNING

  """Afternoon"""
  AFTERNOON

  """ADMIN"""
  ADMIN

  """LEGACY"""
  LEGACY

  """ON_DEMAND"""
  ON_DEMAND
}

"""A trading window description."""
type TradingWindowDescription {
  """The type of this trading window."""
  type: TradingWindowTypeEnum!

  """The starting time of this trading window."""
  startTime: String!
}

type OnDemandAllocatedTrade {
  """The account ID of the account that made this trade."""
  brokerageAccountId: ID!

  """The account number of the account that made this trade."""
  custodianAccountNumber: String!

  """The trade window ID of the trade window that this trade belongs to."""
  tradeWindowId: ID!

  """The security that was traded."""
  of: Security

  """Whether the trade was a buy or sell."""
  side: OnDemandAllocatedTradeSideEnum!

  """The quantity of the traded security."""
  allocatedQuantity: Float

  """The price of the traded security."""
  allocatedPrice: Float

  """The amount of the security purchased in dollars."""
  allocatedAmount: Float

  """The status of the allocated trade."""
  status: OnDemandAllocatedTradeStatusEnum!

  """The copy to display for the status of the allocated trade."""
  statusCopy: String!

  """
  Optional notes about the allocated trade, such as reasons why it was rejected. Deprecated.
  """
  notes: [OnDemandAllocatedTradeNote!] @deprecated(reason: "Undesired pattern. Use `note` instead.")

  """
  Optional note about the allocated trade, such as reasons why it was rejected.
  """
  note: String

  """Pill indicating the status of the allocated trade."""
  statusPill: AppPill

  """The timestamp of when the trade was created."""
  createdTimestamp: String!

  """The timestamp of when the trade was executed."""
  executionTimestamp: String
}

type OnDemandAllocatedTradeNote {
  key: String!
  value: String!
}

enum OnDemandAllocatedTradeStatusEnum {
  PENDING
  OPEN
  FILLED
  CANCELLED
  REJECTED
}

enum OnDemandAllocatedTradeSideEnum {
  BUY
  SELL
}

type SecurityMarginTooltip {
  """The icon entry point to the security margin tooltip."""
  icon: AppImage!

  """The security margin label to be displayed with the tooltip."""
  label: String!

  """The security margin text to be displayed when the tooltip is engaged."""
  text: String!
}

"""A recurrence schedule."""
interface RecurrenceSchedule {
  """A short title for the schedule."""
  title: String!

  """A description of schedule."""
  description: String!
}

"""A monthly schedule."""
type MonthlySchedule implements RecurrenceSchedule {
  """A short title for the schedule."""
  title: String!

  """A description of schedule."""
  description: String!

  """The day of the month."""
  dayOfMonth: MonthlyScheduleDateEnum!
}

"""A week-of-month schedule."""
type WeekOfMonthSchedule implements RecurrenceSchedule {
  """A short title for the schedule."""
  title: String!

  """A description of schedule."""
  description: String!

  """The week of the month."""
  weekOfMonth: WeekOfMonthScheduleWeekEnum!

  """The day of the week."""
  dayOfWeek: WeeklyScheduleDayEnum!
}

"""A biweekly schedule."""
type BiweeklySchedule implements RecurrenceSchedule {
  """A short title for the schedule."""
  title: String!

  """A description of schedule."""
  description: String!

  """The day of the week."""
  dayOfWeek: WeeklyScheduleDayEnum!

  """True if the schedule is for even weeks, false for odd weeks."""
  isEvenWeeks: Boolean!
}

"""A weekly schedule."""
type WeeklySchedule implements RecurrenceSchedule {
  """A short title for the schedule."""
  title: String!

  """A description of schedule."""
  description: String!

  """The day of the week."""
  dayOfWeek: WeeklyScheduleDayEnum!
}

"""Potential Credit Card AutoPay values."""
enum CreditCardPaymentValueEnum {
  """STATEMENT_BALANCE"""
  STATEMENT_BALANCE

  """MINIMUM_PAYMENT"""
  MINIMUM_PAYMENT

  """FIXED_AMOUNT"""
  FIXED_AMOUNT
}

"""Potential AutoPay values."""
enum AutoPayPaymentValueEnum {
  """STATEMENT_BALANCE"""
  STATEMENT_BALANCE

  """MINIMUM_PAYMENT"""
  MINIMUM_PAYMENT

  """MONTHLY_PAYMENT"""
  MONTHLY_PAYMENT

  """FIXED_AMOUNT"""
  FIXED_AMOUNT

  """CURRENT_BALANCE"""
  CURRENT_BALANCE
}

"""A monthly schedule date."""
enum MonthlyScheduleDateEnum {
  """1st"""
  DAY_1

  """2nd"""
  DAY_2

  """3rd"""
  DAY_3

  """4th"""
  DAY_4

  """5th"""
  DAY_5

  """6th"""
  DAY_6

  """7th"""
  DAY_7

  """8th"""
  DAY_8

  """9th"""
  DAY_9

  """10th"""
  DAY_10

  """11th"""
  DAY_11

  """12th"""
  DAY_12

  """13th"""
  DAY_13

  """14th"""
  DAY_14

  """15th"""
  DAY_15

  """16th"""
  DAY_16

  """17th"""
  DAY_17

  """18th"""
  DAY_18

  """19th"""
  DAY_19

  """20th"""
  DAY_20

  """21st"""
  DAY_21

  """22nd"""
  DAY_22

  """23rd"""
  DAY_23

  """24th"""
  DAY_24

  """25th"""
  DAY_25

  """26th"""
  DAY_26

  """27th"""
  DAY_27

  """28th"""
  DAY_28

  """(Last day of the month)"""
  LAST
}

"""A week-of-month schedule week number."""
enum WeekOfMonthScheduleWeekEnum {
  """First"""
  WEEK_1

  """Second"""
  WEEK_2

  """Third"""
  WEEK_3

  """Fourth"""
  WEEK_4

  """Fifth"""
  WEEK_5
}

"""A weekly schedule day."""
enum WeeklyScheduleDayEnum {
  """Sunday"""
  SUNDAY

  """Monday"""
  MONDAY

  """Tuesday"""
  TUESDAY

  """Wednesday"""
  WEDNESDAY

  """Thursday"""
  THURSDAY

  """Friday"""
  FRIDAY

  """Saturday"""
  SATURDAY
}

"""Information about Invest account rollovers."""
type InvestRollovers implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String
  checkInstructions: InvestRolloverCheckInstructions

  """Information about existing rollover transactions"""
  rolloverTransactions: RolloverTransactions
}

type RolloverTransactions {
  """
  The webview URL for existing ACAT transactions - this will return null if the user does not have previous rollover transactions.
  """
  transactionsWebviewUrl: String
}

"""Share Pie fields"""
type InvestSharePie implements Node {
  """The ID of this node."""
  id: ID!

  """Share Pie modal"""
  sharePieModal: InvestSharePieModal

  """
  Share Pie Screenshot Information to be used on mobile for highlighting share pie feature
  """
  sharePieScreenshotBanner: InformationBanner
}

type InvestSharePieModal {
  """share pie modal illustration"""
  illustration: AppImage

  """share pie title"""
  title: String

  """share pie subtitle"""
  subtitle: String

  """share pie message"""
  message: String

  """share pie referrals"""
  referrals: Referrals
}

"""Instructions for sending rollover checks."""
type InvestRolloverCheckInstructions {
  """Who the check should be made payable to."""
  payableTo: String!

  """
  The mailing address that the check should be sent to. Strings are intended to
  be displayed verbatim on separate lines.
  """
  mailingAddressLines: [String!]!
}

type User implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The internal ID of this node."""
  internalId: String @deprecated(reason: "This field is internal-only and should not be used by client applications.")

  """The time that this user was created in ISO 8601 format."""
  created: String

  """No longer supported. Always returns null."""
  modified: String @deprecated(reason: "No longer supported.")

  """The username of this user."""
  username: String!

  """The correlation key for this user."""
  correlationKey: String!

  """The push notification subscriber key for this user."""
  subscriberKey: String

  """A list of user data entries."""
  data(
    """
    When provided, the list will be filtered for only the given keys. Keys that
    do not exist will be returned as an entry with a `null` value. Maximum
    number of keys is 100.
    """
    keys: [String!]
  ): [UserDataEntry!]!

  """The user requires verification via phone."""
  requiresPhoneVerification: Boolean

  """The user has successfullly completed verification via phone."""
  hasCompletedPhoneVerification: Boolean

  """
  True if the user has completed onboarding. A user is considered onboarded if they have
  a user profile.
  """
  hasOnboarded: Boolean!

  """True if the user has at least one (1) M1 product."""
  hasProduct: Boolean!

  """When true, the user's primary email address has been verified."""
  isPrimaryEmailVerified: Boolean!

  """When true, two factor authentication has been enabled for the user."""
  isTwoFactorAuthEnabled: Boolean!

  """Billing history and status for the user."""
  billing: Billing!

  """Hashe used for Intercom's Identity Verification"""
  intercomIdentityHash: String

  """Referrals program information for the user."""
  referrals: Referrals

  """The current agreement status for this user."""
  agreementStatus: AgreementStatus

  """When true, user has requested account deletion"""
  hasRequestedDeletion: Boolean!

  """When true, user account is deleted"""
  accountDeletionComplete: Boolean!

  """
  A list of key value pairs for a given user's account meant to aid with third-party Customer Support services.
  """
  customerSupportFields: [CustomerSupportField]

  """
  Entry point for modern onboarding as part of product agnostic onboarding experience.
  """
  onboardingIdentityFirst: OnboardingIdentityFirst

  """
  Latest product selected during an onboarding flow. If a user has this value, that means they have completed Module 1 for the latest selected product. Null if not.
  """
  latestProductSelection: ProductListIdentifier

  """
  When true, user has a primaryProfile with a non-nullable identityInfo object. In the case of service outage, returns true.
  """
  hasIdentityInfo: Boolean!

  """
  True if a user has a primary profile containing both profile and required suitability information.
  """
  hasCompletedProfile: Boolean!
}

type OnboardingIdentityFirst {
  """Deprecated, no longer in use."""
  hasDirectToHYSAFlagLaunchDarkly: Boolean @deprecated(reason: "This flag is no longer in use.")

  """Deprecated, no longer in use."""
  hasScreenReorderingFlagLaunchDarkly: Boolean @deprecated(reason: "This flag is no longer in use.")

  """Deprecated, no longer in use."""
  hasMidflowFlagLaunchDarkly: Boolean @deprecated(reason: "This flag is no longer in use.")

  """Deprecated, no longer in use."""
  hasCxIntegratedOnboarding: Boolean! @deprecated(reason: "This flag is no longer in use.")

  """
  Drives the User Profile section. Renders questions that collect L1 and L2 user information for creating an M1 User Profile with minimally required information.
  """
  userProfileSection: OnboardingIdentityFirstUserProfileSection

  """Drives the financial suitability profile section."""
  financialSuitabilitySection: OnboardingIdentityFirstFinancialSuitabilitySection
}

enum ModularConfirmationScreenFlowKind {
  DIRECT_TO_INVEST
}

type OnboardingIdentityFirstUserProfileSection {
  title: String
  questions: [OnboardingIdentityFirstQuestion]
}

type OnboardingIdentityFirstFinancialSuitabilitySection {
  title: String
  questions: [OnboardingIdentityFirstQuestion]
}

enum OnboardingIdentityFirstQuestionType {
  NAME
  ADDRESS
  NAME_AND_ADDRESS
  DATE_OF_BIRTH
  CITIZENSHIP
  DATE_OF_BIRTH_AND_CITIZENSHIP
  SOCIAL_SECURITY_NUMBER
  POLITICALLY_EXPOSED_PERSON
  EMPLOYMENT_STATUS
  WHERE_DO_YOU_WORK
  EMPLOYMENT_STATUS_AND_WHERE_DO_YOU_WORK
  ANNUAL_INCOME
  NET_WORTH
  LIQUID_NET_WORTH
}

type OnboardingIdentityFirstQuestion {
  """
  An ENUM representing the specific question. Clients can key off this value to build custom behavior on a per-question basis.
  """
  questionType: OnboardingIdentityFirstQuestionType

  """Title screen for the question."""
  title: String

  """Subtitle copy for the given question."""
  subtitle: String

  """
  An ENUM that represents the associated section the given question exists under.
  """
  section: OnboardingIdentityFirstSectionType

  """Copy to be rendered for the continue CTA."""
  continueLabel: String

  """
  Copy to be rendered for the skip CTA. Null if the question can't be skipped.
  """
  skipLabel: String

  """
  An array of strings for a any disclaimer tooltips that need to be shown for the given question.
  """
  disclaimerTooltipContent: [String]

  """
  An ENUM representing the previous question, null if the given question is the first in its section.
  """
  previousQuestionType: OnboardingIdentityFirstQuestionType

  """
  An ENUM representing the next question, null if the given question is the last in its section.
  """
  nextQuestionType: OnboardingIdentityFirstQuestionType
}

enum OnboardingIdentityFirstSectionType {
  USER_PROFILE
  FINANCIAL_SUITABILITY
}

type CustomerSupportField {
  """A key associated with a given field."""
  key: String

  """A value associated with a given field."""
  value: String
}

"""Represents a user data entry."""
type UserDataEntry {
  """The data key."""
  key: String!

  """The data value. Value is null when not present."""
  value: String
}

interface MarketingScreen implements Node {
  """The ID of this node."""
  id: ID!

  """The header for a marketing screen."""
  header: String

  """An array of the content cards for a marketing screen."""
  productMarketingCards: [ProductMarketingCard]

  """An array of the disclosures for a marketing screen."""
  disclosures: [AppRichTextDisclosureLink]
}

"""A sort option."""
input DocumentSortOptionInput {
  """A sort direction."""
  direction: SortDirectionEnum!

  """A sort type."""
  type: DocumentSortTypeEnum!
}

"""A document filter setting."""
input DocumentFilterInput {
  """
  All document types to be returned with the document connection request.
  """
  includeFilter: [DocumentTypeFilterEnumType]

  """When true, include documents of type `STATEMENT`."""
  includeStatements: Boolean

  """When true, include documents of type `TAX_FORM`."""
  includeTaxForms: Boolean

  """When true, include documents of type `TRADE_CONFIRMATION`."""
  includeTradeConfirmations: Boolean

  """
  If included, documents returned will only include statements of this type.
  """
  statementType: [StatementTypeFilterEnumType] = null
}

"""A statement type filter."""
enum StatementTypeFilterEnumType {
  """Credit Card Statement"""
  CREDIT_CARD_STATEMENT

  """Crypto Tax Form"""
  CRYPTO_TAX_FORM

  """Invest Statement"""
  INVEST_STATEMENT

  """Invest Tax Form"""
  INVEST_TAX_FORM

  """Invest Trade Confirmation"""
  INVEST_TRADE_CONFIRMATION

  """Lending Account Statement"""
  LENDING_DOCUMENT

  """Spend Checking Statement"""
  SPEND_STATEMENT

  """Spend Checking Tax Form"""
  SPEND_TAX_FORM
}

"""A document type filter."""
enum DocumentTypeFilterEnumType {
  """Account Documents"""
  ACCOUNT_DOCUMENT

  """Investments Related"""
  INVESTMENTS_RELATED

  """Statements"""
  STATEMENT

  """Tax Forms"""
  TAX_FORM

  """Trade Confirmations"""
  TRADE_CONFIRMATION
}

"""A document sort type."""
enum DocumentSortTypeEnum {
  """Account"""
  ACCOUNT

  """Date"""
  DATE

  """Type"""
  TYPE
}

"""An account registration type."""
enum BrokerAccountRegistrationEnum {
  """Beneficiary IRA"""
  BENEFICIARY_IRA

  """Corporation"""
  CORPORATION

  """Crypto"""
  CRYPTO

  """Custodial"""
  CUSTODIAL

  """Custodial UGMA"""
  CUSTODIAL_UGMA

  """Custodial UTMA"""
  CUSTODIAL_UTMA

  """Individual"""
  INDIVIDUAL

  """Joint"""
  JOINT

  """LLC"""
  LLC

  """Partnership"""
  PARTNERSHIP

  """Roth IRA"""
  ROTH_IRA

  """SEP IRA"""
  SEP_IRA

  """Simple IRA"""
  SIMPLE_IRA

  """Traditional IRA"""
  TRADITIONAL_IRA

  """Trust"""
  TRUST
}

"""
Deprecated - The action that will be run on the client side. Client will interpret this action.
Use AppButton instead.
"""
type AppAction {
  """An analytics event for following the link."""
  analyticsEvent: AppAnalyticsEvent @deprecated(reason: "use AppButton instead")

  """The action type used to execute client side."""
  type: AppActionEnum! @deprecated(reason: "use AppButton instead")

  """A title that can be displayed as trigger for an action."""
  title: String! @deprecated(reason: "use AppButton instead")
}

enum AppActionEnum {
  """Enable plus Auto Renew."""
  ENABLE_PLUS_AUTO_RENEW

  """Resend email verification."""
  RESEND_EMAIL_VERIFICATION

  """Create a one-time transfer (excludes one-time transfers for IRAs)"""
  CREATE_TRANSFER_INSTANCE

  """Create a one-time IRA transfer (either contribution or distribution)"""
  CREATE_IRA_TRANSFER

  """
  Create a scheduled / recurring transfer.
  This includes IRA contributions (and not IRA distributions).
  """
  SET_SCHEDULED_TRANSFER_RULE

  """Open margin call screen"""
  MARGIN_CALL

  """Open margin view details screen"""
  MARGIN_VIEW_DETAILS

  """Open margin learn more screen"""
  MARGIN_LEARN_MORE

  """View the most recent bill/statement details"""
  VIEW_BILL

  """Complete the register user flow."""
  FINISHED_REGISTER_USER_FLOW

  """Enter the Earn onboarding direct deposit flow"""
  BEGIN_EARN_ONBOARDING_DIRECT_DEPOSIT
}

type AppAnalyticsEvent {
  """The name of the analytics event."""
  name: String!

  """An optional numeric value for the built-in `value` parameter."""
  valueParameter: Float

  """An optional list of parameters that should be sent with the event."""
  customParameters: [AppAnalyticsParameter!]

  """
  An optional list of boolean parameters that should be sent with the event.
  """
  customBoolParameters: [AppAnalyticsBooleanParameter!]

  """
  An optional list of number parameters that should be sent with the event.
  """
  customNumberParameters: [AppAnalyticsNumberParameter!]
}

"""A specification for an analytics parameter."""
type AppAnalyticsParameter {
  """The name of the parameter."""
  name: String!

  """The value of the parameter."""
  value: String!
}

"""A specification for a boolean analytics parameter."""
type AppAnalyticsBooleanParameter {
  """The name of the parameter."""
  name: String!

  """The value of the parameter."""
  value: Boolean!
}

"""A specification for a number analytics parameter."""
type AppAnalyticsNumberParameter {
  """The name of the parameter."""
  name: String!

  """The value of the parameter."""
  value: Float!
}

"""A union of possible App Buttons."""
union AppButtonUnion = AppButton | AppLink | AppShareButton

interface AppButtonInterface {
  """The label of the button"""
  label: String

  """An analytics event for clicking the button"""
  analyticsEvent: AppAnalyticsEvent

  """disabled state of the button"""
  disabled: Boolean

  """
  The optional button kind, as defined by ButtonKind in LiRe (ie primary, secondary, text, link, etc). Null otherwise.
  """
  kind: String

  """
  The optional button size, as defined by ButtonSize in LiRe (ie small, medium, large). Null otherwise.
  """
  size: String
}

type AppButton implements AppButtonInterface {
  """The label of the button"""
  label: String

  """An analytics event for clicking the button"""
  analyticsEvent: AppAnalyticsEvent

  """disabled state of the button"""
  disabled: Boolean

  """
  The optional button kind, as defined by ButtonKind in LiRe (ie primary, secondary, text, link, etc). Null otherwise.
  """
  kind: String

  """
  The optional button size, as defined by ButtonSize in LiRe (ie small, medium, large). Null otherwise.
  """
  size: String

  """
  An action that can be used for mapping the click event to a specific action
  """
  action: AppActionEnum
}

type AppShareButton implements AppButtonInterface {
  """The label of the button"""
  label: String

  """An analytics event for clicking the button"""
  analyticsEvent: AppAnalyticsEvent

  """The disabled state of the button"""
  disabled: Boolean

  """
  The optional button kind, as defined by ButtonKind in LiRe (ie primary, secondary, text, link, etc). Null otherwise.
  """
  kind: String

  """
  The optional button size, as defined by ButtonSize in LiRe (ie small, medium, large). Null otherwise.
  """
  size: String

  """
  Content string that is copied to clipboard or shared when the button is clicked
  """
  shareContent: String

  """
  Whether the button should copy or share the shareContent on click. If null, web behavior will default to copy and mobile behavior will default to share.
  """
  shareType: AppShareButtonTypeEnum
}

enum AppShareButtonTypeEnum {
  COPY
  SHARE
}

type AppCard {
  """True if the card is collapsible"""
  isCollapsible: Boolean

  """True if the card is dismissible"""
  isDismissible: Boolean

  """Background color for the card - liquid semantic color naming used"""
  backgroundColor: String

  """Border color for the card - liquid semantic color naming used"""
  borderColor: String

  """Hover/highlight color for the card - liquid semantic color naming used"""
  highlightColor: String

  """Icon for the card"""
  icon: AppImage

  """Title for the card"""
  title: RichTextContent

  """Body (paragraphs) for the card"""
  paragraphs: [RichTextContent!]

  """Primary CTA for the card"""
  primaryCta: AppButtonUnion

  """Secondary CTA for the card"""
  secondaryCta: AppButtonUnion

  """
  Tappable CTA for the card, if applicable. If present, that signals to clients that the card itself should be tappable.
  """
  tappableCta: AppButtonUnion

  """An analytics event to be recorded upon displaying the card."""
  displayAnalyticsEvent: AppAnalyticsEvent

  """An analytics event to be recorded upon collapsing/dismissing the card."""
  actionAnalyticsEvent: AppAnalyticsEvent
}

type AppImage {
  """
  The image type, can be either ILLUSTRATION or ICON. This field is to be used to determine which
  component clients will use for the AppImage (Illustration or Icon).
  """
  type: AppImageType!

  """
  The name(s) (key) of the Icon or Illustration asset.
  The name needs to be a valid IllustrationsType or IconsType from the `@m1/liquid-react`.
  Clients might not have the named asset, so fallbacks can be provided in the array after the first index.
  """
  names: [String!]

  """
  The color to fill monochromatic icons. Not relevant for any other image type.
  """
  color: String

  """Light-theme image variation."""
  lightTheme: AppImageSourceSet!

  """Dark-theme image variation."""
  darkTheme: AppImageSourceSet!
}

enum AppImageType {
  ILLUSTRATION
  POLYCHROMATIC_ICON
  MONOCHROMATIC_ICON
  LEGACY
}

"""A set of source URLs for an image asset."""
type AppImageSourceSet {
  """Asset Url at 1x resolution"""
  scale1xUrl: String!

  """"Asset Url at 2x resolution"""
  scale2xUrl: String!

  """Asset Url at 3x resolution"""
  scale3xUrl: String!
}

type AppInfoPage {
  """Illustration to display at top of AppInfoPage"""
  illustration: AppImage

  """Title of AppInfoPage"""
  title: String

  """Subtitle of AppInfoPage"""
  subtitle: String

  """The list of items on ApInfoPage, including icon and content"""
  infoList: [InfoPageListItem!]

  """Links for AppInfoPage"""
  links: [AppLink!] @deprecated(reason: "Use `paragraphs` instead")

  """
  Rich Text Disclosures for AppInfoPage. On web, this appears below the CTA. If you need disclosures above the CTA, use `paragraphs` instead.
  """
  richTextDisclosures: [AppRichTextDisclosureLink!]

  """Disclosures for AppInfoPage"""
  disclosures: [AppDisclosureLink!] @deprecated(reason: "Use `richTextDisclosures`(for below the CTA) or `paragraphs` (for above the CTA) instead")

  """
  Rich text content that can go below the info list and above CTAs, such as links, disclosures, disclaimers, etc.
  """
  paragraphs: [RichTextContent!]

  """
  An analytics event to fire off when the page loads. This should be deprecated once the new Wizards flows on Web support logging page views automatically.
  """
  pageViewAnalytics: AppAnalyticsEvent

  """The text for the label of the primary call to action button/link"""
  primaryCtaLabel: String @deprecated(reason: "Use `primaryCtaButton` instead")

  """The text for the label of the secondary call to action button/link"""
  secondaryCtaLabel: String @deprecated(reason: "Use `secondaryCtaButton` instead")

  """The button of the primary call to action button/link"""
  primaryCtaButton: AppButton

  """The button of the secondary call to action button/link"""
  secondaryCtaButton: AppButton

  """A link option for the primary CTA"""
  primaryCtaLink: AppLink

  """A link option for the secondary CTA"""
  secondaryCtaLink: AppLink

  """The label for the skip button"""
  skipLabel: String
}

type InfoPageListItem {
  """Icon for the item of the info list of AppInfoPage"""
  icon: AppImage

  """
  The title of the list item. Will return `body` as text in this resolver for backwards compatability.
  """
  title: RichTextContent

  """The subtitle/body content of the list item"""
  subtitle: [RichTextContent!]

  """Content of the item of the info list of AppInfoPage"""
  body: String @deprecated(reason: "use `title` instead")
}

"""An informational card to display important messages to the user."""
type AppInformationalMessageCard {
  """Determines if the M1 Plus logo should show."""
  isPlusRelated: Boolean

  """The header (or title) of the card."""
  title: String

  """The pill that shows up for the card."""
  status: AppPill

  """
  The subtitle for the card. An array of strings where each index is displayed independently.
  """
  items: [AppInformationalMessageCardItem]

  """The informative message displayed to the user."""
  message: String

  """The icon to display next to the message."""
  icon: AppImage

  """The support link associated with the message."""
  link: AppLink
}

"""Items to display on the Informational card."""
type AppInformationalMessageCardItem {
  """The label to show for this item."""
  label: String!

  """The value to show for this item."""
  value: String

  """The tooltip icon displayed next to the card item."""
  tooltip: AppInformationalMessageCardItemTooltip
}

"""
The tooltip that will be displayed next to items in the AppInformationalMessageCard.
"""
type AppInformationalMessageCardItemTooltip {
  """The icon to display for this tooltip."""
  icon: AppImage!

  """The text that will display when the user clicks the tooltip icon."""
  text: [String]
}

interface AppPillInterface {
  """The label to use when displaying this pill."""
  label: String!

  """Optional icon to display within the `AppPill`"""
  icon: AppPillIcon
}

type AppPill implements AppPillInterface {
  """The label to use when displaying this pill."""
  label: String!

  """
  The "kind" of pill to display. Refer to design documentation for specs.
  """
  kind: AppPillKind!

  """Optional icon to display within the `AppPill`"""
  icon: AppPillIcon
}

enum AppPillIcon {
  DIAMOND
}

enum AppPillKind {
  CAUTION
  DANGER
  DANGER_INVERSE @deprecated(reason: "no longer used after IB changes")
  IMPORTANT
  IMPORTANT_INVERSE @deprecated(reason: "no longer used after IB changes")
  NEUTRAL
  PLUS
  SUCCESS
  WHATS_NEW
  WHATS_NEW_INVERSE @deprecated(reason: "no longer used after IB changes")
}

type AppRichTextDisclosureLink {
  """The label for a disclosure"""
  linkText: String

  """
  The font size of the linkText as a string
  "HXL" | "HL" | "HM" | "HS" | "HXS" | "HXXS" | "PXL" | "PL" | "PM" | "PS" | "PXS" | "LL" | "LM" | "LS"
  """
  font: String

  """
  The font weight of the linkText as a string. Using TS types, Lens enforces that only valid font weights are used for each font size,
  but clients should use the font size's default font weight if no font weight or if it's invalid.
  """
  fontWeight: String

  """If true, the linkText should be underlined."""
  underline: Boolean!

  """The array of rich text for a disclosure"""
  paragraphs: [RichTextContent]
}

type AppToast {
  """The paragraphs of the toast content"""
  paragraphs: [RichTextContent!]!

  """The link of the toast - can be a link or a button"""
  link: AppButtonUnion

  """The kind of toast"""
  kind: AppToastKind!
}

enum AppToastKind {
  ALERT
  WARNING
  SUCCESS
  INFORMATIONAL
}

interface AppTooltipInterface {
  """Optional header for the tooltip content"""
  header: String

  """Content for tooltip as an array of strings"""
  body: [String!]!

  """Optional AppLink at footer of tooltip content"""
  link: AppLink

  """The type of tooltip icon"""
  icon: AppImage!
}

type AppTooltip implements AppTooltipInterface {
  """Optional header for the tooltip content"""
  header: String

  """Content for tooltip as an array of strings"""
  body: [String!]!

  """Optional AppLink at footer of tooltip content"""
  link: AppLink

  """The type of tooltip icon"""
  icon: AppImage!
}

type ClientInfo {
  """The client identification string."""
  id: String!

  """The client type identifier."""
  type: String!

  """The client version string."""
  version: String!

  """The upgrade status for the client."""
  upgrade: ClientUpgradeStatusEnum!

  """An optional message about the upgrade status for the client."""
  upgradeMessage: String
}

"""A client upgrade status."""
enum ClientUpgradeStatusEnum {
  """No client version upgrade is necessary."""
  NONE

  """Client version upgrade is recommendend."""
  RECOMMENDED

  """Client version upgrade is required."""
  REQUIRED
}

type ContactUs {
  """The title for the screen."""
  title: String

  """Subtitle for the screen."""
  subtitle: String

  """A list of cards to be displayed on the Contact Us screen."""
  cards: [ContactUsCard]

  """
  A custom type to drive the content for the videos section of the Contact Us screen.
  """
  videoTutorialsSection: VideoTutorialsSection
}

enum ContactUsCardIdentifier {
  INSTANT_CHAT
  HELP_CENTER
  EMAIL_US
  CALL_US
}

type ContactUsCard {
  """
  An identifier that can be keyed off of to build dynamic client-side behavior.
  """
  identifier: ContactUsCardIdentifier!

  """The title of the given card."""
  title: String

  """An array of strings for the given card."""
  content: [String]

  """An optionally provided action label for a given card."""
  buttonLabel: String

  """
  An optionally provided url for a given card's CTA to route to. If null, handling should defined client-side.
  """
  buttonDestinationUrl: String
}

type VideoTutorialsSection {
  """Title of the Video Tutorials section."""
  title: String

  """Subtitle of the Video Tutorials section."""
  subtitle: String

  """Custom list of video(s) to be displayed."""
  videos: [Video]

  """Custom type for driving the 'view all' videos content."""
  viewAll: VideoTutorialsSectionViewAll
}

type VideoTutorialsSectionViewAll {
  """External URL to route the user to when they click 'View all'."""
  destination: String

  """Label to present the 'View all' URL as."""
  label: String
}

type Video {
  """Title for a given video."""
  title: String

  """Exact url for a given video."""
  url: String
}

type CreditCardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditCardEdge]
}

type CreditCardEdge {
  """The item at the end of the edge"""
  node: CreditCard
}

type CreditCard implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """When `true`, the `CreditCard` is in locked status."""
  isLocked: Boolean!

  """Last four digits of the credit card number."""
  lastFour: String!

  """The credit card network (i.e. Visa)."""
  network: CreditCardNetworkEnum!

  """The type of card issued."""
  cardType: CreditCardTypeEnum!

  """The status of the card."""
  status: CreditCardStatusEnum!
}

enum CreditCardNetworkEnum {
  """Visa"""
  VISA
}

enum CreditCardTypeEnum {
  """Physical card."""
  PHYSICAL

  """Virtual card."""
  VIRTUAL
}

enum CreditCardStatusEnum {
  """Pending."""
  PENDING

  """Verified."""
  VERIFIED

  """Locked."""
  LOCKED

  """Archived."""
  ARCHIVED

  """Activation Threshold Exceeded."""
  ACTIVATION_THRESHOLD_EXCEEDED
}

type CreditCardRewardsAppPill implements AppPillInterface {
  """The label to use when displaying this pill."""
  label: String!

  """
  The "kind" of pill to display. Refer to design documentation for specs.
  """
  kind: CreditCardRewardsAppPillKind!

  """Optional icon to display within the `CreditCardRewardsAppPill`"""
  icon: AppPillIcon
}

enum CreditCardRewardsAppPillKind {
  BRONZE
  PLATINUM
  GOLD
  OBSIDIAN
  NEUTRAL
}

type Earn implements Node {
  """The ID of this node."""
  id: ID!

  """
  The new marketing screen content for the Earn (HYSA + CA) overview page.
  """
  earnMarketingScreen: EarnMarketingScreen
}

type EarnMarketingScreen implements Node & MarketingScreen {
  """The ID of this node."""
  id: ID!

  """The header for a marketing screen."""
  header: String

  """An array of the content cards for a marketing screen."""
  productMarketingCards: [ProductMarketingCard]

  """An array of the disclosures for a marketing screen."""
  disclosures: [AppRichTextDisclosureLink]
}

type EmailVerificationPage {
  """Title for the email verification page"""
  title: String!

  """Content for the email verification page"""
  content: [String!]!

  """CTA label for the email verification page"""
  ctaLabel: String!

  """
  Illustration for the email verificaion page. If null, use emailVerifyInProcess from the DSR.
  """
  illustration: AppImage
}

type FeedbackForm implements Node {
  """The ID of this node."""
  id: ID!

  """
  Flag to determine if a user should see the feedback form (if null, default to false).
  """
  showFeedbackForm: Boolean
}

type InformationBanner {
  """Copy to display in the banner"""
  label: String!

  """
  The "kind" of banner to display. Refer to design documentation for specs.
  """
  kind: InformationBannerKind!

  """Icon for InformationBanner card."""
  icon: AppImage

  """
  Optional `AppLink` that includes the navigation action required by the user. Lens guarantees that only a link XOR button will be returned.
  """
  link: AppLink

  """
  Optional `AppButton` that includes the click event action required by the user. Lens guarantees that only a link XOR button will be returned.
  """
  button: AppButton
}

enum InformationBannerKind {
  """INFO"""
  INFO

  """CAUTION"""
  CAUTION

  """DANGER"""
  DANGER

  """SUCCESS"""
  SUCCESS
}

type InitialFunding {
  """
  Returns the bank connection experiment variant that the user has, control is the default.
  """
  initialFundingBankConnectionVariant: BankConnectionVariant! @deprecated(reason: "This feature flag is old and no longer in use.")

  """An object containing the content for the initial funding screens."""
  initialFundingScreens: InitialFundingScreens!
}

enum BankConnectionVariant {
  CONTROL
  REORDER
  REDUCTIVE
  ADDITIVE
}

type InitialFundingScreens {
  """Contains content for the overview screen of the initial funding flow."""
  initialFundingOverviewScreen(accountRegistration: AccountRegistrationEnum!): InitialFundingOverviewScreen

  """
  Contains content for the confirmation screen of the initial funding flow.
  """
  initialFundingConfirmationScreen(transferId: ID!): AppInfoPage

  """
  Contains content for the screen that displays if a user exits plaid flow voluntarily.
  """
  initialFundingIncompleteConnectionScreen(transferAmount: Float): AppInfoPage

  """
  Contains content for the screen that displays if a user uses microdeposits to connect bank.
  """
  initialFundingPendingPlaidConnectionScreen: AppInfoPage
}

type InitialFundingOverviewScreen {
  """The title to display on the page."""
  title: String!

  """
  A collection of content items that include a title,
  description (with or without embedded links) and an optional icon.
  """
  content: [InitialFundingOverviewScreenListItem!]

  """An analytics event that should be fired when the page is viewed."""
  pageViewAnalyticsEvent: AppAnalyticsEvent

  """Information for the primary cta button on the screen."""
  primaryCtaButton: AppButton

  """Information for the secondary cta button on the screen."""
  secondaryCtaButton: AppButton

  """The skip cta icon ('X') at the top of the screen."""
  skipCta: AppButton
}

type InitialFundingOverviewScreenListItem {
  """An optional icon to display to the left of the items title."""
  icon: AppImage

  """The title of the content item."""
  title: String!

  """The description copy of the content item. Can contain inline links."""
  description: RichTextContent
}

type IrsRegulations {
  """A list of currently-available IRA contribution years."""
  iraContributionYears: [IraContributionYear!]!

  """
  A list of currently-available IRA excess contribution withdrawal years.
  """
  iraExcessContributionRemovalYears: [IraExcessContributionRemovalYear!]!
}

"""Information about an IRA contribution year."""
type IraContributionYear {
  """The year."""
  year: Int!

  """The annual contribution limit for people under 50 years old."""
  limitUnder50: Float!

  """The annual contribution limit for people over 50 years old."""
  limitOver50: Float!

  """True if this is the current contribution year."""
  isCurrent: Boolean!
}

"""Information about an IRA excess contribution withdrawal year"""
type IraExcessContributionRemovalYear {
  """The year."""
  year: Int!

  """True if this is the current contribution year."""
  isCurrent: Boolean!
}

type ListItem {
  """
  Optional description text to render under the header labels of the list item
  """
  description: String @deprecated(reason: "Use descriptionV2 instead")

  """
  Optional subtext text to render under the header labels of the list item
  """
  descriptionV2: [RichTextContent!]

  """Icon for the card."""
  icon: AppImage

  """Left aligned header text for the list item."""
  header: String

  """Right aligned header text for the list item."""
  headerRight: String

  """An optional pill to render at the top of the list item."""
  pill: AppPill

  """An optional size specification for the list item."""
  size: ListItemSize

  """Subheader text for the card."""
  subheader: String

  """A list of bullet points to nest under the subheader"""
  subheaderItems: [String!]

  """The value that the card represents."""
  value: String

  """An analytics event to fire when the given Product is clicked."""
  analyticsEventClick: AppAnalyticsEvent

  """Whether the list item is disabled or not"""
  disabled: Boolean!

  """A link to navigate to when the list item is clicked."""
  link: AppLink
}

enum ListItemSize {
  SMALL
  MEDIUM
  LARGE
}

"""Represents a mailing address for a user."""
type MailingAddress {
  """Line one of the street address."""
  lineOne: String!

  """Line two of the street address."""
  lineTwo: String

  """The city."""
  city: String!

  """The state (or other subdivision)."""
  stateOrProvince: MailingAddressSubdivisionEnum!

  """The postal code."""
  postalCode: String!

  """The country."""
  country: MailingAddressCountryEnum!
}

"""A list of states (or other subdivisions) valid for a mailing address."""
enum MailingAddressSubdivisionEnum {
  """Alabama"""
  AL

  """Alaska"""
  AK

  """Arizona"""
  AZ

  """Arkansas"""
  AR

  """California"""
  CA

  """Colorado"""
  CO

  """Connecticut"""
  CT

  """Delaware"""
  DE

  """Florida"""
  FL

  """Georgia"""
  GA

  """Hawaii"""
  HI

  """Idaho"""
  ID

  """Illinois"""
  IL

  """Indiana"""
  IN

  """Iowa"""
  IA

  """Kansas"""
  KS

  """Kentucky"""
  KY

  """Louisiana"""
  LA

  """Maine"""
  ME

  """Maryland"""
  MD

  """Massachusetts"""
  MA

  """Michigan"""
  MI

  """Minnesota"""
  MN

  """Mississippi"""
  MS

  """Missouri"""
  MO

  """Montana"""
  MT

  """Nebraska"""
  NE

  """Nevada"""
  NV

  """New Hampshire"""
  NH

  """New Jersey"""
  NJ

  """New Mexico"""
  NM

  """New York"""
  NY

  """North Carolina"""
  NC

  """North Dakota"""
  ND

  """Ohio"""
  OH

  """Oklahoma"""
  OK

  """Oregon"""
  OR

  """Pennsylvania"""
  PA

  """Rhode Island"""
  RI

  """South Carolina"""
  SC

  """South Dakota"""
  SD

  """Tennessee"""
  TN

  """Texas"""
  TX

  """Utah"""
  UT

  """Vermont"""
  VT

  """Virginia"""
  VA

  """Washington"""
  WA

  """West Virginia"""
  WV

  """Wisconsin"""
  WI

  """Wyoming"""
  WY

  """District of Columbia"""
  DC

  """American Samoa"""
  AS

  """Guam"""
  GU

  """Northern Mariana Islands"""
  MP

  """Puerto Rico"""
  PR

  """U.S. Virgin Islands"""
  VI

  """United States Minor Outlying Islands"""
  UM

  """Federated States of Micronesia"""
  FM

  """Marshall Islands"""
  MH

  """Palau"""
  PW

  """Armed Forces Americas (except Canada)"""
  AA

  """Armed Forces Europe (covers all USARAEUR)"""
  AE

  """Armed Forces Pacific"""
  AP
}

"""A list of countries valid for a mailing address."""
enum MailingAddressCountryEnum {
  """United States of America"""
  USA
}

type Markets implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A list of index proxies."""
  indexProxies: [IndexProxy!]!

  """
  A list of recent market news stories, sorted in reverse chronological order.
  """
  news(first: Int, after: String): NewsConnection! @deprecated(reason: "Moving to a new nullable field in case of timeouts.")

  """
  A list of recent market news stories, sorted in reverse chronological order.
  """
  marketNews(first: Int, after: String): NewsConnection
}

"""Information about an index via a proxy fund."""
type IndexProxy {
  """The name of the index."""
  name: String!

  """The fund that acts as a proxy for the index."""
  proxy: Fund!
}

type NewsConnection {
  pageInfo: PageInfo!
  edges: [NewsEdge]
}

type NewsEdge {
  cursor: String!
  node: News
}

"""A news story."""
type News {
  """The date of the news story."""
  date: String!

  """The headline of the news story."""
  headline: String!

  """The source of the news story."""
  source: String!

  """An optional URL to a logo for the given source."""
  sourceLogoUrl: String

  """
  A short summary of the news story. Value is null when there is no summary
  available.
  """
  summary: String

  """The URL for the news story."""
  url: String!

  """An optional URL to an image that corresponds to the news story."""
  imageUrl: String

  """the news type"""
  newsType: NewsTypeEnum
}

enum NewsTypeEnum {
  """Article"""
  ARTICLE

  """Video"""
  VIDEO
}

interface Node {
  id: ID!
}

type Notifications implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Notification preferences."""
  preferences: NotificationPreferences
}

type NotificationPreferences implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """Preferences for transfer completion notifications."""
  transferCompletion: TransferCompletionNotificationPreferences

  """Preferences for Invest activity notifications."""
  investActivity: InvestActivityNotificationsPreferences

  """Preferences for Spend Checking transaction notifications."""
  spendTransaction: SpendTransactionNotificationPreferences
}

"""Preferences for transfer completion notifications."""
type TransferCompletionNotificationPreferences {
  """Send via push notification. Null means not available."""
  sendViaPush: Boolean

  """Send via email. Null means not available."""
  sendViaEmail: Boolean
}

"""Preferences for Invest activity notifications."""
type InvestActivityNotificationsPreferences {
  """Send via push notification. Null means not available."""
  sendViaPush: Boolean

  """Send via email. Null means not available."""
  sendViaEmail: Boolean
}

"""Preferences for Spend Checking transaction notifications."""
type SpendTransactionNotificationPreferences {
  """Send via push notification. Null means not available."""
  sendViaPush: Boolean

  """Send via email. Null means not available."""
  sendViaEmail: Boolean
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""A set of fields for editing a pie and confirming changes"""
type PieChangesConfirmation {
  """A message associated with the applicable locations section."""
  applicableLocationsMessage: String

  """A set of pie details for a given pie."""
  pieDetails: PieChangesConfirmationDetails

  """An object containing data about added or updated slices."""
  addedOrUpdated: PieChangesConfirmationAddedOrUpdated

  """An object containing data about removed slices."""
  removed: PieChangesConfirmationRemoved
}

type PieChangesConfirmationDetails {
  """
  Further details on changes to a pie's name. Null if value was not edited.
  """
  name: PieDetailsField

  """
  Further details on changes to a pie's description. Null if value was not edited.
  """
  description: PieDetailsField
}

type PieChangesConfirmationAddedOrUpdatedSlice {
  """The name of the slice."""
  name: String!

  """The symbol of the slice if applicable."""
  symbol: String

  """
  The existing percentage of a given slice, zero if the slice is to be added.
  New Field added to Move Slices, not implemented elsewhere yet.
  """
  oldPercentage: Float

  """
  The soon-to-be new percentage of the slice.
  New Field added to Move Slices, not implemented elsewhere yet.
  """
  percentage: Float

  """A pill used to represent if the slice was added or updated"""
  actionPill: AppPill

  """
  If available, a URL to a logo image that represents the Slice.
  New Field added to Move Slices, not implemented elsewhere yet.
  """
  logoUrl: String
}

type PieChangesConfirmationRemoved {
  """An array of removed slices."""
  slices: [PieChangesConfirmationRemovedSlice]!

  """A message associated with removed slices."""
  message: String @deprecated(reason: "Use messages instead")

  """Messages associated with removed slices."""
  messages: [RichTextContent!]
}

type PieDetailsField {
  """
  An AppPill to be provided conditionally if the user has performed an action on the given field.
  """
  actionPill: AppPill

  """The value of the pie details field."""
  value: String!
}

type PieChangesConfirmationRemovedSlice {
  """The name of the slice."""
  name: String!

  """The symbol of the slice if applicable."""
  symbol: String

  """The existing percentage of a slice."""
  oldPercentage: Float!

  """
  The new percentage of a slice, which will be zero for all removed slices.
  """
  newPercentage: Float!

  """A snapshot value of the slice."""
  value: Float

  """If available, a URL to a logo image that represents the pie."""
  logoUrl: String
}

type PieChangesConfirmationAddedOrUpdated {
  """An array of slices that were added or updated."""
  slices: [PieChangesConfirmationAddedOrUpdatedSlice]!

  """A message associated with added or updated slices."""
  message: String @deprecated(reason: "Use messages instead")

  """Messages associated with added or updated slices."""
  messages: [RichTextContent!]
}

type ProductMarketingCard {
  """The optional card icon for a marketing screen card."""
  illustration: AppImage

  """The main title for a marketing screen card."""
  title: String

  """The title tooltip for a marketing screen card."""
  titleTooltip: String

  """The subtitle for a marketing screen card."""
  subtitle: String

  """
  The CTA destination deep link (button styling) for a marketing screen card.
  """
  primaryCtaButton: AppLink

  """
  The CTA destination deep link (text styling) for a marketing screen card.
  """
  secondaryCtaButton: AppLink

  """A (card displayed) analytics event for a marketing screen card"""
  analyticsEvent: AppAnalyticsEvent
}

type RequiredDocumentsBundle implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The list of individual documents in this bundle."""
  documents: [RequiredDocument!]!

  """Copy to be displayed after the document list."""
  postamble: String

  """Copy to be displayed before the document list."""
  preamble: String

  """The unique signature for this bundle of documents & legal agreements."""
  signature: String!

  """
  Copy to be displayed after the document list that implements Rich Text.
  """
  richPostamble: [RichTextContent!]
}

type RequiredDocument {
  """The title of the document or legal agreement."""
  title: String!

  """The URL of the document or legal agreement."""
  url: String!
}

type RichTextContent {
  """
  Array of rich text scalars or components for rendering inline on clients.
  """
  content: [RichTextUnion]
}

"""A union of possible components for rendering inline on clients."""
union RichTextUnion = Text | AppButton | AppLink | AppShareButton | AppTooltip | AppRichTextDisclosureLink

"""The disclosures and agreements page under settings."""
type DisclosuresAndAgreementsPage {
  """The agreements bundle for the HYSA product."""
  hysaAgreements: AgreementBundle

  """The agreements bundle for the cash account product."""
  cashAccountAgreements: AgreementBundle

  """The agreements bundle for the credit card product."""
  creditCardAgreements: AgreementBundle

  """The agreements bundle for the crypto product."""
  cryptoAgreements: RequiredDocumentsBundle

  """The agreements bundle for the promotional product."""
  promotionalAgreements: RequiredDocumentsBundle
}

type FullyPaidLendingPage {
  """The title of the Fully Paid Securities Lending page."""
  title: String!

  """The subtitle of the Fully Paid Securities Lending page."""
  subtitle: String!

  """A banner to display contextual messages about Fully Paid Lending."""
  banner: InformationBanner

  """The link to the Fully Paid Securities Lending page."""
  helpLink: AppLink

  """Contains the copy + icon for the income earned description."""
  incomeEarnedSection: FullyPaidLendingIncomeEarnedSection!

  """
  A collection of objects that group accounts with their stock loan holdings.
  """
  accountStockLoanHoldings: [AccountStockLoanHoldingGroup!]

  """
  Contains information about the user's current FPL program participation status.
  """
  optInSection: FullyPaidLendingOptInSection
}

type AccountStockLoanHoldingGroup {
  """
  A message to display when there are no active stock loans for the account.
  """
  emptyGroupMessage: String

  """The header copy for the grouping of loans."""
  header: String!

  """A collection of StockLoans for the brokerage account."""
  stockLoans: [StockLoan!]
}

type FullyPaidLendingIncomeEarnedSection {
  """The income earned message copy."""
  content: String!

  """The icon to display before the interest earned copy."""
  icon: AppImage
}

type StockLoan {
  """The number of shares on loan."""
  quantity: Float

  """Information on the security that matches the stock loan."""
  securityReference: SecurityReference!
}

type FullyPaidLendingOptInSection {
  """Content to present when a user shows intent to opt-in to FPL."""
  confirmContent: FullyPaidLendingOptInSectionConfirmContent!

  """Label for the CTA to begin opt-in."""
  ctaLabel: String!
}

type FullyPaidLendingOptInSectionConfirmContent {
  """Label to display next to the UI element signaling user agreement."""
  agreementLabel: String!

  """Label for the CTA to cancel opt-in."""
  cancelCtaLabel: String!

  """Label for the CTA to confirm opt-in."""
  confirmCtaLabel: String!

  """Content to present when a user is in the opt-in flow.."""
  content: RichTextContent! @deprecated(reason: "Utilize `contentV2` instead.")

  """Content to present when a user is in the opt-in flow.."""
  paragraphs: [RichTextContent!]!

  """Title to present when a user is in the opt-in flow.."""
  title: String
}

type InvestSettingsPage {
  """
  UI information for the Fully Paid Securities Lending page under invest settings.
  """
  fullyPaidLending: FullyPaidLendingPage
}

type PlatformBillingPage {
  """Header for the platform billing page"""
  header: PlatformBillingPageHeader!

  """
  The billing methods section with content describing the payment methods available to the user
  """
  billingMethodSection: PlatformBillingMethodSection

  """Platform billing history for the user."""
  billingHistorySection: PlatformBillingHistorySection

  """Banner that appears when a user has had a payment fail"""
  paymentFailureBanner: InformationBanner
}

type PlatformBillingPageHeader {
  """The title of the page"""
  title: String

  """
  An array of strings that can provide billing and billing cycle information
  """
  subtitles: [String]
}

type PlatformBillingMethodSection {
  """Icon that precedes the platform billing method title copy"""
  titleIcon: AppImage

  """Static copy for the payment method dropdown"""
  title: String

  """The list of eligible transfer participants"""
  billingMethods: TransferParticipantList

  """
  Transfer Particpant ID for the preferred payment method, will be null if no method is selected
  """
  preferredPaymentMethodId: ID

  """
  Static copy that informs users that an account will be chosen to pay the fee if payment with the current method fails
  """
  subtitle: String

  """A list of disclosures"""
  disclosures: [AppRichTextDisclosureLink!]

  """A list of links"""
  links: [AppLink!]
}

type PlatformBillingHistorySection {
  """Icon that precedes the platform billing history title copy"""
  titleIcon: AppImage

  """Billing history table title"""
  title: String

  """An array of billing history items"""
  billingHistory(first: Int, after: String): PlatformBillingHistoryEntryConnection

  """
  Dynamic fallback copy in case there is no billing history or it fails to load
  """
  billingHistoryFallbackCopy: String
}

type PlatformBillingHistoryEntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlatformBillingHistoryEntryEdge]
}

type PlatformBillingHistoryEntryEdge {
  cursor: String!

  """The item at the end of the edge"""
  node: PlatformBillingEntry
}

type PlatformBillingEntry implements Node {
  """The ID of this node."""
  id: ID!

  """List item details for the billing entry."""
  listItem: ListItem
}

type Settings implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """UI information for the Disclosures and Agreements page."""
  disclosuresAndAgreements: DisclosuresAndAgreementsPage

  """UI information for the Invest settings page"""
  invest: InvestSettingsPage

  """An optional Plus promotional message."""
  plusPromotionForSettings: PlusPromotionalMessage

  """UI information for the Platform Billing page"""
  platformBilling: PlatformBillingPage
}

type SharePieLandingPageScreen {
  """The header for the share pie landing page screen."""
  header: SharePieLandingPageHeader!

  """
  The analytics event that fires off when you view the share pie landing page screen.
  """
  pageViewAnalyticsEvent: AppAnalyticsEvent

  """The pie title for the share pie landing page screen."""
  pieTitle: String

  """The banner for the share pie landing page screen if pie is delisted."""
  delistedPieBanner(shareToken: String): InformationBanner

  """The log in banner for the share pie landing page screen."""
  logInBanner: SharePieLogInBanner

  """The marketing details for the share pie landing page screen."""
  marketingDetails: SharePieMarketingDetails!

  """The disclosures for the share pie landing page screen."""
  disclosures: AppLink

  """The disclosures for the share pie landing page screen."""
  disclosuresFooter: AppRichTextDisclosureLink
}

type SharePieLandingPageHeader {
  """The text for a Share Pie Landing page header"""
  text: String

  """The icon for a Share Pie Landing Page Header"""
  icon: AppImage

  """The ctaButton for a Share Pie Landing Page Header"""
  ctaButton: AppButton
}

type SharePieLogInBanner {
  """The title for a Share Pie Log In Banner"""
  title: String

  """The description for a Share Pie Log In Banner"""
  description: String

  """The primary cta for a Share Pie Log In Banner"""
  primaryCTA: AppButton

  """The log in CTA for a Share Pie Log In Banner"""
  logInCTA: AppButton

  """The disclosure for a Share Pie Log In Banner"""
  createAccountDisclosure: [RichTextContent!]

  """The illustration for a Share Pie Log In Banner"""
  illustration: AppImage
}

type SharePieMarketingDetails {
  """The title for a Share Pie Marketing Details"""
  title: String

  """The marketing content details for a Share Pie Marketing Details"""
  marketingContent: [SharePieMarketingContent!]
}

type SharePieMarketingContent {
  """The title for a Share Pie Marketing Content"""
  title: String

  """The description for a Share Pie Marketing Content"""
  description: String

  """The illustration for a Share Pie Marketing Content"""
  illustration: AppImage
}

type Support implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  The support phone number that should be displayed to a user. When null, no
  phone number should be displayed.
  """
  phoneNumber: PhoneNumber
}

"""A system status."""
enum SystemStatusEnum {
  """System functionality is normal."""
  NORMAL

  """System functionality is temporarily degraded."""
  DEGRADED

  """System functionality is temporarily disrupted."""
  DISRUPTED

  """System is under scheduled maintenance."""
  MAINTENANCE
}

"""A system functionality area."""
enum SystemFunctionalityEnum {
  """Open account"""
  OPEN_ACCOUNT
}

"""Information about the system."""
type SystemInfo {
  """
  A list of specific functionality areas that are currently blocked. If the
  value is empty array, ALL functionality is blocked. If the value is null, NO
  functionality is blocked.
  """
  blockedFunctionality: [SystemFunctionalityEnum!]

  """True if the current system status blocks some or all functionality."""
  isStatusBlocking: Boolean!

  """The overall status of the system."""
  status: SystemStatusEnum!

  """An optional message about the current status of the system."""
  statusMessage: String

  """The system version."""
  version: String!
}

type TabularDataItem {
  """The title for a Tabular Data Item"""
  title: String

  """The title link for a Tabular Data Item"""
  titleLink: AppLink

  """The value for a Tabular Data Item"""
  value: String

  """The value link for a Tabular Data Item"""
  valueLink: AppLink

  """The tooltip for a Tabular Data Item"""
  tooltip: AppTooltip

  """Rich text tablular data item value"""
  richTextValue: RichTextContent

  """Icon for the tabular data item value"""
  valueIcon: AppImage
}

type TabularDataSection {
  """The header for a Tabular Data Section"""
  header: String

  """The array of details for a Tabular Data Section"""
  details: [TabularDataItem]
}

type Text {
  """The content text for the Text instance."""
  text: String

  """
  Optional color of the text instance. When null, please use client specified color.
  """
  color: String

  """
  The font size of the text as a string
  "HXL" | "HL" | "HM" | "HS" | "HXS" | "HXXS" | "PXL" | "PL" | "PM" | "PS" | "PXS" | "LL" | "LM" | "LS"
  """
  font: String

  """
  The font weight as a string. Using TS types, Lens enforces that only valid font weights are used for each font size,
  but clients should use the font size's default font weight if no font weight or if it's invalid.
  """
  fontWeight: String
}

type Unauthenticated implements Node {
  """The ID of this node"""
  id: ID!

  """Promotion content; Requires a promo code to serve the correct content"""
  promotions(promoCode: String): Promotions

  """Share Pie Landing page content"""
  sharePieLandingPage(shareToken: String): SharePieLandingPageScreen!
}

type PromotionSignUpPage {
  """Header for the sign up page"""
  header: [String]

  """Disclosures for the sign up page"""
  disclosures: [AppDisclosureLink]

  """Document bundle for the sign up page"""
  termsAndConditions: RequiredDocumentsBundle!

  """Label for the primary action for the sign up page"""
  primaryCtaLabel: String

  """Copy that goes under the illustration on the sign up page"""
  marketingContent: [RichTextContent]

  """Promotion page illustration"""
  illustration: AppImage
}

type ValuePropCard {
  """Title for the card"""
  title: String

  """Illustration for the card"""
  illustration: AppImage

  """Primary value prop section for the card"""
  primaryValue: PrimaryValue

  """A list of values realated to the value prop"""
  details: [ValueRow!]
}

type PrimaryValue {
  """Primary value prop for the card"""
  value: String

  """
  The nullable primary value color for the card - liquid semantic color naming used
  """
  valueColor: String

  """Description for primary value prop for the card"""
  description: String

  """
  The nullable primary value description color for the card - liquid semantic color naming used
  """
  descriptionColor: String

  """The accessory tooltip for the primary value prop"""
  tooltip: AppTooltip
}

type ValueRow {
  """The label for the row"""
  label: String

  """
  The nullable label color for the row - liquid semantic color naming used
  """
  labelColor: String

  """The accessory tooltip for the row"""
  tooltip: AppTooltip

  """The value for the row"""
  value: String

  """
  The nullable value color for the row - liquid semantic color naming used
  """
  valueColor: String
}

type AgreementBundle implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The unique signature for this bundle of legal agreements."""
  signature: String!

  """
  A description of this agreement bundle that suitable for displaying to the
  user. Value is null when there is no description.
  """
  description: String

  """The list of individual documents in this bundle."""
  documents: [AgreementDocument!]!
}

"""Information about a legal agreement document."""
type AgreementDocument {
  """The title of the agreement document."""
  title: String!

  """The URL of the agreement document."""
  url: String!
}

"""Information about legal agreement status for a specific user."""
type AgreementStatus implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  True when re-agreement is necessary from the user to maintain open accounts.
  """
  isNewAgreementRequired: Boolean!

  """
  True when the user has missed the deadline date for necessary re-agreement.
  """
  isPastDeadline: Boolean!

  """The deadline date by which agreement is required."""
  deadlineDate: String
}

"""An announcement to display to the user."""
type Announcement implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A short title for the announcement."""
  title: String!

  """A description of the announcement, if present."""
  description: String

  """Text that describes the time of the announcement, if applicable."""
  timeDescription: String

  """An optional link related to the announcement."""
  link: AnnouncementLink @deprecated(reason: "Use `appLink` instead.")

  """An optional link related to the announcement."""
  appLink: AppLink

  """The icon that should be displayed for the announcement."""
  icon: AnnouncementIconEnum @deprecated(reason: "Use `announcementIcon` instead.In MA, we need to update the announcement config to support returning an AppImage so we can safely deprecate this field in favor of AppImage.")

  """The icon that should be displayed for the announcement."""
  announcementIcon: AppImage

  """The tag that should be displayed for the announcement."""
  tag: AnnouncementTagEnum

  """The appearance that should be used for the announcement."""
  appearance: AnnouncementAppearanceEnum

  """When true, and applicable, a modal presentation should be used."""
  displayAsModal: Boolean @deprecated(reason: "Use `displayPreference` instead.")

  """The type of announcement to display (modal, banner, etc.)."""
  displayPreference: AnnouncementDisplayPreferenceEnum

  """
  Passes a call to action to the client. This action should be taken
  when the user clicks on the announcement's button.
  """
  action: AppAction

  """The analytics event for when announcement is displayed."""
  displayAnalyticsEvent: AppAnalyticsEvent
}

"""An icon for an announcement."""
enum AnnouncementIconEnum {
  """General"""
  GENERAL

  """Plus"""
  PLUS

  """Transfers"""
  TRANSFERS

  """Invest"""
  INVEST

  """Borrow"""
  BORROW

  """Spend"""
  SPEND

  """Gift"""
  GIFT

  """Tada"""
  TADA

  """Bank"""
  BANK

  """Upload Documents"""
  UPLOAD_DOCUMENTS

  """Confirm Documents"""
  CONFIRM_DOCUMENTS

  """Email"""
  EMAIL

  """M1 Elevated"""
  M1_ELEVATED

  """Schedule Call"""
  SCHEDULE_CALL

  """Ribbon Promo Elevated"""
  RIBBON_PROMO_ELEVATED

  """Gift Promo Elevated"""
  GIFT_PROMO_ELEVATED
}

enum AnnouncementDisplayPreferenceEnum {
  """Banner type announcement display."""
  BANNER

  """Modal type announcement display."""
  MODAL

  """Nudge type announcement display."""
  NUDGE
}

"""An appearance for an announcement."""
enum AnnouncementAppearanceEnum {
  """Promotion - neutral"""
  PROMO_NEUTRAL

  """Promotion - cool"""
  PROMO_COOL

  """Promotion - warm"""
  PROMO_WARM
}

"""A tag for an announcement."""
enum AnnouncementTagEnum {
  """Alert"""
  ALERT

  """New"""
  NEW

  """Plus"""
  PLUS
}

type AnnouncementExternalLink implements AnnouncementLink {
  """The title to display for the link."""
  title: String!

  """The link URL."""
  url: String!
}

type AnnouncementInternalLink implements AnnouncementLink {
  """The title to display for the link."""
  title: String!

  """The link URL."""
  url: String!

  """The path part of the link URL."""
  path: String!
}

"""A link related to an announcement."""
interface AnnouncementLink {
  """The title to display for the link."""
  title: String!

  """The link URL."""
  url: String!
}

type AnnouncementSupportLink implements AnnouncementLink {
  """The title to display for the link."""
  title: String!

  """The link URL."""
  url: String!

  """The support article ID part of the link URL."""
  articleId: String!
}

type Announcements implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The user has at least one announcement in the list."""
  hasAny: Boolean

  """There are new announcements for the user in the list."""
  hasNew: Boolean

  """A list of announcements for the user, in priority order."""
  list(first: Int, after: String): AnnouncementConnection

  """An announcement to display about Transfers, if present."""
  forTransfers: Announcement

  """An announcement to display about Move Money, if present."""
  forMoveMoney: Announcement

  """An announcement to display about Invest, if present."""
  forInvest: Announcement

  """An announcement to display about Borrow, if present."""
  forBorrow: Announcement

  """An announcement to display about Spend, if present."""
  forSpend: Announcement

  """An announcement to display about Referrals, if present."""
  forReferrals: Announcement

  """An announcement to display about Plus, if present."""
  forPlus: Announcement

  """An announcement to display about Documents, if present."""
  forDocuments: Announcement

  """An announcement to display about Overview (Nudge), if present."""
  forHome: Announcement

  """An announcement to display about Overview (Modal), if present."""
  forHomeModal: Announcement

  """An announcement to display about Personal Loans, if present."""
  forPersonalLoans: Announcement

  """An announcement to display about Save, if present."""
  forSave: Announcement

  """An announcement to display about Invest Marketing, if present."""
  forInvestMarketing: Announcement

  """An announcement to display about Save Marketing, if present."""
  forSaveMarketing: Announcement

  """An announcement to display about Borrow Marketing, if present."""
  forBorrowMarketing: Announcement
}

type AnnouncementConnection {
  pageInfo: PageInfo!
  edges: [AnnouncementEdge]
}

type AnnouncementEdge {
  cursor: String!
  node: Announcement
}

type BorrowBillConnection {
  pageInfo: PageInfo!
  edges: [BorrowBillEdge]
}

type BorrowBillEdge {
  cursor: String!
  node: BorrowBill
}

"""Information about a Borrow billing period that has ended."""
type BorrowBill {
  """The start time of the billing period as an ISO 8601 timestamp."""
  startDate: String!

  """The end time of the billing period as an ISO 8601 timestamp."""
  endDate: String!

  """The bill due time of the billing period as an ISO 8601 timestamp."""
  dueDate: String

  """True when the bill is currently due."""
  isDue: Boolean

  """A description of the interest rate or range of rates for the period."""
  rateDescription: String

  """The total amount of interest accrued during the billing period."""
  amount: Float!
}

"""Information about a Borrow billing period that has not yet ended."""
type BorrowUpcomingBill implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The start time of the billing period as an ISO 8601 timestamp."""
  startDate: String!

  """The end time of the billing period as an ISO 8601 timestamp."""
  endDate: String!

  """The bill due time of the billing period as an ISO 8601 timestamp."""
  dueDate: String

  """The total amount of interest accrued so far during the billing period."""
  totalInterestToDate: Float

  """
  The projected total interest accrued at the end time of the billing period if
  the margin extended amount and the interest rate does not change. The value
  may be null when it is temporarily unavailable.
  """
  projectedTotalInterest: Float

  """If applicable, a special message regarding the current billing period."""
  specialMessage: String

  """An optional Plus promotional message."""
  plusPromotion: PlusPromotionalMessage @deprecated(reason: "Use `plusPromotionForBilling` instead.")

  """An optional Plus promotional message."""
  plusPromotionForBilling: PlusPromotionalMessage
}

type AccountFundingTotals implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A summary of funding activity by year, in chronological order."""
  totalsByYear: [FundingTotalForYear!]!
}

type FundingTotalForYear {
  """The calendar year."""
  year: Int!

  """The total dollar amount of deposits during the calendar year."""
  totalDeposits: Float!

  """The total dollar amount of withdrawals during the calendar year."""
  totalWithdrawals: Float!
}

"""Information about a trading pause."""
type AccountTradingPause implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The pause reason title."""
  title: String!

  """An optional description of the pause reason."""
  description: String

  """An optional link related to the pause reason."""
  link: AccountTradingPauseLink @deprecated(reason: "Use `appLink` instead.")

  """An optional link related to the pause reason."""
  appLink: AppLink

  """An optional message further detailing reasons for the pause."""
  pauseMessage: AccountTradingPauseMessage

  """An optional second link to a more comprehensive FAQ article."""
  faqLink: AppLink
}

"""A descriptive message with a link for account pause."""
type AccountTradingPauseMessage {
  """The description for the trading pause message."""
  description: String!

  """The link for the trading pause message."""
  appLink: AppLink
}

"""A link related to a pause reason."""
type AccountTradingPauseLink {
  """The title to display for the link."""
  title: String!

  """The link URL."""
  url: String!

  """If this is an internal URL, the path part of the URL. Null otherwise."""
  internalPath: String

  """If this is a support URL, the article ID in the URL. Null otherwise."""
  articleId: String
}

type ChartableSliceData implements Node {
  """The ID of this node"""
  id: ID!

  """The internal key of this node"""
  key: String

  """The name of the series"""
  name: String

  """
  The id of the series for charting purposes. For example, if you need to tie two series together by ID, you can use this field. If this value is null, it does not have additional data series that need to refer to it.
  """
  seriesId: String

  """
  The id of the series that this series pertains too for charting purposes. Only used for `additionalData` series. If this value is null, this series does not refer to any "parent" series.
  """
  onSeriesId: String

  """Chartable data for the series"""
  data: [ChartableSliceDatum!]

  """
  The type of data. More specific than `seriesType`. If this is null, there should be no special handling of this type of data besides the default and `chartSeries` handling.
  """
  dataType: DataTypeEnum

  """
  The type of series which determines how the data should render. If the value is null, it should default to a line chart.
  """
  seriesType: SeriesTypeEnum

  """
  Additional series of data to accompany this series. For example, a time series of dividends that are tied to a series of value history.
  """
  additionalData: [ChartableSliceData]
}

enum DataTypeEnum {
  DIVIDEND
  NET_CASH_FLOW
}

enum SeriesTypeEnum {
  """
  A chart of event flags that may be related to another series and may have large gaps.
  
  For example, dividends, splits, corporate actions, trades, etc. that happen on specific dates.
  """
  FLAG_EVENTS
}

type ChartableSliceDatum {
  """The date of this datum"""
  date: String!

  """The volume of this datum"""
  volume: Int

  """The open price of this datum"""
  open: Float

  """The high price of this datum"""
  high: Float

  """The low price of this datum"""
  low: Float

  """The close price of this datum"""
  close: Float

  """The previous close price of this datum"""
  previousClose: Float

  """The sum of dividends for a single chart datum"""
  sumDividends: Float!

  """The dividend distributed on this datum"""
  dividends: [HistoricalDividend!]

  """The split that occurred on this datum"""
  splits: [HistoricalSplit!]

  """The sum of trades (cash flow) for a single chart datum"""
  sumTrades: Float!

  """The trades that occurred on this datum"""
  trades: [TradeCashFlow!]
}

"""Information about a custodial account's beneficiary."""
type CustodialAccountBeneficiary implements Node {
  key: String

  """The ID of the Node"""
  id: ID!

  """The first (given) name of the beneficiary."""
  firstName: String!

  """The middle name of the beneficiary."""
  middleInitial: String

  """The last (family) name of the beneficiary."""
  lastName: String!

  """The suffix of the beneficiary's name."""
  suffix: NameSuffixEnum

  """The beneficiary's date of birth, in the format of `YYYY-MM-DD`."""
  dateOfBirth: String!

  """The custodial account beneficiary's country of citizenship."""
  countryOfCitizenship: String!

  """The legal home address of the beneficiary."""
  legalResidence: MailingAddress!

  """
  Nicely formatted string to display the custodial account beneficiary's legal residence.
  """
  formattedLegalResidence: String!
}

"""Information about a historical dividend for a security."""
type HistoricalDividend {
  """The declared date for the dividend. Value is null when unavailable."""
  declaredDate: String

  """The ex date for the dividend."""
  exDate: String!

  """The record date for the dividend. Value is null when unavailable."""
  recordDate: String

  """The payment date for the dividend. Value is null when unavailable."""
  paymentDate: String

  """The type of dividend."""
  type: DividendTypeEnum!

  """The dividend amount."""
  amount: Float!

  """The frequency of the dividend. Value is null when unavailable."""
  frequency: DividendFrequencyEnum

  """
  The date and time the dividend was effective, the same day as the exDate
  """
  effectiveDate: String

  """The symbol of the stock giving the dividend"""
  symbol: String

  """The currency of the dividend"""
  currency: String

  """Deprecated! Always returns null."""
  indicatedRate: Float @deprecated(reason: "Data is no longer supported.")
}

type HistoricalQuote {
  """The date for the historical quote."""
  date: String!

  """The daily opening price."""
  openPrice: Float!

  """The daily closing price."""
  closePrice: Float!

  """The close price for the previous day."""
  previousQuoteClosePrice: Float

  """The daily high price."""
  highPrice: Float!

  """The daily low price."""
  lowPrice: Float!

  """The change between the daily open price and close price."""
  dailyChange: Float!

  """The percent change between the daily open price and close price."""
  dailyPercentChange: Float!

  """The close price of the day before the start of the period."""
  previousClosePrice: Float

  """
  The change between the price at the close before the beginning
  of the period and the current price.
  """
  changeInPriceFromPeriodOpen: Float

  """
  The percent change between the close before the beginning of the
  period and the current price.
  """
  percentChangeFromBeginningOfPeriod: Float

  """Deprecated! Always returns zero."""
  tradeVolume: Float! @deprecated(reason: "Data is no longer supported.")

  """The number of shares traded during the day."""
  shareVolume: Float!

  """Deprecated! Always returns zero."""
  vwap: Float! @deprecated(reason: "Data is no longer supported.")

  """A list of dividends with ex dates on this day."""
  dividends: [HistoricalDividend!]!

  """
  Information about a stock split with an ex date on this day, if one occurred.
  Value is null when no stock split occurred on this day.
  """
  split: HistoricalSplit

  """The daily closing price of the security."""
  lastPrice: Float! @deprecated(reason: "Field is renamed to `closePrice`.")

  """The number of trades during the day."""
  volume: Float! @deprecated(reason: "Field is renamed to `tradeVolume`.")

  """Deprecated! Always returns zero."""
  changeFromPreviousClosePrice: Float! @deprecated(reason: "Data is no longer supported.")

  """Deprecated! Always returns zero."""
  percentChangeFromPreviousClosePrice: Float! @deprecated(reason: "Data is no longer supported.")

  """Deprecated! Always returns `USD`."""
  currency: String! @deprecated(reason: "Data is no longer supported.")
}

"""Information about a historical stock split for a security."""
type HistoricalSplit {
  """The declared date for the split. Value is null when unavailable."""
  declaredDate: String

  """Deprecated! Always returns null."""
  recordDate: String @deprecated(reason: "Data is no longer supported.")

  """Deprecated! Always returns zero."""
  paymentDate: String @deprecated(reason: "Data is no longer supported.")

  """The ex date for the split."""
  exDate: String!

  """The split factor, expressed as a single string. For example, `2:1`."""
  factor: String!

  """The "to-factor" for the split. For example, `2` for a `2:1` split."""
  toFactor: Float!

  """The "for-factor" for the split. For example, `1` for a `2:1` split."""
  forFactor: Float!

  """The split ratio, equal to the for-factor divided by the to-factor."""
  ratio: Float!

  """The symbol of the split stock"""
  symbol: String
}

type IraContributionLimits implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """The IRA contribution limit for the current year."""
  currentYearLimit: Float
}

type IraContributionTotals implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """A summary of IRA contributions by year, in chronological order."""
  totalsByYear: [IraContributionTotalForYear!]!
}

type IraContributionTotalForYear {
  """
  The IRA contribution year. Note that this is different than the calendar year.
  """
  year: Int!

  """The total dollar amount of contributions for this contribution year."""
  totalContribution: Float!

  """The maximum contribution amount for this contribution year."""
  maxContribution: Float!
}

type IraWithholding {
  """Default Federal Withholding"""
  defaultFederalWithholding: Float!

  """Default State Withholding"""
  defaultStateWithholding: Float!

  """Is the State withholding the same as federal"""
  isStateEditable: Boolean!

  """State withholding information"""
  stateWithholdingInformationText: String

  """Tax withholding information Link"""
  iraWithholdingLink: AppLink

  """State withholding information Link"""
  stateWithholdingInformationLink: AppLink
}

"""Options for setting the portfolio on an account."""
type SetPortfolioOptions {
  """True if starting by browsing user pies should be offered."""
  shouldOfferUserPies: Boolean

  """If applicable, information about a starter pie slice to offer."""
  starterPieSlice: StarterPieSliceOption @deprecated(reason: "starterPieSlice is no longer in use.")
}

"""Information about a starter pie slice."""
type StarterPieSliceOption {
  """A title for the option."""
  title: String!

  """A description for the option, if available."""
  description: String

  """The pie to use as a starter slice."""
  pie: Pie!
}

type TradeCashFlow {
  """The amount of cash traded"""
  amount: Float!

  """The date the trade occurred"""
  effectiveDate: String!

  """The date the trade was created"""
  createdDateTime: String!

  """The trade window job ID of the trade"""
  tradeWindowJobId: String!

  """The symbol of the trade"""
  symbol: String!
}

type BreakdownDetail {
  """Breakddown label"""
  label: String

  """Breakdown value - formatted string"""
  labelValue: String

  """Breakdown value - raw numeric value"""
  numericValue: Float

  """Breakdown tooltip"""
  tooltip: AppTooltip
}

"""Breakdown of an order for manual orders"""
type ManualOrderBreakdown {
  """Slice name label and total value - as a string and number"""
  slice: BreakdownDetail

  """
  Cash order buying power label and value - as a string and number
  This value is clamped to be 0 or greater.
  """
  cashBuyingPower: BreakdownDetail

  """
  Unclamped cash buying power label and value - as a string and number
  This value respects any negative cash buying power from backend.
  This value should **not** be used for display purposes!
  For example, buy buttons should be disabled if this value is negative.
  """
  unclampedCashBuyingPower: BreakdownDetail

  """Margin order buying power label and value - as a string and number"""
  marginBuyingPower: BreakdownDetail

  """Total order buying power label and value - as a string and number"""
  totalBuyingPower: BreakdownDetail

  """
  Trade preference label and time of trade window when order will be executed
  """
  tradeWindow: BreakdownDetail

  """
  manual order disclosures - as rich text. order direction will determine what is resolved
  """
  disclosures: [RichTextContent!]
}

interface PortfolioSlice {
  """The account that owns this portfolio slice."""
  account: Account!

  """Portfolio slice landing page content"""
  investProductLandingPage: InvestProductLandingPage

  """
  Information about manual orders for this slice - buying power, slice value and trade window. Value is null when manual order information is unavailable.
  """
  manualOrderBreakdown(orderDirection: ManualPortfolioSliceOrderTypeEnum): ManualOrderBreakdown

  """
  The buying power for this portfolio slice - cash, margin & total. Value is null when the balance breakdown is temporarily unavailable.
  """
  buyingPower: PortfolioSliceBuyingPower!

  """Children slices of this slice."""
  children: [ChildPortfolioSlice]!

  """
  Former children slices of this slice. Upon next trading window, the holdings allocated to each former slice will be reallocated.
  """
  deallocatedChildren: [DeallocatedChild!]!

  """The ID of this node."""
  id: ID!

  """
  Information about the investments allocated to this portfolio slice. Value is null when allocated position information is unavailable.
  """
  investments: PortfolioSliceInvestments

  """True if this is the root portfolio slice for an account."""
  isRootSlice: Boolean!

  """A historical time-series of portfolio slice cash flows"""
  netCashFlows(
    """the type of cash flows for a portfolio slice"""
    filter: NetCashFlowFilterEnum

    """
    The historical time period over which to retrieve values, anchored by the present.
    """
    period: ValueHistoryPeriodEnum
  ): [ValueSnapshot]

  """
  The current trade order status for this portfolio slice. Value is null when the status is temporarily unavilable.
  """
  orderStatus: PortfolioSliceOrderStatus

  """
  Information about a pending cash flow for this slice, if there is one. Value is null when there are no pending cash flows.
  """
  pendingCashFlow: PortfolioSlicePendingCashFlow @deprecated(reason: "Functionality has been removed. Will be removed in the future.")

  """
  Performance information for this portfolio slice. Value is null when performance information is unavailable. The period must be large enough to accomodate the start and end dates provided, any range ending over a year ago will require a period of MAX.
  """
  performance(
    """The final date included in performance calculations."""
    endDate: String

    """
    The time period over which to calculate performance, anchored by the present.
    """
    period: PortfolioSlicePerformancePeriodEnum!

    """
    The first date included in performance calculations, an `endDate` is also required. Note: the `period` should be large enough to encompass the start and end dates.
    """
    startDate: String
  ): PortfolioSlicePerformance

  """
  The current trade order status for this portfolio slice. Value is null when the status is temporarily unavilable.
  """
  rebalanceStatus: PortfolioSliceRebalanceStatus

  """
  Points to the composition of the slice (either a `Security` or a `Pie`).
  """
  to: Sliceable!

  """
  Value information for this portfolio slice. Value is null when price information is unavilable.
  """
  value: PortfolioSliceValue

  """
  A historical time-series of market value snapshots for this portfolio slice.
  """
  valueHistory(
    """
    The historical time period over which to retrieve values, anchored by the present.
    """
    period: ValueHistoryPeriodEnum!
  ): [ValueSnapshot!]! @deprecated(reason: "Use `chartData` instead")

  """
  If true, this slice is currently marked for rebalancing at the next trade window.
  """
  willRebalance: Boolean! @deprecated(reason: "Superceded by `rebalanceStatus`, use that field instead.")
}

"""A portfolio slice's buying power - cash, margin & total"""
type PortfolioSliceBuyingPower {
  """Cash buying power label and value - as a string"""
  cash: TabularDataItem

  """Margin buying power label and value - as a string"""
  margin: TabularDataItem

  """Margin borrowed & rate text"""
  marginBorrowingText(borrowAmount: Float): String

  """Total Cash buying power label and value - as a string"""
  total: TabularDataItem

  """The overview of buying power for margin accounts."""
  overview: MarginBuyingPowerOverview
}

type MarginBuyingPowerOverview {
  """The title of the overview page, mobile only"""
  title: String

  """The header of the overview page"""
  header: String

  """An optional array of paragraphs that can explain margin buying power"""
  details: [RichTextContent!]

  """A breakdown of the margin buying power"""
  breakdown: MarginBuyingPowerOverviewBreakdown

  """An optional link about margin buying power"""
  link: AppLink

  """An optional paragraph about margin risk"""
  marginRisk: RichTextContent

  """
  An optional margin promotion card - if the user has accepted a margin promotion campaign
  """
  marginPromotionCard: [AppCard!]

  """The primary CTA for the margin overview page"""
  primaryCta: AppButton

  """The secondary CTA for the margin overview page"""
  secondaryCta: AppLink

  """The disclosure link for the margin overview page"""
  disclosures: [AppDisclosureLink!]

  """The analytics event to be fired on view of the margin overview page"""
  displayAnalyticsEvent: AppAnalyticsEvent
}

type MarginBuyingPowerOverviewBreakdown {
  """The header of the breakdown card"""
  header: String

  """The line items of the breakdown that are related to the total"""
  items: [BreakdownDetail!]

  """The total of the breakdown"""
  total: BreakdownDetail

  """The footer of the breakdown card, displayed below the card"""
  footer: RichTextContent
}

type PortfolioSliceValue {
  """
  The total value. Value is null if the total cannot currently be calculated.
  """
  total: Float

  """
  True if the total value is greater than zero. Value is null when `total` is
  null.
  """
  hasValue: Boolean
}

type AccountTaxLot {
  """The lot's M1 unique identifier."""
  id: String

  """Tax lot symbol"""
  symbol: String

  """Tax lot cusip"""
  cusip: String

  """Tax lot acquisition date"""
  acquisitionDate: String

  """Tax lot quantity"""
  quantity: Float

  """Tax lot cost basis"""
  costBasis: Float

  """Tax lot short or long indicator"""
  shortLongTermHolding: String

  """Tax lot closed date"""
  closeDate: String

  """Tax lot long term realized gain or loss"""
  longTermRealizedGainLoss: Float

  """Tax lot short term realized gain or loss"""
  shortTermRealizedGainLoss: Float

  """Tax lot unrealized gain or loss"""
  unrealizedGainLoss: Float

  """Tax lot wash sale indicator"""
  washSaleIndicator: Boolean
}

type AccountTaxLotsConnection {
  """A list of edges."""
  edges: [AccountTaxLotsEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of nodes in the connection."""
  totalCount: Int!
}

type AccountTaxLotsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: AccountTaxLot!
}

type AppDisclosureLink {
  """The link text for the disclosure link"""
  linkText: String!

  """
  The font size of the linkText as a string
  "HXL" | "HL" | "HM" | "HS" | "HXS" | "HXXS" | "PXL" | "PL" | "PM" | "PS" | "PXS" | "LL" | "LM" | "LS"
  """
  font: String

  """
  The font weight of the linkText as a string. Using TS types, Lens enforces that only valid font weights are used for each font size,
  but clients should use the font size's default font weight if no font weight or if it's invalid.
  """
  fontWeight: String

  """If true, the linkText should be underlined."""
  underline: Boolean!

  """
  The text for the disclosure link modal/dialogue as an array of paragraphs
  """
  paragraphs: [String!]!
}

type AppLink implements AppLinkInterface & Linkable {
  """The title to display for the link."""
  title: String!

  """The link URL."""
  url: String!

  """If this is an internal URL, the path part of the URL. Null otherwise."""
  internalPath: String

  """If this is a support URL, the article ID in the URL. Null otherwise."""
  articleId: String

  """An analytics event for following the link."""
  analyticsEvent: AppAnalyticsEvent

  """
  The optional button kind, as defined by ButtonKind in LiRe (ie primary, secondary, text, link, etc). Null otherwise. If kind exists on AppLink, clients should render a linkable button, else just render link.
  """
  kind: String

  """
  The optional button size, as defined by ButtonSize in LiRe (ie small, medium, large). Null otherwise.
  """
  size: String

  """
  The font size of the text as a string
  "HXL" | "HL" | "HM" | "HS" | "HXS" | "HXXS" | "PXL" | "PL" | "PM" | "PS" | "PXS" | "LL" | "LM" | "LS"
  """
  font: String

  """
  The font weight as a string. Using TS types, Lens enforces that only valid font weights are used for each font size,
  but clients should use the font size's default font weight if no font weight or if it's invalid.
  """
  fontWeight: String

  """If true, the link should be underlined."""
  underline: Boolean!
}

interface AppLinkInterface {
  """The title to display for the link."""
  title: String!

  """The link URL."""
  url: String!

  """If this is an internal URL, the path part of the URL. Null otherwise."""
  internalPath: String

  """If this is a support URL, the article ID in the URL. Null otherwise."""
  articleId: String

  """An analytics event for following the link."""
  analyticsEvent: AppAnalyticsEvent

  """
  The optional button kind, as defined by ButtonKind in LiRe (ie primary, secondary, text, link, etc). Null otherwise.
  """
  kind: String

  """
  The optional button size, as defined by ButtonSize in LiRe (ie small, medium, large). Null otherwise.
  """
  size: String

  """
  The font size of the text as a string
  "HXL" | "HL" | "HM" | "HS" | "HXS" | "HXXS" | "PXL" | "PL" | "PM" | "PS" | "PXS" | "LL" | "LM" | "LS"
  """
  font: String

  """
  The font weight as a string. Using TS types, Lens enforces that only valid font weights are used for each font size,
  but clients should use the font size's default font weight if no font weight or if it's invalid.
  """
  fontWeight: String

  """If true, the link should be underlined."""
  underline: Boolean!
}

type AppNavigationItem implements AppLinkInterface & Linkable {
  """The title to display for the link."""
  title: String!

  """The subtitle to display for the link."""
  subtitle: String

  """The icon to display for the link."""
  icon: AppImage

  """The link URL."""
  url: String!

  """If this is an internal URL, the path part of the URL. Null otherwise."""
  internalPath: String

  """If this is a support URL, the article ID in the URL. Null otherwise."""
  articleId: String

  """An analytics event for following the link."""
  analyticsEvent: AppAnalyticsEvent

  """
  The optional button kind, as defined by ButtonKind in LiRe (ie primary, secondary, text, link, etc). Null otherwise.
  """
  kind: String

  """
  The optional button size, as defined by ButtonSize in LiRe (ie small, medium, large). Null otherwise.
  """
  size: String

  """
  The font size of the text as a string
  "HXL" | "HL" | "HM" | "HS" | "HXS" | "HXXS" | "PXL" | "PL" | "PM" | "PS" | "PXS" | "LL" | "LM" | "LS"
  """
  font: String

  """
  The font weight as a string. Using TS types, Lens enforces that only valid font weights are used for each font size,
  but clients should use the font size's default font weight if no font weight or if it's invalid.
  """
  fontWeight: String

  """If true, the link should be underlined."""
  underline: Boolean!
}

"""
A interface for types that express a link to some other application state.
"""
interface Linkable {
  """The title to display for the link."""
  title: String!

  """An analytics event for following the link."""
  analyticsEvent: AppAnalyticsEvent
}

input ArchivePieInput {
  clientMutationId: String

  """When true, archive or unarchive a Crypto pie."""
  isCrypto: Boolean

  """The ID of the pie to operate upon."""
  pieId: ID!

  """
  When true, unarchive the pie if it is currently archived. Default is false.
  """
  unarchive: Boolean = false
}

type ArchivePiePayload {
  clientMutationId: String

  """The updated pie."""
  pie: UserPie
  didSucceed: Boolean!
  error: ArchivePieInputErrorEnum

  """The ID of the updated pie."""
  pieId: ID @deprecated(reason: "Added only due to limitations of Relay. Query this off `pie` instead.")

  """Metadata about the result of executing the mutation."""
  result: ArchivePieResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")

  """Retrieve details for the current user."""
  viewer: Viewer
}

"""Metadata about the result of executing the `ArchivePie` mutation."""
type ArchivePieResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: ArchivePieInputErrorEnum
}

"""Possible input errors for the `ArchivePie` mutation."""
enum ArchivePieInputErrorEnum {
  """A pie located at the root portfolio slice may not be archived."""
  CANNOT_ARCHIVE_ROOT_PIE

  """
  A pie may not be archived unless all of its ancestors are already archived.
  """
  HAS_UNARCHIVED_ANCESTORS

  """A valid pie ID must be provided."""
  INVALID_PIE_ID

  """The indicated pie is not editable."""
  PIE_NOT_EDITABLE

  """The indicated pie is not found."""
  PIE_NOT_FOUND
}

type CreatePieShareUrlPayload {
  clientMutationId: String

  """True if the share URL includes a referrer code."""
  hasReferrerCode: Boolean

  """The referrer code of the account sharing the user pie."""
  referrerCode: String

  """Metadata about the result of executing the mutation."""
  result: CreatePieShareUrlResult!

  """The share token for the user pie."""
  token: String

  """The share URL for the user pie."""
  url: String

  """
  Buttons that takes web to each social media site for sharing or takes mobile to the share sheet using this information.
  """
  socialMediaShareButtons: [AppNavigationItem!]
}

"""
Metadata about the result of executing the `CreatePieShareUrl` mutation.
"""
type CreatePieShareUrlResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: CreatePieShareUrlInputErrorEnum
}

"""Possible input errors for the `CreatePieShareUrl` mutation."""
enum CreatePieShareUrlInputErrorEnum {
  """The pie is currently too complex to be serialized for sharing."""
  INELIGIBLE_FOR_SHARING

  """
  This pie contains inactive or delisted securities and cannot be shared. Remove/delete these securities from your pie before sharing.
  """
  REMOVE_BEFORE_SHARING
}

input CreatePieShareUrlInput {
  clientMutationId: String

  """The ID of the pie."""
  pieId: ID!
}

input SetMaxCashThresholdInput {
  """The ID of the account to update."""
  accountId: ID!
  clientMutationId: String

  """
  The new max cash threshold setting. Set an integer greater than or equal to zero to enable the max cash threshold and set it to that dollar amount. Set the value to null to disable the max cash threshold.
  """
  maxCashThreshold: Int
}

"""Possible input errors for the `SetMaxCashThreshold` mutation."""
enum SetMaxCashThresholdInputErrorEnum {
  """A valid account ID must be provided."""
  INVALID_ACCOUNT_ID

  """
  You have a pending sell order. It must be completed or canceled before you can change auto-invest settings.
  """
  PENDING_SELL_ORDERS

  """The max cash threshold cannot be negative."""
  THRESHOLD_CANNOT_BE_NEGATIVE
}

type SetMaxCashThresholdPayload {
  """Retrieve the updated account."""
  account: Account
  clientMutationId: String

  """Metadata about the result of executing the mutation."""
  result: SetMaxCashThresholdResult!
}

"""
Metadata about the result of executing the `SetMaxCashThreshold` mutation.
"""
type SetMaxCashThresholdResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: SetMaxCashThresholdInputErrorEnum
}

input AcceptPersonalLoanInput {
  clientMutationId: String

  """The loan ID for the loan to be accepted."""
  loanId: String!

  """
  The signature for the user's acceptance of the loan terms and conditions and agreement.
  """
  loanAcceptanceSignature: String!
}

"""Payload for the `acceptPersonalLoan` mutation"""
type AcceptPersonalLoanPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: AcceptPersonalLoanOutcome
  error: AcceptPersonalLoanErrorEnum
}

"""Error enum for the `acceptPersonalLoan` mutation"""
enum AcceptPersonalLoanErrorEnum {
  GENERIC_ACCEPT_LOAN_ERROR
  EMAIL_UNVERIFIED
}

"""Outcome for the `acceptPersonalLoan` mutation"""
type AcceptPersonalLoanOutcome {
  """The content for the personal loan disbursement page."""
  loanDisbursement: PersonalLoanDisbursement

  """
  Flag to determine if the user has valid external account to disburse their loan to.
  """
  hasDisbursementOption: Boolean
}

"""Input for `acceptLoanOffer` mutation."""
input AcceptPersonalLoanOfferInput {
  clientMutationId: String
  offerId: ID
}

type AcceptPersonalLoanOfferPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: AcceptPersonalLoanOfferOutcome
  error: AcceptPersonalLoanOfferErrorEnum
}

enum AcceptPersonalLoanOfferErrorEnum {
  """GENERIC_ACCEPT_OFFER_ERROR"""
  GENERIC_ACCEPT_OFFER_ERROR

  """COULD_NOT_FIND_LOAN_APPLICATION"""
  COULD_NOT_FIND_LOAN_APPLICATION

  """COULD_NOT_FIND_LOAN_ID"""
  COULD_NOT_FIND_LOAN_ID

  """REJECTED"""
  REJECTED

  """REJECTED_CREDIT_FROZEN"""
  REJECTED_CREDIT_FROZEN

  """EMAIL_UNVERIFIED"""
  EMAIL_UNVERIFIED
}

type AcceptPersonalLoanOfferOutcome {
  """The ID of the offer that was accepted."""
  offerId: ID

  """Loan ID for the loan to be accepted if the user continues."""
  loanId: ID @deprecated(reason: "Clients to poll using status from the application")
}

input ActivatePlusTrialInput {
  clientMutationId: String
}

type ActivatePlusTrialPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ActivatePlusTrialOutcome
  error: ActivatePlusTrialErrorEnum
}

type ActivatePlusTrialOutcome {
  """The updated Plus information."""
  plus: Plus

  """The updated Spend Checking information."""
  spend: Spend

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent
}

enum ActivatePlusTrialErrorEnum {
  """User is already a Plus member."""
  ALREADY_PLUS_MEMBER

  """User is not trial-eligible, for whatever reason."""
  INELIGIBLE_FOR_TRIAL
}

"""Input for the `archiveTransferRule` mutation."""
input ArchiveTransferRuleInput {
  clientMutationId: String

  """
  The ID of the `TransferRule` to archive. Must be an ID for a type that
  implements the `TransferRule` interface.
  """
  transferRuleId: ID!
}

"""Payload for the `archiveTransferRule` mutation."""
type ArchiveTransferRulePayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: ArchiveTransferRuleErrorEnum
}

"""Errors for the `archiveTransferRule` mutation."""
enum ArchiveTransferRuleErrorEnum {
  """The rule cannot be archived."""
  NOT_ARCHIVABLE
}

"""Input for the `authenticate` mutation."""
input AuthenticateInput {
  clientMutationId: String

  """A username."""
  username: String!

  """A password."""
  password: String!

  """
  An authentication code sent to the user's verified email. Required when a user is flagged as suspicious via Auth0.
  """
  emailCode: String

  """
  A two factor authentication code. Required when two factor authentication is enabled.
  """
  code: String

  """
  The signature of an agreement bundle. Optional unless `AGREEMENT_REQUIRED` is returned.
  """
  signature: String

  """
  A flag that signals to BE to request an access token with enhanced security privileges. Required after `AMFA_REQUIRED` is returned.
  Clients should pass false for default logins and true for enhanced security logins.
  """
  mfaAudience: Boolean
}

"""Payload for the `authenticate` mutation."""
type AuthenticatePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: AuthenticateOutcome
  error: AuthenticateErrorEnum
  result: AuthenticateResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  accessToken: String @deprecated(reason: "Use `outcome` instead.")
  refreshToken: String @deprecated(reason: "Use `outcome` instead.")
  expiresIn: Int @deprecated(reason: "Use `outcome` instead.")
  viewer: Viewer @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `authenticate` mutation."""
type AuthenticateOutcome {
  """The access token."""
  accessToken: String!

  """The refresh token."""
  refreshToken: String!

  """Retrieve details for the current user."""
  viewer: Viewer
}

"""Errors for the `authenticate` mutation."""
enum AuthenticateErrorEnum {
  """The credentials are incorrect."""
  INCORRECT_CREDENTIALS

  """The user account is currently locked."""
  USER_ACCOUNT_LOCKED

  """A two factor authentication code must be provided."""
  CODE_REQUIRED

  """An authentication code via email must be provided."""
  EMAIL_AMFA_REQUIRED

  """The adpative MFA code is expired."""
  AMFA_TOKEN_EXPIRED

  """The adaptive multi-factor authentication code is incorrect."""
  INCORRECT_AMFA_CODE

  """The two factor authentication code is incorrect."""
  INCORRECT_CODE

  """Login is locked until the user agrees to the latest agreement bundle."""
  AGREEMENT_REQUIRED

  """Client version is not supported for login and must be updated."""
  CLIENT_VERSION_NOT_SUPPORTED
}

type AuthenticateResult {
  didSucceed: Boolean!
  inputError: AuthenticateInputErrorEnum
}

enum AuthenticateInputErrorEnum {
  INCORRECT_CREDENTIALS
  USER_ACCOUNT_LOCKED
  CODE_REQUIRED
  INCORRECT_CODE
  AGREEMENT_REQUIRED
  EMAIL_AMFA_REQUIRED
  INCORRECT_AMFA_CODE
  AMFA_TOKEN_EXPIRED
}

"""Input for the `cancelTransferInstance` mutation."""
input CancelTransferInstanceInput {
  clientMutationId: String

  """The `TransferInstance` to cancel. Must be an a cancelable state."""
  transferInstanceId: ID!
}

"""Payload for the `cancelTransferInstance` mutation."""
type CancelTransferInstancePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CancelTransferInstanceOutcome
  error: CancelTransferInstanceErrorEnum
}

"""Outcome for the `cancelTransferInstance` mutation."""
type CancelTransferInstanceOutcome {
  """The transfer instance that was canceled."""
  instance: TransferInstance
}

"""Errors for the `cancelTransferInstance` mutation."""
enum CancelTransferInstanceErrorEnum {
  """The transfer instance is not in a cancelable state."""
  NOT_CANCELABLE
}

"""Input for the `changePassword` mutation."""
input ChangePasswordInput {
  clientMutationId: String

  """The old password."""
  oldPassword: String!

  """The new password."""
  newPassword: String!
}

"""Payload for the `changePassword` mutation."""
type ChangePasswordPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: ChangePasswordErrorEnum
  result: ChangePasswordResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
}

"""Errors for the `changePassword` mutation."""
enum ChangePasswordErrorEnum {
  """The provided old password is incorrect."""
  INCORRECT_OLD_PASSWORD

  """The new password is too simple."""
  INVALID_NEW_PASSWORD
}

type ChangePasswordResult {
  didSucceed: Boolean!
  inputError: ChangePasswordInputErrorEnum
}

enum ChangePasswordInputErrorEnum {
  INCORRECT_OLD_PASSWORD
  INVALID_NEW_PASSWORD
}

"""Input for the `completePhoneVerification` mutation."""
input CompletePhoneVerificationInput {
  clientMutationId: String

  """The phone number used to initiate the verification process."""
  phone: PhoneNumber!

  """The verification code that was delivered to the phone number."""
  code: String!
}

"""Payload for the `completePhoneVerification` mutation."""
type CompletePhoneVerificationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CompletePhoneVerificationOutcome
  error: CompletePhoneVerificationErrorEnum
}

"""Outcome for the `completePhoneVerification` mutation."""
type CompletePhoneVerificationOutcome {
  """The phone number that was successfully verified."""
  phone: PhoneNumber!

  """The updated user."""
  user: User
}

"""Errors for the `completePhoneVerification` mutation."""
enum CompletePhoneVerificationErrorEnum {
  """No verification attempt is pending for the provided phone number."""
  NO_PENDING_VERIFICATION

  """The verification code is incorrect."""
  INCORRECT_CODE

  """The phone number is already in use by another user."""
  PHONE_ALREADY_USED

  """Too many phone verification attempts have been made."""
  TOO_MANY_ATTEMPTS
}

input CreateProfileInput {
  clientMutationId: String
  phoneNumber: PhoneNumber
  name: CreateProfileName!
  countryOfCitizenship: String!
  address: MailingAddressInput!
  dateOfBirth: String!
  productSelection: ProductListIdentifier
  ssn: SocialSecurityNumber!
  employmentInfo: EmploymentInput
  disclosures: CreateProfileDisclosure
  suitability: SuitabilityCreateProfileInput
  trustedContact: TrustedContactInput
}

input CreateProfileName {
  firstName: FirstName!
  middleInitial: MiddleInitial
  lastName: LastName!
  suffix: NameSuffixEnum
}

input CreateProfileDisclosure {
  exchangeOrFinraAffiliationDisclosure: ExchangeOrFinraAffiliationDisclosureInput
  controlPersonDisclosure: ControlPersonDisclosureInput
  politicalExposureDisclosure: PoliticalExposureDisclosureInput!
  backupWithholding: BackupWithholdingInput
}

input SuitabilityCreateProfileInput {
  annualIncome: AnnualIncomeEnum
  annualIncomeAmount: Float
  totalNetWorth: TotalNetWorthEnum
  totalNetWorthAmount: Float
  liquidNetWorth: LiquidNetWorthEnum
  liquidNetWorthAmount: Float
  investmentExperience: InvestmentExperienceEnum
  riskTolerance: RiskToleranceEnum
  timeHorizon: TimeHorizonEnum
  liquidityNeeds: LiquidityNeedsEnum
}

type CreateProfilePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CreateProfileOutcome
  error: CreateProfileError
}

type CreateProfileOutcome {
  didSucceed: Boolean!
  userProfileId: String!
}

enum CreateProfileError {
  GENERAL_REJECTION
  INVALID_HOLDER_DOB
  DUPLICATE_PROFILE
  HOLDER_NAME_TOO_LONG
  INVALID_COUNTRY_CODE
  INVALID_HOME_ADDRESS
  HOME_ADDRESS_CANNOT_BE_PO_BOX
  PHONE_MUST_MATCH_VERIFICATION
}

"""Input for the `createSpendAccountDocumentLink` mutation."""
input CreateSpendAccountDocumentLinkInput {
  clientMutationId: String

  """The ID of the `SpendAccountDocument`."""
  spendAccountDocumentId: ID!
}

"""Payload for the `createSpendAccountDocumentLink` mutation."""
type CreateSpendAccountDocumentLinkPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CreateSpendAccountDocumentLinkOutcome
  error: CreateSpendAccountDocumentLinkErrorEnum
}

"""Outcome for the `createSpendAccountDocumentLink` mutation."""
type CreateSpendAccountDocumentLinkOutcome {
  """The temporary URL to the document. It will expire after time."""
  url: String!
}

"""Errors for the `createSpendAccountDocumentLink` mutation."""
enum CreateSpendAccountDocumentLinkErrorEnum {
  """The document is not currently available to download."""
  DOCUMENT_NOT_AVAILBLE
}

"""Input for the `initiateSpendIdentity` mutation."""
input InitiateSpendIdentityInput {
  clientMutationId: String

  """
  Specify `true` if the user declares that they are subject to backup
  withholding.
  """
  isSubjectToBackupWithholding: Boolean!

  """
  The `signature` from the `AgreementBundle` returned by
  `SpendAgreements.latestAgreements`. Specifying the correct signature signifies
  that the user was properly presented with the agreements and has agreed to
  each.
  """
  agreementSignature: String!
}

"""Payload for the `initiateSpendIdentity` mutation."""
type InitiateSpendIdentityPayload {
  clientMutationId: String
  didSucceed: Boolean! @deprecated(reason: "Sunset Checking.")
  outcome: InitiateSpendIdentityOutcome @deprecated(reason: "Sunset Checking.")
  error: InitiateSpendIdentityErrorEnum @deprecated(reason: "Sunset Checking.")
}

"""Outcome for the `initiateSpendIdentity` mutation."""
type InitiateSpendIdentityOutcome {
  """The newly-initiated identity."""
  identity: SpendIdentity! @deprecated(reason: "Sunset Checking.")

  """
  If the identity is accepted, an identity verification session is started and a
  set of challenge question is returned. Respond to the challenge with the
  `verifySpendIdentity` mutation.
  """
  challenge: SpendIdentityVerificationChallenge @deprecated(reason: "Sunset Checking.")
}

"""
An identity verfication challenge associated with the `initiateSpendIdentity`
mutation.
"""
type SpendIdentityVerificationChallenge {
  """
  A unique token identifying the identity verification session associated with
  these questions.
  """
  verificatonToken: String! @deprecated(reason: "Sunset Checking.")

  """A set of questions for the user to answer to verify their identity."""
  verificationQuestions: [SpendIdentityVerificationQuestion!]! @deprecated(reason: "Sunset Checking.")
}

"""
An single identity verification question associated with the
`initiateSpendIdentity` mutation.
"""
type SpendIdentityVerificationQuestion {
  """A machine-readable code used to identify this question when answering."""
  questionCode: String! @deprecated(reason: "Sunset Checking.")

  """A human-readable question prompt to display to the user."""
  prompt: String! @deprecated(reason: "Sunset Checking.")

  """
  A set of multiple-choice options to both display to the user and return as an
  answer.
  """
  choices: [String!]! @deprecated(reason: "Sunset Checking.")
}

"""Errors for the `initiateSpendIdentity` mutation."""
enum InitiateSpendIdentityErrorEnum {
  """The provided `signature` is invalid or unaccepted."""
  INVALID_AGREEMENT_SIGNATURE @deprecated(reason: "Sunset Checking.")

  """The user is not eligible to use Spend Checking at this time."""
  NOT_ELIGIBLE @deprecated(reason: "Sunset Checking.")

  """The `Viewer.profile` is not created."""
  PROFILE_NOT_CREATED @deprecated(reason: "Sunset Checking.")

  """The `Viewer.profile` is not accepted."""
  PROFILE_NOT_READY @deprecated(reason: "Sunset Checking.")

  """
  The `Spend.spendIdentity` already exists, and cannot be re-initiated at this
  time.
  """
  CANNOT_REINITIATE_IDENTITY @deprecated(reason: "Sunset Checking.")

  """The user's tax ID is already in use by another user profile."""
  TAX_ID_ALREADY_IN_USE @deprecated(reason: "Sunset Checking.")

  """The user's tax ID has failed identity verifiation too many times."""
  TAX_ID_HAS_TOO_MANY_FAILURES @deprecated(reason: "Sunset Checking.")

  """The user's home address is not allowed."""
  DISALLOWED_HOME_ADDRESS @deprecated(reason: "Sunset Checking.")
}

"""Input for the `updateSpendIdentity` mutation."""
input UpdateSpendIdentityInput {
  clientMutationId: String

  """Updated value for the user if they are subject to backup withholding."""
  isSubjectToBackupWithholding: Boolean!

  """
  The `signature` from the `AgreementBundle` returned by
  `SpendAgreements.latestAgreements`. Specifying the correct signature signifies
  that the user was properly presented with the agreements and has agreed to
  each.
  """
  agreementSignature: String!
}

"""Payload for the `updateSpendIdentity` mutation."""
type UpdateSpendIdentityPayload {
  clientMutationId: String
  didSucceed: Boolean! @deprecated(reason: "Sunset Checking.")
  outcome: UpdateSpendIdentityOutcome @deprecated(reason: "Sunset Checking.")
  error: UpdateSpendIdentityErrorEnum @deprecated(reason: "Sunset Checking.")
}

"""Errors for the `updateSpendIdentity` mutation."""
enum UpdateSpendIdentityErrorEnum {
  """UNABLE_TO_UPDATE_SPEND_CUSTOMER"""
  UNABLE_TO_UPDATE_SPEND_CUSTOMER @deprecated(reason: "Sunset Checking.")

  """INVALID_AGREEMENT_SIGNATURE"""
  INVALID_AGREEMENT_SIGNATURE @deprecated(reason: "Sunset Checking.")
}

"""Outcome for the `updateSpendIdentity` mutation."""
type UpdateSpendIdentityOutcome {
  """The user's Spend identity."""
  identity: SpendIdentity @deprecated(reason: "Sunset Checking.")
}

"""Input for the `verifySpendIdentity` mutation."""
input VerifySpendIdentityInput {
  clientMutationId: String

  """
  The `SpendIdentityVerificationChallenge.verificationToken` returned by the
  `initiateSpendIdentity` mutation.
  """
  verificatonToken: String!

  """
  Answers to the `SpendIdentityVerificationChallenge.verificationQuestions`
  returned by the `initiateSpendIdentity` mutation.
  """
  verificationAnswers: [VerifySpendIdentityAnswerInput!]!
}

"""
A single identity verification answer input associated with the
`verifySpendIdentity` mutation.
"""
input VerifySpendIdentityAnswerInput {
  """
  The `SpendIdentityVerificationQuestion.questionCode` associated with this
  answer.
  """
  questionCode: String!

  """
  The answer from `SpendIdentityVerificationQuestion.choices` that was selected
  by the user.
  """
  answer: String!
}

"""Payload for the `verifySpendIdentity` mutation."""
type VerifySpendIdentityPayload {
  clientMutationId: String
  didSucceed: Boolean! @deprecated(reason: "Sunset Checking.")
  outcome: VerifySpendIdentityOutcome @deprecated(reason: "Sunset Checking.")
  error: VerifySpendIdentityErrorEnum @deprecated(reason: "Sunset Checking.")
}

"""Outcome for the `verifySpendIdentity` mutation."""
type VerifySpendIdentityOutcome {
  """The updated identity."""
  identity: SpendIdentity! @deprecated(reason: "Sunset Checking.")

  """
  Spend Checking due diligence questions for users to complete before finishing enrollment.
  """
  spendDueDiligenceQuestions: SpendDueDiligenceQuestions @deprecated(reason: "Sunset Checking.")
}

"""Errors for the `verifySpendIdentity` mutation."""
enum VerifySpendIdentityErrorEnum {
  """The `Spend.spendIdentity` is not present."""
  IDENTITY_NOT_INITIATED @deprecated(reason: "Sunset Checking.")

  """The `Spend.spendIdentity` is not ready for verification."""
  IDENTITY_VERIFICATION_NOT_READY @deprecated(reason: "Sunset Checking.")
}

"""Input for the `completeSpendEnrollment` mutation."""
input CompleteSpendEnrollmentInput {
  clientMutationId: String

  """
  Optionally specify a `MigratableInvestExternalAccount` that should be migrated
  to become the Spend Checking external account, if possible.
  """
  migratableInvestExternalAccountId: ID

  """
  Answers to the customer due diligence questions which will need to be completed for Spend Checking enrollment.
  """
  dueDiligenceAnswers: [DueDiligenceAnswer!]

  """Optional account name property for the user's Spend account."""
  accountName: String
}

"""Payload for the `completeSpendEnrollment` mutation."""
type CompleteSpendEnrollmentPayload {
  clientMutationId: String
  didSucceed: Boolean! @deprecated(reason: "Sunset Checking.")
  outcome: CompleteSpendEnrollmentOutcome @deprecated(reason: "Sunset Checking.")
  error: CompleteSpendEnrollmentErrorEnum @deprecated(reason: "Sunset Checking.")
}

"""Outcome for the `completeSpendEnrollment` mutation."""
type CompleteSpendEnrollmentOutcome {
  """The newly-created Spend Checking account."""
  spendAccount: SpendAccount! @deprecated(reason: "Sunset Checking.")

  """True if there is a linked external account for the user."""
  hasConnectedExternalAccount: Boolean @deprecated(reason: "Sunset Checking.")

  """
  True only when a migration of an Invest external account was requested, but it
  failed. False when a migrated was requested and succeeded, or when no
  migration was requested at all.
  """
  didRequestedExternalAccountMigrationFail: Boolean @deprecated(reason: "Sunset Checking.")

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent @deprecated(reason: "Sunset Checking.")
}

"""Errors for the `completeSpendEnrollment` mutation."""
enum CompleteSpendEnrollmentErrorEnum {
  """The `Spend.spendIdentity` is not verified."""
  IDENTITY_NOT_VERIFIED @deprecated(reason: "Sunset Checking.")

  """Enrollment cannot be completed while there is a pending transfer."""
  BLOCKED_BY_PENDING_TRANSFER @deprecated(reason: "Sunset Checking.")

  """The enrollment process has already been completed for this user."""
  ENROLLMENT_ALREADY_COMPLETE @deprecated(reason: "Sunset Checking.")
}

"""Input for the `createSpendExternalAccountViaLink` mutation."""
input CreateSpendExternalAccountViaLinkInput {
  clientMutationId: String

  """
  An `ExternalAccount` ID. Either `externalAccountId` or `plaidAccountId` must
  be specified.
  """
  externalAccountId: ID

  """
  A Plaid account ID referring to an `ExternalAccount`. The external account
  must already be linked. Either `externalAccountId` or `plaidAccountId` must be
  specified.
  """
  plaidAccountId: String
}

"""Payload for the `createSpendExternalAccountViaLink` mutation."""
type CreateSpendExternalAccountViaLinkPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: CreateSpendExternalAccountViaLinkOutcome
  error: CreateSpendExternalAccountViaLinkErrorEnum
}

"""Outcome for the `createSpendExternalAccountViaLink` mutation."""
type CreateSpendExternalAccountViaLinkOutcome {
  """The newly-created external bank account."""
  spendExternalAccount: SpendExternalAccount
}

"""Errors for the `createSpendExternalAccountViaLink` mutation."""
enum CreateSpendExternalAccountViaLinkErrorEnum {
  """The enrollment process is not complete."""
  ENROLLMENT_NOT_COMPLETE

  """The maximum number of external bank accounts has been reached."""
  TOO_MANY_EXTERNAL_ACCOUNTS

  """The specified bank account is not allowed."""
  DISALLOWED_EXTERNAL_ACCOUNT
}

"""Input for the `initiateSpendExternalAccount` mutation."""
input InitiateSpendExternalAccountInput {
  clientMutationId: String

  """The routing number of the external bank account."""
  routingNumber: String!

  """The account number of the external bank account."""
  accountNumber: String!

  """The type of the external bank account."""
  accountType: SpendExternalAccountTypeInputEnum!

  """An optional user-provided nickname for the external bank account."""
  accountNickname: String
}

"""
An external account type used for input to the `initiateSpendExternalAccount`
mutation.
"""
enum SpendExternalAccountTypeInputEnum {
  """Checking account"""
  CHECKING

  """Savings account"""
  SAVINGS
}

"""Payload for the `initiateSpendExternalAccount` mutation."""
type InitiateSpendExternalAccountPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: InitiateSpendExternalAccountOutcome
  error: InitiateSpendExternalAccountErrorEnum
}

"""Outcome for the `initiateSpendExternalAccount` mutation."""
type InitiateSpendExternalAccountOutcome {
  """The newly-initiated external bank account."""
  spendExternalAccount: SpendExternalAccount!
}

"""Errors for the `initiateSpendExternalAccount` mutation."""
enum InitiateSpendExternalAccountErrorEnum {
  """The enrollment process is not complete."""
  ENROLLMENT_NOT_COMPLETE

  """The provided nickname cannot be used because it is already in use."""
  NICKNAME_ALREADY_IN_USE

  """The maximum number of external bank accounts has been reached."""
  TOO_MANY_EXTERNAL_ACCOUNTS

  """The provided routing number is invalid or disallowed."""
  INVALID_ROUTING_NUMBER

  """The provided account number is invalid or disallowed."""
  INVALID_ACCOUNT_NUMBER
}

"""Input for the `verifySpendExternalAccount` mutation."""
input VerifySpendExternalAccountInput {
  clientMutationId: String

  """The `id` of the `SpendExternalAccount` to verify."""
  spendExternalAccountId: ID!

  """The first micro-deposit amount (order doesn't matter)."""
  amount1: Float!

  """The second micro-deposit amount (order doesn't matter)."""
  amount2: Float!
}

"""Payload for the `verifySpendExternalAccount` mutation."""
type VerifySpendExternalAccountPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: VerifySpendExternalAccountOutcome
  error: VerifySpendExternalAccountErrorEnum
}

"""Outcome for the `verifySpendExternalAccount` mutation."""
type VerifySpendExternalAccountOutcome {
  """The updated external bank account."""
  spendExternalAccount: SpendExternalAccount!
}

"""Errors for the `verifySpendExternalAccount` mutation."""
enum VerifySpendExternalAccountErrorEnum {
  """Verification of the external bank account is locked."""
  EXTERNAL_ACCOUNT_IS_LOCKED

  """Verification of the external bank account is denied."""
  EXTERNAL_ACCOUNT_IS_DENIED

  """The verfication time limit has already expired."""
  EXTERNAL_ACCOUNT_IS_EXPIRED

  """The user has failed the verification process too many times."""
  TOO_MANY_VERIFICATION_FAILURES

  """The provided micro-deposit amounts are incorrect."""
  DEPOSITS_INCORRECT
}

"""Input for the `archiveSpendExternalAccount` mutation."""
input ArchiveSpendExternalAccountInput {
  clientMutationId: String

  """The `id` of the `SpendExternalAccount` to archive."""
  spendExternalAccountId: ID!
}

"""Payload for the `archiveSpendExternalAccount` mutation."""
type ArchiveSpendExternalAccountPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ArchiveSpendExternalAccountOutcome
  error: ArchiveSpendExternalAccountErrorEnum
}

"""Outcome for the `archiveSpendExternalAccount` mutation."""
type ArchiveSpendExternalAccountOutcome {
  """Outcome content for the 'archiveSpendExternalAccount' mutation."""
  outcomeContent: String
}

"""Errors for the `archiveSpendExternalAccount` mutation."""
enum ArchiveSpendExternalAccountErrorEnum {
  """Unable to find the customer associated with the user profile ID."""
  CUSTOMER_NOT_FOUND

  """User has an invalid external Spend account ID."""
  INVALID_EXTERNAL_ACCOUNT_ID

  """
  User was unable to deactive their external Spend account generic error.
  """
  UNABLE_TO_DEACTIVATE_EXTERNAL_ACCOUNT

  """
  User has pending actions preventing them from archiving their external Spend account.
  """
  UNABLE_TO_DEACTIVATE_EXTERNAL_ACCOUNT_PENDING_ACTION

  """
  User has outstanding transactions preventing them from archiving their external Spend account.
  """
  UNABLE_TO_ARCHIVE_EXTERNAL_ACCOUNT_OUTSTANDING_TRANSACTIONS

  """User has an invalid state for their external Spend account."""
  INVALID_USER_EXTERNAL_ACCOUNT_STATE
}

"""Input for the `sendCheck` mutation."""
input SendCheckInput {
  clientMutationId: String

  """
  The Spend Checking Account to transfer money from. Must be an ID for a type that
  implements the `TransferParticipant` interface.
  """
  spendAccountId: ID!

  """Amount for which the check will be cut for."""
  amount: Float!

  """Information pertaining to the check recipient."""
  recipient: SendCheckRecipientInput!

  """An optional memo to be included on the check."""
  memo: String

  """Optional, desired transfer schedule."""
  schedule: RecurrenceScheduleInput

  """Optional, transfer schedule rule ID if it exists."""
  scheduledTransferRuleId: String
}

input SendCheckRecipientInput {
  """Indicates whether the recipient is an individual or a business."""
  recipientType: SendCheckRecipientTypeEnum!

  """If the recipient is an individual, this is the recipient's first name."""
  firstName: String

  """If the recipient is an individual, this is the recipient's last name."""
  lastName: String

  """If the recipient is a business, this is the recipient's business name."""
  businessName: String

  """Line one of the recipient's mailing address."""
  lineOne: String!

  """Line two of the recipient's mailing address."""
  lineTwo: String

  """The recipient's city."""
  city: String!

  """The recipient's state or province."""
  stateOrProvince: MailingAddressSubdivisionEnum!

  """The recipient's postal code."""
  postalCode: PostalCode!
}

"""Payload for the `sendCheck` mutation."""
type SendCheckPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SendCheckOutcome
  error: SendCheckErrorEnum
}

type SendCheckOutcome {
  """The `TransferInstance` of the transfer created to send the check."""
  transfer: TransferInstance

  """
  The `ScheduledTransferRule` of the transfer schedule created for recurring checks.
  """
  transferScheduleRule: ScheduledTransferRule

  """Copy for the Payment Confirmed screen in the Send Check flow."""
  paymentConfirmedContent: PaymentConfirmedContent
}

enum SendCheckErrorEnum {
  """Either or both participants are currently frozen."""
  PARTICIPANTS_FROZEN

  """The daily transfer limit between the from/to participants is exceeded."""
  PARTICIPANTS_DAILY_LIMIT_EXCEEDED

  """Amount is less than the transfer minimum for the particpants."""
  AMOUNT_LESS_THAN_TRANSFER_MINIMUM

  """Amount is greater than the transfer maximum for the particpants."""
  AMOUNT_GREATER_THAN_TRANSFER_MAXIMUM

  """Amount is greater than the source participant's available balance."""
  AMOUNT_GREATER_THAN_AVAILABLE_BALANCE

  """Memo for the check is too long."""
  PHYSICAL_CHECK_MEMO_TOO_LONG

  """Address for the check is too long."""
  PHYSICAL_CHECK_ADDRESS_TOO_LONG

  """Country for the check's mailing address is invalid."""
  PHYSICAL_CHECK_ADDRESS_COUNTRY_INVALID

  """Check recipient's name is too long."""
  PHYSICAL_CHECK_RECIPIENT_NAME_TOO_LONG

  """Send Check Mutation Generic Error."""
  SEND_CHECK_GENERIC_ERROR

  """Scheduled check conflicts with existing schedule."""
  CONFLICTS_WITH_EXISTING_RULE
}

"""Input for the `disableTwoFactorAuth` mutation."""
input DisableTwoFactorAuthInput {
  clientMutationId: String
}

"""Payload for the `disableTwoFactorAuth` mutation."""
type DisableTwoFactorAuthPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: DisableTwoFactorAuthOutcome
  result: DisableTwoFactorAuthResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  user: User @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `disableTwoFactorAuth` mutation."""
type DisableTwoFactorAuthOutcome {
  """The updated user."""
  user: User
}

type DisableTwoFactorAuthResult {
  didSucceed: Boolean!
  inputError: DisableTwoFactorAuthInputErrorEnum
}

enum DisableTwoFactorAuthInputErrorEnum {
  TWO_FACTOR_AUTH_ALREADY_DISABLED
}

"""Input for the `dismissAnnouncements` mutation."""
input DismissAnnouncementsInput {
  clientMutationId: String

  """The announcement context that is being dismissed."""
  context: AnnouncementContextEnum!
}

"""An announcement context."""
enum AnnouncementContextEnum {
  """All"""
  ALL

  """List"""
  LIST

  """Transfers"""
  TRANSFERS

  """Move Money"""
  MOVE_MONEY

  """Invest"""
  INVEST

  """Borrow"""
  BORROW

  """Spend"""
  SPEND

  """Referrals"""
  REFERRALS

  """Plus"""
  PLUS

  """Documents"""
  DOCUMENTS

  """Home"""
  HOME

  """Home Modal"""
  HOME_MODAL

  """Personal Loans"""
  PERSONAL_LOANS

  """Save"""
  SAVE

  """Invest Marketing"""
  INVEST_MARKETING

  """Save Marketing"""
  SAVE_MARKETING

  """Borrow Marketing"""
  BORROW_MARKETING

  """Home promotional cards"""
  HOME_PROMO

  """Invest promotional cards"""
  INVEST_PLP_PROMO

  """Earn promotional cards"""
  EARN_PLP_PROMO

  """Margin promotional cards"""
  MARGIN_PLP_PROMO
}

"""Payload for the `dismissAnnouncements` mutation."""
type DismissAnnouncementsPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: DismissAnnouncementsOutcome
}

"""Outcome for the `dismissAnnouncements` mutation."""
type DismissAnnouncementsOutcome {
  """Updated announcements."""
  announcements: Announcements
}

"""Input for the `enableTwoFactorAuth` mutation."""
input EnableTwoFactorAuthInput {
  clientMutationId: String

  """A two factor authentication code generated from the current secret."""
  code: String!
}

"""Payload for the `enableTwoFactorAuth` mutation."""
type EnableTwoFactorAuthPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: EnableTwoFactorAuthOutcome
  error: EnableTwoFactorAuthErrorEnum
  result: EnableTwoFactorAuthResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  user: User @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `enableTwoFactorAuth` mutation."""
type EnableTwoFactorAuthOutcome {
  """The updated user."""
  user: User
}

"""Errors for the `enableTwoFactorAuth` mutation."""
enum EnableTwoFactorAuthErrorEnum {
  """The two factor authentication code is incorrect."""
  INCORRECT_CODE
}

type EnableTwoFactorAuthResult {
  didSucceed: Boolean!
  inputError: EnableTwoFactorAuthInputErrorEnum
}

enum EnableTwoFactorAuthInputErrorEnum {
  TWO_FACTOR_AUTH_ALREADY_ENABLED
  INCORRECT_CODE
}

"""Input for Atomic token generation"""
input GenerateAtomicTokenInput {
  clientMutationId: String

  """Array of account ids"""
  accountIds: [ID]!
}

type GenerateAtomicTokenPayload {
  clientMutationId: String
  didSucceed: Boolean
  outcome: GenerateAtomicTokenOutcome
  error: GenerateAtomicTokenErrorEnum
  errorMessage: String
}

type GenerateAtomicTokenOutcome {
  """Atomic client token"""
  token: String
}

enum GenerateAtomicTokenErrorEnum {
  """GENERIC_ATOMIC_ERROR"""
  GENERIC_ATOMIC_ERROR
}

input GenerateIdempotencyKeyInput {
  clientMutationId: String
}

type GenerateIdempotencyKeyPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: IdempotencyKeyError
  outcome: GenerateIdempotencyKeyOutcome
}

type GenerateIdempotencyKeyOutcome {
  idempotencyKey: String!
}

enum IdempotencyKeyError {
  """An error occurred generating the key."""
  ERROR_GENERATING_IDEMPOTENCY_KEY
}

"""Input for the `initializeTwoFactorAuth` mutation."""
input InitializeTwoFactorAuthInput {
  clientMutationId: String
}

"""Payload for the `initializeTwoFactorAuth` mutation."""
type InitializeTwoFactorAuthPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: InitializeTwoFactorAuthOutcome
  error: InitializeTwoFactorAuthErrorEnum
  result: InitializeTwoFactorAuthResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  secret: String @deprecated(reason: "Use `outcome` instead.")
  uri: String @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `initializeTwoFactorAuth` mutation."""
type InitializeTwoFactorAuthOutcome {
  """The two factor authentication secret."""
  secret: String!

  """The two factor authentication secret as an `otpauth` URI."""
  uri: String!
}

"""Errors for the `initializeTwoFactorAuth` mutation."""
enum InitializeTwoFactorAuthErrorEnum {
  """Two factor authentication is already enabled."""
  TWO_FACTOR_AUTH_ALREADY_ENABLED

  """
  Signals to clients that an access token with enhanced security privileges is required.
  """
  MFA_TOKEN_REQUIRED
}

type InitializeTwoFactorAuthResult {
  didSucceed: Boolean!
  inputError: InitializeTwoFactorAuthInputErrorEnum
}

enum InitializeTwoFactorAuthInputErrorEnum {
  TWO_FACTOR_AUTH_ALREADY_ENABLED
}

type InitializeTwoFactorVerificationPayload {
  """Did the mutation succeed"""
  didSucceed: Boolean!

  """Error code"""
  error: InitializeTwoFactorVerificationErrorEnum
}

input InitializeTwoFactorVerificationInput {
  """Client mutation id"""
  clientMutationId: String

  """User's phone number"""
  phoneNumber: String!

  """Channel to send verification code"""
  channel: PhoneVerificationChannelEnum!
}

enum InitializeTwoFactorVerificationErrorEnum {
  """NO_VERIFIED_NUMBERS"""
  NO_VERIFIED_NUMBERS

  """INVALID_PHONE"""
  INVALID_PHONE

  """DISALLOWED_PHONE"""
  DISALLOWED_PHONE

  """PHONE_ALREADY_USED"""
  PHONE_ALREADY_USED

  """PHONE_DOES_NOT_SUPPORT_SMS"""
  PHONE_DOES_NOT_SUPPORT_SMS

  """TOO_MANY_ATTEMPTS"""
  TOO_MANY_ATTEMPTS
}

"""Input for the `initiatePhoneVerification` mutation."""
input InitiatePhoneVerificationInput {
  clientMutationId: String

  """The phone number to which the verifiation code should be sent."""
  phone: String!

  """The channel via which the code is sent."""
  channel: PhoneVerificationChannelEnum!
}

enum PhoneVerificationChannelEnum {
  """SMS text message"""
  SMS

  """Voice call"""
  CALL
}

"""Payload for the `initiatePhoneVerification` mutation."""
type InitiatePhoneVerificationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: InitiatePhoneVerificationOutcome
  error: InitiatePhoneVerificationErrorEnum
}

"""Outcome for the `initiatePhoneVerification` mutation."""
type InitiatePhoneVerificationOutcome {
  """The phone number that the verification code was sent to."""
  phone: PhoneNumber!
}

"""Errors for the `initiatePhoneVerification` mutation."""
enum InitiatePhoneVerificationErrorEnum {
  """The input is not a valid phone number."""
  INVALID_PHONE

  """The phone number is valid but not allowed for verification."""
  DISALLOWED_PHONE

  """The phone number is already in use by another user."""
  PHONE_ALREADY_USED

  """
  The phone number does not support SMS. A different channel must be used.
  """
  PHONE_DOES_NOT_SUPPORT_SMS

  """Too many phone verification attempts have been made."""
  TOO_MANY_ATTEMPTS
}

"""Input for the `initiateResetPassword` mutation."""
input InitiateResetPasswordInput {
  clientMutationId: String

  """
  The email address to be used for initiating the reset password process.
  """
  email: String!
}

"""Payload for the `initiateResetPassword` mutation."""
type InitiateResetPasswordPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: InitiateResetPasswordErrorEnum
  result: InitiateResetPasswordResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
}

"""Errors for the `initiateResetPassword` mutation."""
enum InitiateResetPasswordErrorEnum {
  """The email address is invalid."""
  INVALID_EMAIL_ADDRESS
}

type InitiateResetPasswordResult {
  didSucceed: Boolean!
  inputError: InitiateResetPasswordInputErrorEnum
}

enum InitiateResetPasswordInputErrorEnum {
  INVALID_EMAIL_ADDRESS
}

input JoinCryptoWaitlistInput {
  clientMutationId: String
}

type JoinCryptoWaitlistPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: JoinCryptoWaitlistError
}

enum JoinCryptoWaitlistError {
  """The user is already on the waitlist."""
  ALREADY_ON_WAITLIST

  """The user is not eligible to join the waitlist."""
  NOT_ELIGIBLE
  GENERAL_JOIN_CRYPTO_WAITLIST_ERROR
}

"""Input for the `SetPlusAutorenewalPreference` mutation."""
input SetPlusAutoRenewalPreferenceInput {
  clientMutationId: String

  """Autorenewal preference"""
  autoRenewal: Boolean!
}

"""Payload for the `SetPlusAutorenewalPreference` mutation."""
type SetPlusAutoRenewalPreferencePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetPlusAutoRenewalPreferenceOutcome
  error: SetPlusAutoRenewalPreferenceErrorEnum
}

"""Outcome for the `SetPlusAutorenewalPreferences` mutation."""
type SetPlusAutoRenewalPreferenceOutcome {
  """Updated Plus information."""
  plus: Plus

  """Analytics event for turning plus autorenewal on or off"""
  successAnalyticsEvent: AppAnalyticsEvent
}

enum SetPlusAutoRenewalPreferenceErrorEnum {
  """
  An active plus membership does not exist. Unable to update autorenewal preference.
  """
  NO_ACTIVE_PLUS_MEMBERSHIP
}

"""Input for the `confirmPlusMembership` mutation."""
input ConfirmPlusMembershipInput {
  clientMutationId: String

  """Information about the selected payment method type."""
  paymentMethodType: PlusPaymentMethodType

  """The selected billing cycle subscription type."""
  subscriptionType: PlusBillingCycleSubscriptionType
}

"""Payload for the `confirmPlusMembership` mutation."""
type ConfirmPlusMembershipPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ConfirmPlusMembershipOutcome
  error: ConfirmPlusMembershipErrorEnum
  errorMessage: String
}

"""Outcome for the `confirmPlusMembership` mutation."""
type ConfirmPlusMembershipOutcome {
  """A message for the success toast."""
  successMessage: String

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent
}

enum ConfirmPlusMembershipErrorEnum {
  """
  The transaction was declined. Try again with different payment method information.
  """
  TRANSACTION_DECLINED

  """
  Something went wrong and we couldn't update your preferences. Please try again or contact Client Success.
  """
  GENERIC_PLUS_CONFIRMATION_ERROR
}

"""Input for the `submitPlusMembershipPayment` mutation."""
input SubmitPlusMembershipPaymentInput {
  clientMutationId: String

  """
  The one-time use reference to a user's payment information. Omitted if the user is not paying with a card.
  """
  nonce: String

  """Information about the selected payment method type."""
  paymentMethodType: PlusPaymentMethodType

  """The selected on-platform billing payment method ID."""
  plusBillingPaymentMethodId: ID
}

"""Payload for the `submitPlusMembershipPayment` mutation."""
type SubmitPlusMembershipPaymentPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SubmitPlusMembershipPaymentOutcome
  error: SubmitPlusMembershipPaymentErrorEnum
}

"""Outcome for the `submitPlusMembershipPayment` mutation."""
type SubmitPlusMembershipPaymentOutcome {
  """The transaction ID of the user's membership registration."""
  transactionId: String!

  """The updated Plus information."""
  plus: Plus

  """The updated Spend Checking information."""
  spend: Spend

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Errors for the `submitPlusMembershipPayment` mutation."""
enum SubmitPlusMembershipPaymentErrorEnum {
  """The user has already submitted their membership payment."""
  PAYMENT_ALREADY_SUBMITTED

  """
  The transaction was declined. Try again with different payment method
  information.
  """
  TRANSACTION_DECLINED

  """
  The Spend Checking account transaction was declined. Try again with different payment method
  information.
  """
  SPEND_TRANSACTION_DECLINED @deprecated(reason: "Spend Checking is deprecated")

  """
  There are insufficient funds in the Spend Checking acccount used for payment. Add more funds to Spend Checking and try again, or try again with a different payment method.
  """
  INSUFFICIENT_FUNDS_FOR_PAYMENT
}

"""Input properties for `submitOneTimePlusPayment` mutation"""
input SubmitOneTimePlusPaymentInput {
  clientMutationId: String

  """The selected on-platform billing payment method ID."""
  plusBillingPaymentMethodId: ID

  """
  The one-time use reference to a user's payment information. Omitted if the user isn't paying with credit card.
  """
  nonce: String
}

"""Payload for the `submitOneTimePlusPayment` mutation."""
type SubmitOneTimePlusPaymentPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SubmitOneTimePlusPaymentOutcome
  error: SubmitOneTimePlusPaymentErrorEnum
}

"""Outcome for the `submitOneTimePlusPayment` mutation."""
type SubmitOneTimePlusPaymentOutcome {
  """The updated Plus information."""
  plus: Plus

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent
}

enum SubmitOneTimePlusPaymentErrorEnum {
  """Payment method check failed"""
  INVALID_PAYMENT_METHOD

  """
  User's plus subscription is not eligible to be purchased: either auto renew is on, or an active plus membership not expiring
  """
  SUBSCRIPTION_NOT_RENEWAL_ELIGIBLE

  """Payment method was not updated - updatePaymentPreference failed"""
  UNABLE_TO_UPDATE_PAYMENT_PREFERENCE

  """
  An active plus membership does not exist. Unable to proceed with one time payment procees.
  """
  NO_ACTIVE_PLUS_MEMBERSHIP

  """Unable to renew Plus because the subscription was not found"""
  SUBSCRIPTION_ID_NOT_FOUND

  """Invest payment method error when attempting to pay for Plus renewal."""
  FAILED_INVEST_TRANSACTION

  """Not enough cash to cover the cost of Plus renewal"""
  SPEND_INSUFFICIENT_FUNDS

  """Spend payment method error when attempting to pay for Plus renewal"""
  FAILED_SPEND_TRANSACTION
}

"""Input for the `SetActivePlusMembershipPaymentMethod` mutation."""
input SetActivePlusMembershipPaymentMethodInput {
  clientMutationId: String

  """
  The one-time use reference to a user's payment information. Omitted if the user is not specifying a card.
  """
  nonce: String

  """Information about the selected payment method type."""
  paymentMethodType: PlusPaymentMethodType

  """The selected on-platform billing payment method ID."""
  plusBillingPaymentMethodId: ID
}

"""Payload for the `SetActivePlusMembershipPaymentMethod` mutation."""
type SetActivePlusMembershipPaymentMethodPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetActivePlusMembershipPaymentMethodOutcome
  error: SetActivePlusMembershipPaymentMethodErrorEnum
}

"""Outcome for the `SetActivePlusMembershipPaymentMethod` mutation."""
type SetActivePlusMembershipPaymentMethodOutcome {
  """The updated Plus information."""
  plus: Plus

  """A message to the user on success."""
  message: String
}

"""Errors for the `SetActivePlusMembershipPaymentMethod` mutation."""
enum SetActivePlusMembershipPaymentMethodErrorEnum {
  """
  The selected payment method is not allowed, unable to update active payment method.
  """
  DISALLOWED_PAYMENT_METHOD
}

"""Accept promotion campaign input"""
input AcceptPromotionByPromoCodeInput {
  """The client mutation ID."""
  clientMutationId: String

  """Promotion code"""
  promoCode: String!

  """
  Signature (is encoded bundleId and version) of doc bundle associated with
  promotion campaign being accepted.
  """
  docBundleSignature: String!
}

"""Accept promotion campaign input"""
input AcceptPromotionCampaignInput {
  """The client mutation ID."""
  clientMutationId: String

  """The promotion campaign ID."""
  campaignId: ID!

  """Promotion key - should be colon separated key:value string"""
  promotionCampaignKey: PromotionCampaignKey

  """
  Signature (is encoded bundleId and version) of doc bundle associated with
  promotion campaign being accepted.
  If none is provided, system defaults to latest configured doc bundle.
  """
  docBundleSignature: String
}

"""Accept promotion campaign payload"""
type AcceptPromotionCampaignPayload {
  """The client mutation ID."""
  clientMutationId: String

  """Whether the promotion campaign was accepted."""
  didSucceed: Boolean!

  """error"""
  error: AcceptPromotionCampaignError

  """error message"""
  errorMessage: String

  """Outcome"""
  outcome: AcceptPromotionCampaignOutcome
}

"""Accept promotion campaign error"""
enum AcceptPromotionCampaignError {
  """The promotion campaign is not available to the user."""
  GENERAL_ACCEPT_PROMOTION_CAMPAIGN_ERROR
}

"""Accept promotion campaign outcome"""
type AcceptPromotionCampaignOutcome {
  """The promotion campaign success message."""
  successMessage: String

  """The promotion campaign success analytics event."""
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Input for the `reauthenticate` mutation."""
input ReauthenticateInput {
  clientMutationId: String

  """A refresh token."""
  refreshToken: String!
}

"""Payload for the `reauthenticate` mutation."""
type ReauthenticatePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ReauthenticateOutcome
  error: ReauthenticateErrorEnum
  result: ReauthenticateResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  accessToken: String @deprecated(reason: "Use `outcome` instead.")
  refreshToken: String @deprecated(reason: "Use `outcome` instead.")
  expiresIn: Int @deprecated(reason: "Use `outcome` instead.")
  viewer: Viewer @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `reauthenticate` mutation."""
type ReauthenticateOutcome {
  """The access token."""
  accessToken: String!

  """The refresh token."""
  refreshToken: String!

  """Retrieve details for the current user."""
  viewer: Viewer
}

"""Errors for the `reauthenticate` mutation."""
enum ReauthenticateErrorEnum {
  """The refresh token is no longer valid or otherwise not accepted."""
  INVALID_REFRESH_TOKEN

  """The user account is currently locked."""
  USER_ACCOUNT_LOCKED
}

type ReauthenticateResult {
  didSucceed: Boolean!
  inputError: ReauthenticateInputErrorEnum
}

enum ReauthenticateInputErrorEnum {
  INVALID_REFRESH_TOKEN
  USER_ACCOUNT_LOCKED
}

"""Input for the `rebalancePortfolioSlice` mutation."""
input RebalancePortfolioSliceInput {
  clientMutationId: String

  """The ID of the portfolio slice."""
  portfolioSliceId: ID!

  """
  When `true`, the portfolio slice will be marked for rebalance; when `false`,
  any existing mark for rebalance will be removed.
  """
  isRebalance: Boolean!

  """Do not use, no longer functional. Will be removed in the future."""
  isRecursive: Boolean
}

"""Payload for the `rebalancePortfolioSlice` mutation."""
type RebalancePortfolioSlicePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: RebalancePortfolioSliceOutcome
  error: RebalancePortfolioSliceErrorEnum
  result: RebalancePortfolioSliceResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  account: Account @deprecated(reason: "Use `outcome` instead.")
  portfolioSlice: PortfolioSlice @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `rebalancePortfolioSlice` mutation."""
type RebalancePortfolioSliceOutcome {
  """The updated account."""
  account: Account

  """The updated portfolio slice."""
  portfolioSlice: PortfolioSlice

  """Updated estimated trading information for the Invest account."""
  estimatedTrading: EstimatedTrading
}

"""Errors for the `rebalancePortfolioSlice` mutation."""
enum RebalancePortfolioSliceErrorEnum {
  """
  The portfolio slice rebalance status cannot be changed because the slice has
  no allocated investments.
  """
  LOCKED_BY_ALLOCATION

  """
  The portfolio slice rebalance status cannot be changed because there are
  conflicting trade orders in the portfolio.
  """
  LOCKED_BY_ORDER

  """
  The portfolio slice rebalance status cannot be changed because trading is
  currently in progress for the account.
  """
  LOCKED_BY_TRADING

  """
  The portfolio slice rebalance status cannot be changed because there is a
  pending account liquidation.
  """
  LOCKED_BY_LIQUIDATION
}

type RebalancePortfolioSliceResult {
  didSucceed: Boolean!
  inputError: RebalancePortfolioSliceInputErrorEnum
}

enum RebalancePortfolioSliceInputErrorEnum {
  LOCKED_BY_ALLOCATION
  LOCKED_BY_ORDER
  LOCKED_BY_TRADING
  LOCKED_BY_LIQUIDATION
}

"""
An account agnostic way to rename Savings, Checking, Crypto, and Invest accounts
"""
input RenameAccountInput {
  clientMutationId: String

  """The id for the user's M1 product account to be renamed"""
  accountId: String

  """The new name the account should be updated to"""
  accountName: String
}

type RenameAccountPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: RenameAccountOutcome
  error: RenameAccountErrorEnum
}

"""Outcome for the `RenameAccount` mutation."""
type RenameAccountOutcome {
  """The newly updated account name"""
  name: String
}

"""Errors for the `RenameAccount` mutation."""
enum RenameAccountErrorEnum {
  """The account name selected has already been used for another account."""
  DUPLICATE_NAME

  """
  Account is a primary account and customer still has non-primary accounts open.
  """
  INVALID_ACCOUNT_CLOSING

  """The account id provided in the input is not valid for renaming."""
  INVALID_ACCOUNT_TYPE

  """There was a general error renaming an invest account."""
  INVEST_RENAME_ERROR

  """The savings account was not found."""
  SAVINGS_ACCOUNT_NOT_FOUND
}

"""Input for the `reportMobileDeviceInfo` mutation."""
input ReportMobileDeviceInfoInput {
  clientMutationId: String

  """The mobile device type."""
  type: MobileDeviceTypeEnum!

  """The raw model description string provided by the mobile platform API."""
  model: String!
}

"""A mobile device type."""
enum MobileDeviceTypeEnum {
  """iOS"""
  IOS

  """Android"""
  ANDROID
}

"""Payload for the `reportMobileDeviceInfo` mutation."""
type ReportMobileDeviceInfoPayload {
  clientMutationId: String
  didSucceed: Boolean!
  result: ReportMobileDeviceInfoResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
}

type ReportMobileDeviceInfoResult {
  didSucceed: Boolean!
  inputError: ReportMobileDeviceInfoInputErrorEnum
}

enum ReportMobileDeviceInfoInputErrorEnum {
  INVALID_MODEL
}

"""Input for the `requestAccountDeactivation` mutation."""
input RequestAccountDeactivationInput {
  clientMutationId: String

  """
  Is the user in the primary onboarding flow or not. If not in onboarding and a user profile isn't found, this will result in an error.
  """
  isUserOnboarding: Boolean!
}

"""Payload for the `requestAccountDeactivation` mutation."""
type RequestAccountDeactivationPayload {
  clientMutationId: String
  didSucceed: Boolean!
}

input RequestOfflineOpenAccountInput {
  clientMutationId: String

  """Registation type of investment account to open."""
  registration: OfflineAccountRegistrationEnum!
}

type RequestOfflineOpenAccountPayload {
  clientMutationId: String
  didSucceed: Boolean!

  """Metadata about the result of executing the mutation."""
  result: RequestOfflineOpenAccountResult!
}

"""An account registration type available for offline opening only."""
enum OfflineAccountRegistrationEnum {
  """Corporation"""
  CORPORATION

  """LLC"""
  LLC

  """Partnership"""
  PARTNERSHIP

  """Trust"""
  TRUST
}

"""
Metadata about the result of executing the `RequestOfflineOpenAccount` mutation.
"""
type RequestOfflineOpenAccountResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!
}

"""Input for the `requestReferralsParticipation` mutation."""
input RequestReferralsParticipationInput {
  clientMutationId: String
}

"""Payload for the `requestReferralsParticipation` mutation."""
type RequestReferralsParticipationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: RequestReferralsParticipationOutcome
  error: RequestReferralsParticipationErrorEnum
  result: RequestReferralsParticipationResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  user: User @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `requestReferralsParticipation` mutation."""
type RequestReferralsParticipationOutcome {
  """The updated user."""
  user: User!
}

"""Errors for the `requestReferralsParticipation` mutation."""
enum RequestReferralsParticipationErrorEnum {
  """The user is not currently eligible to participate."""
  INELIGIBLE_FOR_PARTICIPATION

  """A valid payments account must be set before requesting to participate."""
  MUST_SELECT_PAYMENTS_ACCOUNT
}

type RequestReferralsParticipationResult {
  didSucceed: Boolean!
  inputError: RequestReferralsParticipationInputErrorEnum
}

enum RequestReferralsParticipationInputErrorEnum {
  INELIGIBLE_FOR_PARTICIPATION
  MUST_SELECT_PAYMENTS_ACCOUNT
}

"""Input for the `resendEmailVerification` mutation."""
input ResendEmailVerificationInput {
  clientMutationId: String
}

"""Payload for the `resendEmailVerification` mutation."""
type ResendEmailVerificationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ResendEmailVerificationOutcome
  error: ResendEmailVerificationErrorEnum
  result: ResendEmailVerificationResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  email: String @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `resendEmailVerification` mutation."""
type ResendEmailVerificationOutcome {
  """The email address to which the verification email was resent."""
  email: String @deprecated(reason: "Email is no longer returned for this outcome.")
}

"""Errors for the `resendEmailVerification` mutation."""
enum ResendEmailVerificationErrorEnum {
  """The email address is already verified."""
  EMAIL_ALREADY_VERIFIED
}

type ResendEmailVerificationResult {
  didSucceed: Boolean!
  inputError: ResendEmailVerificationInputErrorEnum
}

enum ResendEmailVerificationInputErrorEnum {
  EMAIL_ALREADY_VERIFIED
}

"""Input for the `resetPassword` mutation."""
input ResetPasswordInput {
  clientMutationId: String

  """A reset-password token."""
  resetPasswordToken: String!

  """The new password."""
  newPassword: String!

  """The last four digits of the primary account owner's SSN."""
  ssnLastFour: String
}

"""Payload for the `resetPassword` mutation."""
type ResetPasswordPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ResetPasswordOutcome
  error: ResetPasswordErrorEnum
  result: ResetPasswordResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  accessToken: String @deprecated(reason: "Use `outcome` instead.")
  refreshToken: String @deprecated(reason: "Use `outcome` instead.")
  expiresIn: Int @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `resetPassword` mutation."""
type ResetPasswordOutcome {
  """The access token."""
  accessToken: String

  """The refresh token."""
  refreshToken: String

  """Retrieve details for the current user."""
  viewer: Viewer
}

"""Errors for the `resetPassword` mutation."""
enum ResetPasswordErrorEnum {
  """The reset password token is unknown."""
  UNKNOWN_RESET_PASSWORD_TOKEN

  """The reset password token is expired."""
  EXPIRED_RESET_PASSWORD_TOKEN

  """The user account is currently locked."""
  USER_ACCOUNT_LOCKED

  """The new password is too simple."""
  INVALID_NEW_PASSWORD

  """
  The last four digits of a primary account owner's SSN are required to reset.
  """
  SSN_CHALLENGE_REQUIRED

  """The account challenge input is incorrect."""
  ACCOUNT_CHALLENGE_FAILED

  """
  Automated password reset is not allowed when two factor authentication is
  enabled.
  """
  NO_RESET_WITH_2FA

  """The password reset attempt is not allowed."""
  RESET_ATTEMPT_REJECTED
}

type ResetPasswordResult {
  didSucceed: Boolean!
  inputError: ResetPasswordInputErrorEnum
}

enum ResetPasswordInputErrorEnum {
  UNKNOWN_RESET_PASSWORD_TOKEN
  EXPIRED_RESET_PASSWORD_TOKEN
  USER_ACCOUNT_LOCKED
  INVALID_NEW_PASSWORD
  SSN_CHALLENGE_REQUIRED
  ACCOUNT_CHALLENGE_FAILED
  NO_RESET_WITH_2FA
  RESET_ATTEMPT_REJECTED
}

"""Input for `resubmitLoanAfterCreditFreeze` mutation."""
input ResubmitLoanAfterCreditFreezeInput {
  clientMutationId: String
}

type ResubmitLoanAfterCreditFreezePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: ResubmitLoanAfterCreditFreezeOutcome
  error: ResubmitLoanAfterCreditFreezeOutcomeErrorEnum
}

enum ResubmitLoanAfterCreditFreezeOutcomeErrorEnum {
  """GENERIC_RESUBMIT_AFTER_CREDIT_FREEZE_ERROR"""
  GENERIC_RESUBMIT_AFTER_CREDIT_FREEZE_ERROR
}

type ResubmitLoanAfterCreditFreezeOutcome {
  """The loan application ID."""
  applicationId: String!

  """The loan ID."""
  loanId: String
}

"""Input for the `revokeRefresh` mutation."""
input RevokeRefreshInput {
  clientMutationId: String

  """A refresh token."""
  refreshToken: String!
}

"""Payload for the `revokeRefresh` mutation."""
type RevokeRefreshPayload {
  clientMutationId: String
  didSucceed: Boolean!
  result: RevokeRefreshResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
}

type RevokeRefreshResult {
  didSucceed: Boolean!
}

"""Input for the `sendTestPushNotification` mutation."""
input SendTestPushNotificationInput {
  clientMutationId: String
}

"""Payload for the `sendTestPushNotification` mutation."""
type SendTestPushNotificationPayload {
  clientMutationId: String
  didSucceed: Boolean!
}

"""Input for `setFullyPaidLendingStatus`."""
input SetFullyPaidLendingStatusInput {
  clientMutationId: String

  """User's desired fully paid lending status."""
  fplStatus: Boolean!
}

"""Payload for `setFullyPaidLendingStatus`."""
type SetFullyPaidLendingStatusPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetFullyPaidLendingStatusOutcome
  error: SetFullyPaidLendingStatusErrorEnum
}

"""Outcome for `setFullyPaidLendingStatus`."""
type SetFullyPaidLendingStatusOutcome {
  """Analytics event to fire when present."""
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Error enum for `setFullyPaidLendingStatus`."""
enum SetFullyPaidLendingStatusErrorEnum {
  """GENERIC_ERROR"""
  GENERIC_ERROR
}

input SetIntroductionSourceInput {
  clientMutationId: String
  introductionSource: IntroductionSourceEnum!
}

type SetIntroductionSourcePayload {
  didSucceed: Boolean!
}

"""Input for the `setPortfolioSliceOrder` mutation."""
input SetPortfolioSliceOrderInput {
  clientMutationId: String

  """The ID of the portfolio slice."""
  portfolioSliceId: ID!

  """
  The signed cash flow amount that is requested for trading. Positive values
  indicate cash inflows/buys, negative values indicate cash outflows/sells.
  Setting a value of zero will remove an existing order for the portfolio slice
  if any exists, or do nothing otherwise.
  """
  cashFlow: Float!

  """
  Optional -  Margin buying power used for an order. Clients should only use this field when creating a margin BUY order.
  This is also used to direct the mutation to use new trade directive endpoint when creating an order.
  """
  marginCashFlow: Float

  """
  Optional - order type is the direction of the order. Currently this is only used in the trade directive endpoint when creating a margin BUY order.
  """
  orderType: ManualPortfolioSliceOrderTypeEnum
}

enum ManualPortfolioSliceOrderTypeEnum {
  BUY
  SELL
}

"""Payload for the `setPortfolioSliceOrder` mutation."""
type SetPortfolioSliceOrderPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetPortfolioSliceOrderOutcome
  error: SetPortfolioSliceOrderErrorEnum
  result: SetPortfolioSliceOrderResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  account: Account @deprecated(reason: "Use `outcome` instead.")
  portfolioSlice: PortfolioSlice @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `setPortfolioSliceOrder` mutation."""
type SetPortfolioSliceOrderOutcome {
  """The updated account."""
  account: Account

  """The updated portfolio slice."""
  portfolioSlice: PortfolioSlice

  """Updated estimated trading information for the Invest account."""
  estimatedTrading: EstimatedTrading
}

"""Errors for the `setPortfolioSliceOrder` mutation."""
enum SetPortfolioSliceOrderErrorEnum {
  """
  The portfolio slice order status cannot be changed because there are
  conflicting rebalance requests in the portfolio.
  """
  LOCKED_BY_REBALANCE

  """
  The portfolio slice order status cannot be changed because trading is
  currently in progress for the account.
  """
  LOCKED_BY_TRADING

  """
  The portfolio slice order status cannot be changed because there is a pending
  account liquidation.
  """
  LOCKED_BY_LIQUIDATION

  """
  The cash flow amount is less than the minimum buy order for this slice.
  """
  LESS_THAN_MINIMUM_BUY

  """
  The cash flow amount is greater than the maximum sell order for this slice.
  """
  GREATER_THAN_MAXIMUM_SELL

  """Orders cannot be set for portfolio slices to inactive sliceables."""
  CANNOT_SET_ORDER_FOR_INACTIVE_SLICEABLE

  """Buy orders cannot be set for portfolio slices to delisted sliceables."""
  CANNOT_SET_BUY_ORDER_FOR_DELISTED_SLICEABLE
}

type SetPortfolioSliceOrderResult {
  didSucceed: Boolean!
  inputError: SetPortfolioSliceOrderInputErrorEnum
}

enum SetPortfolioSliceOrderInputErrorEnum {
  LOCKED_BY_REBALANCE
  LOCKED_BY_TRADING
  LOCKED_BY_LIQUIDATION
  LESS_THAN_MINIMUM_BUY
  GREATER_THAN_MAXIMUM_SELL
  CANNOT_SET_ORDER_FOR_INACTIVE_SLICEABLE
  CANNOT_SET_BUY_ORDER_FOR_DELISTED_SLICEABLE
}

"""Input for the `setPreferredPlatformPaymentMethod` mutation"""
input SetPreferredPlatformPaymentMethodInput {
  """A unique identifier for the client performing the mutation"""
  clientMutationId: String

  """Participant ID"""
  participantId: ID!
}

"""Payload for the `setPreferredPlatformPaymentMethod` mutation"""
type SetPreferredPlatformPaymentMethodPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetPreferredPlatformPaymentMethodOutcome
  error: SetPreferredPlatformPaymentMethodErrorEnum
}

"""Errors for the `setPreferredPlatformPaymentMethod` mutation"""
enum SetPreferredPlatformPaymentMethodErrorEnum {
  """Error that occurs when the mutation update fails"""
  PREFERRED_ACCOUNT_UPDATE_FAILED
}

"""Outcome for the `setPreferredPlatformPaymentMethod` mutation"""
type SetPreferredPlatformPaymentMethodOutcome {
  """Node ID of the preferred payment method"""
  preferredPaymentMethodId: ID

  """
  The analytics event for when the mutation successfully sets a preferred account
  """
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Input for the `setPreferredTradeWindow` mutation."""
input SetPreferredTradeWindowInput {
  clientMutationId: String

  """The ID of the account to update."""
  accountId: ID

  """Preferred trade window for the user's account."""
  preferredTradeWindow: PreferredTradeWindowEnum!

  """Flag to apply the setting to all broker accounts for the user."""
  applyToAllAccounts: Boolean
}

"""Payload for the `setPreferredTradeWindow` mutation."""
type SetPreferredTradeWindowPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SetPreferredTradeWindowOutcome
  error: SetPreferredTradeWindowErrorEnum
}

"""Outcome for the `setPreferredTradeWindow` mutation."""
type SetPreferredTradeWindowOutcome {
  """The updated account."""
  account: Account
}

"""Errors for the `setPreferredTradeWindow` mutation."""
enum SetPreferredTradeWindowErrorEnum {
  """The user is not eligible to set a preferred trade window."""
  NOT_ELIGIBLE

  """Generic error."""
  ERROR_UPDATING_TRADE_WINDOW_PREFERENCE
}

input SetRootPieInput {
  """The ID of the account to update."""
  accountId: ID!
  clientMutationId: String

  """The ID of the pie to set as the root pie for the account."""
  pieId: ID!
}

type SetRootPiePayload {
  """Retrieve the updated account."""
  account: Account
  clientMutationId: String
  didSucceed: Boolean!
  error: SetRootPieInputErrorEnum

  """Metadata about the result of executing the mutation."""
  result: SetRootPieResult! @deprecated(reason: "Use `didSucceed` and `error` instead.")

  """Analytics for the setRootPieMutation"""
  successAnalyticsEvent: AppAnalyticsEvent
}

"""Metadata about the result of executing the `SetRootPie` mutation."""
type SetRootPieResult {
  """
  Value is `true` if the mutation succeeded, or `false` if it failed due to an input error.
  """
  didSucceed: Boolean!

  """
  When `didSucceed` is `false`, the type of input error that caused the failure.
  """
  inputError: SetRootPieInputErrorEnum
}

"""Possible input errors for the `SetRootPie` mutation."""
enum SetRootPieInputErrorEnum {
  """The request is rejected for an unknown reason."""
  GENERAL_REJECTION

  """The indicated pie is not eligible to be set as a root pie."""
  INELIGIBLE_FOR_ROOT_PIE

  """A valid investment account ID must be provided."""
  INVALID_INVESTMENT_ACCOUNT_ID

  """A valid pie ID must be provided."""
  INVALID_PIE_ID

  """The indicated investment account was not found."""
  INVESTMENT_ACCOUNT_NOT_FOUND

  """The indicated pie was not found."""
  PIE_NOT_FOUND

  """The root pie may not be changed once it has been set once."""
  ROOT_PIE_NOT_EDITABLE
}

"""Input for the `setUserFinancialGoal` mutation."""
input SetUserFinancialGoalInput {
  clientMutationId: String

  """The goal the user is setting."""
  goal: String
}

type SetUserFinancialGoalPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: SetUserFinancialGoalErrorEnum
}

enum SetUserFinancialGoalErrorEnum {
  """User cannot set goal, for some unknown reason."""
  GENERAL_SET_GOAL_ERROR
}

"""Input for the `signAgreementBundle` mutation."""
input SignAgreementBundleInput {
  clientMutationId: String

  """The signature of the agreement bundle."""
  signature: String!
}

"""Payload for the `signAgreementBundle` mutation."""
type SignAgreementBundlePayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SignAgreementBundleOutcome
  error: SignAgreementBundleErrorEnum
  result: SignAgreementBundleResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  user: User @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `signAgreementBundle` mutation."""
type SignAgreementBundleOutcome {
  """The updated user."""
  user: User!
}

"""Errors for the `signAgreementBundle` mutation."""
enum SignAgreementBundleErrorEnum {
  """The signature is unknown or no longer valid."""
  INVALID_SIGNATURE
}

type SignAgreementBundleResult {
  didSucceed: Boolean!
  inputError: SignAgreementBundleInputErrorEnum
}

enum SignAgreementBundleInputErrorEnum {
  INVALID_SIGNATURE
}

input StartCryptoOnDemandTradeWindowInput {
  clientMutationId: String
  accountId: ID!
}

type StartCryptoOnDemandTradeWindowOutcome {
  tradeWindowId: ID!
}

type StartCryptoOnDemandTradeWindowPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: StartCryptoOnDemandTradeWindowOutcome

  """
  Enum value that represents an error code. Null, if the operations was successful.
  """
  error: StartCryptoOnDemandTradeWindowError

  """
  An error message that describes what went wrong if the mutation failed. Null, if the operation was successful.
  """
  errorMessage: String
}

enum StartCryptoOnDemandTradeWindowError {
  """
  Error code for when no trades have been calculated by the BE algorithm. This can happen if the amount is less than the trading threshold, $10.
  """
  NO_TRADES_CALCULATED

  """
  Error code for when BE calculates trades that cannot be mapped to crypto trades. Highly unlikely.
  """
  INVALID_TRADES_CALCULATED

  """
  Error code for when account is not a valid status, 'OPENED', 'NEW', 'CLOSED' etc.
  """
  ACCOUNT_STATUS_NOT_TRADEABLE

  """Error code for when an account is paused."""
  ACCOUNT_PAUSED

  """Error code for when an account no longer any remaining trade windows."""
  NO_MORE_TRADE_WINDOWS_LEFT

  """Error code for when the daily vendor trade window is active."""
  ACTIVE_VENDOR_MAINTENANCE_WINDOW

  """Error code for when there's an active trade window."""
  ACTIVE_TRADE_WINDOW

  """Catch all error code."""
  GENERAL_START_CRYPTO_ON_DEMAND_TRADE_WINDOW_ERROR
}

"""Input for `Mutation.startCustomerSupportConversation`."""
input StartCustomerSupportConversationInput {
  clientMutationId: String

  """A specific workflow the client is signaling intent for."""
  workflow: String!
}

"""
Possible input errors for the `StartCustomerSupportConversation` mutation.
"""
enum StartCustomerSupportConversationErrorEnum {
  """The request is rejected for an unknown reason."""
  GENERAL_REJECTION
}

"""Payload for `Mutation.startCustomerSupportConversation`."""
type StartCustomerSupportConverstionPayload {
  clientMutationId: String
  didSucceed: Boolean!
  error: StartCustomerSupportConversationErrorEnum
  outcome: StartCustomerSupportConversationOutcome
}

"""Outcome for `Mutation.startCustomerSupportConversation`."""
type StartCustomerSupportConversationOutcome {
  """External ID of the conversation. Currently an Intercom ID."""
  externalConversationId: String!
}

"""Input for the 'submitPersonalLoanApplication' mutation."""
input SubmitPersonalLoanApplicationInput {
  clientMutationId: String

  """The amount the applicant would like to borrow."""
  amount: Int

  """The requested term for the loan."""
  requestedTerm: Float

  """
  If this ends up being a multiselect, will need to be an array of options. TODO: remove once deprecated on client side
  """
  employmentStatus: LoanIncomeSourcesEnum

  """
  Application income before taxes per year. Conditionally passed if user is not in D2PL flow.
  """
  annualIncome: Int

  """Applicant housing costs per year."""
  yearlyHousingCost: Int

  """What the application will use the loan for."""
  purpose: LoanPurposeEnum

  """
  The signature associated to the Terms and Conditions `RequiredDocumentsBundle` a user must accept when submitting a personal loan application.
  """
  termsAndConditionsSignature: String
}

"""Payload for the `submitPersonalLoanApplication` mutation"""
type SubmitPersonalLoanApplicationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: SubmitPersonalLoanApplicationOutcome
  error: SubmitPersonalLoanApplicationErrorEnum
}

"""Outcome for the `submitPersonalLoanApplication` mutation"""
type SubmitPersonalLoanApplicationOutcome {
  """The application id for the application"""
  applicationId: String

  """An analytics event to be recorded upon success."""
  successAnalyticsEvent: AppAnalyticsEvent
}

enum SubmitPersonalLoanApplicationErrorEnum {
  GENERIC_PERSONAL_LOAN_ERROR
}

input SubmitUserFeedbackInput {
  userContext: String
  topicSelected: UserFeedbackTopicEnum!
  topicRating: Int!
  topicFeedback: String
  contactOptIn: Boolean
  platformVersion: String
  clientMutationId: String
}

enum UserFeedbackTopicEnum {
  """Personal Loans"""
  PERSONAL_LOANS

  """Margin Loans"""
  MARGIN_LOANS

  """Investment Accounts"""
  INVESTMENT_ACCOUNTS

  """High-Yield Savings Account"""
  SAVINGS

  """Owner’s Rewards Card"""
  CREDIT_CARD

  """Plus Membership"""
  PLUS_MEMBERSHIP

  """M1 General Feedback"""
  M1_GENERAL_FEEDBACK
}

type SubmitUserFeedbackPayload {
  didSucceed: Boolean!
  error: String
}

input UpdateCustodialAccountBeneficiaryLegalAddressInput {
  clientMutationId: String

  """The Custodial Account Beneficary Node ID."""
  custodialAccountBeneficiaryId: ID!

  """The new legal address for the Custodial Account Beneficiary."""
  updatedCustodialAccountBeneficiaryLegalAddress: MailingAddressBeneficiaryInput!
}

"""Payload for the `updateProfile` mutation."""
type UpdateCustodialAccountBeneficiaryLegalAddressPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: UpdateCustodialAccountBeneficiaryLegalAddressOutcome
  error: UpdateCustodialAccountBeneficiaryLegalAddressErrorEnum
}

"""
Outcome for the `updateCustodialAccountBeneficiaryLegalAddress` mutation.
"""
type UpdateCustodialAccountBeneficiaryLegalAddressOutcome {
  """Retrieve details for the current user."""
  viewer: Viewer

  """Retrieve the updated Custodial Account Beneficary's profile."""
  custodialAccountBeneficiary: CustodialAccountBeneficiary
}

enum UpdateCustodialAccountBeneficiaryLegalAddressErrorEnum {
  """
  Profile updates may not be made while the current profile information is unaccepted.
  """
  NO_UPDATE_UNTIL_ACCEPTED

  """The home address may not be a P.O. box."""
  HOME_ADDRESS_CANNOT_BE_PO_BOX

  """The provided home address is invalid."""
  INVALID_HOME_ADDRESS

  """
  Profile updates are temporarily frozen for a short period after a new account is opened. Try again later.
  """
  TEMPORARY_NEW_ACCOUNT_FREEZE
}

input UpdateEmailInput {
  """Client mutation id"""
  clientMutationId: String

  """New email address"""
  newEmail: String!

  """Old email address"""
  oldEmail: String!

  """User's phone number"""
  phoneNumber: String!

  """User entered verification code"""
  verificationCode: String!
}

type UpdateEmailPayload {
  """Did the mutation succeed"""
  didSucceed: Boolean!

  """Error code"""
  error: UpdateEmailErrorEnum

  """Error message"""
  errorMessage: String

  """Success message"""
  successMessage: String
}

enum UpdateEmailErrorEnum {
  """INCORRECT_CODE"""
  INCORRECT_CODE

  """INVALID_USERNAME"""
  INVALID_USERNAME

  """USERNAME_ALREADY_EXISTS"""
  USERNAME_ALREADY_EXISTS

  """INCORRECT_MFA_CODE"""
  INCORRECT_MFA_CODE

  """INVALID_INPUT"""
  INVALID_INPUT

  """UNKNOWN_ERROR"""
  UNKNOWN_ERROR

  """INVALID_PHONE"""
  INVALID_PHONE

  """NO_PENDING_2FA"""
  NO_PENDING_2FA

  """MULTIPLE_PENDING_2FA"""
  MULTIPLE_PENDING_2FA
}

input UpdateFullyPaidLendingStatusInput {
  clientMutationId: String

  """User's fully paid lending status"""
  fplStatus: Boolean!
}

type UpdateFullyPaidLendingStatusPayload {
  clientMutationId: String

  """User's fully paid lending status"""
  didSucceed: Boolean!

  """Error enum value"""
  error: UpdateFullyPaidLendingStatusErrorEnum
}

"""Error enum for the `updateFullyPaidLendingStatus` mutation"""
enum UpdateFullyPaidLendingStatusErrorEnum {
  """ERROR_UPDATING_FULLY_PAID_LENDING_STATUS"""
  ERROR_UPDATING_FULLY_PAID_LENDING_STATUS
}

"""Input for the `updateUserData` mutation."""
input UpdateUserDataInput {
  clientMutationId: String

  """
  A list of entries to update. The entries will be merged with the existing
  list. If a key does not exist, it will be created. If a value is null, the key
  will be removed (if present).
  """
  entries: [UserDataEntryInput!]!
}

"""Represents a user data entry."""
input UserDataEntryInput {
  """The data key."""
  key: String!

  """The data value. Specifying null will remove the entry (if it existed)."""
  value: String
}

"""Payload for the `updateUserData` mutation."""
type UpdateUserDataPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: UpdateUserDataOutcome
  result: UpdateUserDataResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  user: User @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `updateUserData` mutation."""
type UpdateUserDataOutcome {
  """The updated user."""
  user: User!
}

type UpdateUserDataResult {
  didSucceed: Boolean!
}

"""Input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  clientMutationId: String

  """An email verification token."""
  verificationToken: String!
}

"""Payload for the `verifyEmail` mutation."""
type VerifyEmailPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: VerifyEmailOutcome
  error: VerifyEmailErrorEnum
  result: VerifyEmailResult! @deprecated(reason: "Use `didSucceed`, `outcome` and `error` instead.")
  email: String @deprecated(reason: "Use `outcome` instead.")
}

"""Outcome for the `verifyEmail` mutation."""
type VerifyEmailOutcome {
  """The email address that was verified."""
  email: String @deprecated(reason: "Email is no longer returned for this outcome.")
}

"""Errors for the `verifyEmail` mutation."""
enum VerifyEmailErrorEnum {
  """The email verification token is not valid."""
  INVALID_EMAIL_VERIFICATION_TOKEN
}

type VerifyEmailResult {
  didSucceed: Boolean!
  inputError: VerifyEmailInputErrorEnum
}

enum VerifyEmailInputErrorEnum {
  INVALID_EMAIL_VERIFICATION_TOKEN
}

"""Input for the 'withdrawPersonalLoan' mutation"""
input WithdrawPersonalLoanInput {
  clientMutationId: String

  """The id of the loan to be withdrawn"""
  loanId: String!
}

"""Payload for the `withdrawPersonalLoan` mutation"""
type WithdrawPersonalLoanPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: WithdrawPersonalLoanOutcome
  error: WithdrawPersonalLoanErrorEnum
}

"""Outcome for the `withdrawPersonalLoan` mutation"""
type WithdrawPersonalLoanOutcome {
  """An analytics event to be recorded upon success"""
  successAnalyticsEvent: AppAnalyticsEvent
}

enum WithdrawPersonalLoanErrorEnum {
  GENERIC_PERSONAL_LOAN_ERROR
  GENERIC_WITHDRAW_PERSONAL_LOAN_ERROR
}

"""Input for the 'withdrawPersonalLoanApplication' mutation"""
input WithdrawPersonalLoanApplicationInput {
  clientMutationId: String

  """The id of the application to be withdrawn"""
  applicationId: String!
}

"""Payload for the `withdrawPersonalLoanApplication` mutation"""
type WithdrawPersonalLoanApplicationPayload {
  clientMutationId: String
  didSucceed: Boolean!
  outcome: WithdrawPersonalLoanApplicationOutcome
  error: WithdrawPersonalLoanApplicationErrorEnum
}

enum WithdrawPersonalLoanApplicationErrorEnum {
  GENERIC_PERSONAL_LOAN_ERROR
}

"""Outcome for the `withdrawPersonalLoanApplication` mutation"""
type WithdrawPersonalLoanApplicationOutcome {
  """The loan application status"""
  status: LoanApplicationStatusEnum

  """An analytics event to be recorded upon success"""
  successAnalyticsEvent: AppAnalyticsEvent
}

type Onboarding implements Node {
  """The ID of this node."""
  id: ID!

  """The internal key of this node."""
  key: String

  """
  A collection of screens and other information to be used for invest onboarding.
  """
  onboardingInvest: OnboardingInvest!

  """Onboarding product selection."""
  productSelection: ProductSelection @deprecated(reason: "no longer used")

  """Due diligence requirements for onboarding a user."""
  dueDiligence: OnboardingDueDiligence

  """Onboarding progress interstitial banner messaging."""
  progressInterstitial: OnboardingProgressInterstitial @deprecated(reason: "no longer used")

  """
  Returns true if the feature flag for Spend direct onboarding is enabled for the user.
  """
  spendDirectOnboardingEnabled: Boolean! @deprecated(reason: "Spend direct onboarding is disabled.")

  """
  Returns true if the feature flag for Direct to IRA is enabled for the user
  """
  collectUserGoalsOnboardingEnabled: Boolean! @deprecated(reason: "no longer used")

  """
  Returns the required agreements for a user to be shown on the Profile Confirmation screen. If null, service is erroring - users will still see these disclosures on the final account opening confirmation screens.
  """
  profileConfirmationRequiredDocuments: RequiredDocumentsBundle
}

"""Product driven onboarding selection."""
type ProductSelection {
  """Title for the product driven onboarding screen."""
  title: String

  """Set of available product options."""
  products: [ProductList]
}

"""Enum set for a Product List."""
enum ProductListIdentifier {
  BORROW_PERSONAL_LOANS
  INVEST_INDIVIDUAL
  INVEST_RETIREMENT
  SPEND_SAVINGS
}

"""List of products for direct onboarding."""
type ProductList {
  """Identifier for clients to key off of for custom product behavior."""
  identifier: ProductListIdentifier

  """Icon for specific product type."""
  icon: AppImage

  """Array of illustration names for the specific product type"""
  illustrationName: [String]

  """Illustration for the specific product type"""
  illustration: AppImage

  """Header text for specific product type."""
  header: String

  """Subheader text for specific product type."""
  subheader: String

  """Label for the product's call to the action."""
  ctaLabel: String

  """
  Destination ENUM for product onboarding. Use this value to drive which product onboarding view to show the user.
  """
  destination: OnboardingProductSelectionDestination

  """An analytics event to fire when the given Product is displayed."""
  analyticsEvent: AppAnalyticsEvent

  """An analytics event to fire when the given Product is clicked."""
  analyticsEventClick: AppAnalyticsEvent

  """Disclosures section for the given product."""
  disclosure: ProductListDisclosure
}

type ProductListDisclosure {
  """
  An identifier that clients can key off us for custom disclosures behavior.
  """
  identifier: ProductListIdentifier

  """Label that opens up the disclosure."""
  label: String

  """Array of strings to be rendered as the actual disclosure itself."""
  content: [String]
}

enum OnboardingProductSelectionDestination {
  """BEGIN_INVEST_ONBOARDING"""
  BEGIN_INVEST_ONBOARDING

  """BEGIN_IRA_ONBOARDING"""
  BEGIN_IRA_ONBOARDING

  """BEGIN_PERSONAL_LOANS_ONBOARDING"""
  BEGIN_PERSONAL_LOANS_ONBOARDING

  """BEGIN_SAVINGS_ONBOARDING"""
  BEGIN_SAVINGS_ONBOARDING
}

"""Onboarding progress interstitial page."""
type OnboardingProgressInterstitial {
  """Banner to be displayed on the progress interstitial page."""
  banner: InterstitialBanner

  """
  When available, promotional copy to be displayed on the progress interstitial page.
  """
  promotionalText: OnboardingProgressInterstitialPromoText
}

type InterstitialBanner {
  """The header for the banner."""
  title: String!

  """The description for the banner."""
  description: String!

  """When available, the link to display in the banner."""
  appLink: AppLink

  """When available, the app action to display in the banner."""
  appAction: AppAction

  """An optional marketing image shown in the banner."""
  appImage: AppImage

  """An optional marketing image shown inline on mobile clients."""
  inlineImage: AppImage
}

"""Promotional copy to be displayed on the progress interstitial page."""
type OnboardingProgressInterstitialPromoText {
  """The text to be displayed."""
  text: String

  """When available, the corresponding tooltip for the promotional copy."""
  tooltip: OnboardingProgressInterstitialTooltip
}

"""When available, the tooltip to be displayed with promotional copy."""
type OnboardingProgressInterstitialTooltip {
  """The icon to be used as the tooltip trigger."""
  icon: AppImage!

  """The text to be used as the tooltip content."""
  text: String!

  """When available, the link to be included as the cta for the tooltip."""
  appLink: AppLink
}

"""Due diligence requirements for onboarding a user."""
type OnboardingDueDiligence {
  """An array of options for the occupation/industry dropdown question."""
  occupationDropdownOptions: [OccupationDropdownOption!]
}

"""An option for the occupation/industry dropdown question."""
type OccupationDropdownOption {
  """The description for the option."""
  label: String!
}

"""Enum set for a Product List."""
enum ProductIdentifier {
  BORROW_PERSONAL_LOANS
  INVEST_INDIVIDUAL
  INVEST_RETIREMENT
  SPEND_SAVINGS
}

"""List of products for direct onboarding."""
type OnboardingProduct {
  """Identifier for clients to key off of for custom product behavior."""
  identifier: ProductIdentifier

  """Icon for specific product type."""
  icon: AppImage

  """Array of illustration names for the specific product type"""
  illustrationName: [String]

  """Illustration for the specific product type"""
  illustration: AppImage

  """Header text for specific product type."""
  header: String

  """Subheader text for specific product type."""
  subheader: String

  """Label for the product's call to the action."""
  ctaLabel: String

  """
  Destination ENUM for product onboarding. Use this value to drive which product onboarding view to show the user.
  """
  destination: OnboardingProductSelectionDestination

  """An analytics event to fire when the given Product is displayed."""
  analyticsEvent: AppAnalyticsEvent

  """An analytics event to fire when the given Product is clicked."""
  analyticsEventClick: AppAnalyticsEvent

  """Disclosures section for the given product."""
  disclosure: ProductDisclosure
}

type ProductDisclosure {
  """
  An identifier that clients can key off us for custom disclosures behavior.
  """
  identifier: ProductIdentifier

  """Label that opens up the disclosure."""
  label: String

  """Array of strings to be rendered as the actual disclosure itself."""
  content: [String]
}

"""Contains the various screens and types used for Invest Onboarding."""
type OnboardingInvest {
  """The screen for selecting the invest product (general or retirement)"""
  investProductSelectionScreen: InvestProductSelectionScreen!

  """
  A collection of screens used for IRA onboarding and picking what type of IRA account to open.
  """
  iraOnboarding: IRAOnboarding!
}

"""Contains information for the Invest product selection screen."""
type InvestProductSelectionScreen {
  """The title of the invest product selection screen."""
  title: String!

  """The list of invest products you can onboard direct with."""
  productSelection: [ListItem]!

  """The analytics event thats fired off when the screen is rendered."""
  screenViewedAnalyticsEvent: AppAnalyticsEvent
}

"""Contains screens and types for Invest IRA Onboarding."""
type IRAOnboarding {
  """The screen for selecting how to fund the IRA account after onboarding."""
  iraFundingSelectionScreen: IRAFundingSelectionScreen

  """The screen for selecting what type of IRA to onboard and open."""
  iraAccountTypeSelectionScreen: AccountTypeSelectionScreen

  """
  The screen for assisting the user with what type of IRA account to open when rolling over or transfering an existing IRA.
  """
  iraRolloverTypeSelectionScreen: IRARolloverTypeSelectionScreen

  """
  Returns true if the feature flag for direct to IRA onboarding is enabled for the user.
  """
  directToIRAOnboardingEnabled: Boolean!
}

"""Contains information for the IRA Fund Account type screen."""
type IRAFundingSelectionScreen {
  """The title of the IRA funding selection screen."""
  title: String!

  """A collection of options for funding the IRA account."""
  fundingTypes: [ListItem]!

  """The analytics event thats fired off when the screen is rendered."""
  screenViewedAnalyticsEvent: AppAnalyticsEvent
}

"""Contains information for the Rollover account Type selection screen."""
type IRARolloverTypeSelectionScreen {
  """An array of disclosures to show."""
  disclosures: [String]!

  """Contains the title and copy for the help section."""
  helpSection: HelpSection

  """The learn more link"""
  learnMoreLink: AppLink

  """
  A collection of options for what IRA account type to open for a rollover or transfer.
  """
  rolloverTypes: [ListItem]!

  """The analytics event thats fired off when the screen is rendered."""
  screenViewedAnalyticsEvent: AppAnalyticsEvent

  """Copy to show under the title."""
  subtitle: String!

  """The title of the IRA account type selection screen."""
  title: String!
}

"""
A type that contains the help section information used on various IRA onboarding screens.
"""
type HelpSection {
  """The title of the help section."""
  title: String!

  """The main copy content for the help section."""
  copy: String!
}

type AccountTypeSelectionScreen {
  """
  A collection of the different account types you can choose when opening an account.
  """
  accountTypes: [ListItem]!

  """An array of disclosures to show on the screen."""
  disclosures: [String]!

  """The help title that sits above the learn more link."""
  helpTitle: String!

  """The learn more link"""
  learnMoreLink: AppLink

  """The analytics event thats fired off when the screen is rendered."""
  screenViewedAnalyticsEvent: AppAnalyticsEvent

  """The title of the account type selection screen."""
  title: String!
}

"""A Plus promotional message."""
type PlusPromotionalMessage {
  """An optional title for the message."""
  title: String

  """An optional tag for the title."""
  titleTag: String @deprecated(reason: "Use `appPill` instead.")

  """An optional pill for the title."""
  titlePill: AppPill

  """A message description."""
  description(
    """
    When provided and true, the string will include Markdown formatting.
    Currently only includes `**`.
    """
    includeMarkdown: Boolean
  ): String!

  """A shorter version of the message description."""
  shortDescription: String!

  """Optional disclosure text associated with the message."""
  disclosure: String

  """An analytics event to be recorded upon viewing message."""
  displayAnalyticsEvent: AppAnalyticsEvent

  """An optional link related to the message."""
  link: AppLink
}

"""BankAccountNumber description"""
scalar BankAccountNumber

"""BankRoutingNumber - string representing a bank routing number"""
scalar BankRoutingNumber

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[0-9]{9}$/`.
"""
scalar SocialSecurityNumber

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[\u{0020}-\u{007E}]{1,30}$/u`.
"""
scalar FirstName

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[A-Za-z ]{0,1}$/u`.
"""
scalar MiddleInitial

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[\u{0020}-\u{007E}]{1,30}$/u`.
"""
scalar LastName

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[\u{0020}-\u{007E}]{1,30}$/u`.
"""
scalar MailingAddressLineOne

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[\u{0020}-\u{007E}]{0,30}$/u`.
"""
scalar MailingAddressLineTwo

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[\u{0020}-\u{007E}]{1,28}$/u`.
"""
scalar MailingAddressCity

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[0-9]{5}$/u`.
"""
scalar PostalCode

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[\u{0020}-\u{007E}]{0,100}$/u`.
"""
scalar EmploymentDescription

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[\u{0020}-\u{007E}]{0,100}$/u`.
"""
scalar DisclosureDescription

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[A-Za-z0-9.]*$/`.
"""
scalar CompanySymbol

"""
A UTF-8 string that, after trimming, matches the regular expression `/^[0-9]{10,}$/`.
"""
scalar PhoneNumber

"""Promotion campaign key - colon separated key and value"""
scalar PromotionCampaignKey